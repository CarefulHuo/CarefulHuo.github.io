[{"title":"spring事务","date":"2022-05-05T02:19:09.000Z","path":"posts/7d41eccf.html","text":"简介spring 有五个事务隔离级别：ISOLATION_DEFAULT、ISOLATION_READ_UNCOMMITTED、ISOLATION_READ_COMMITTED、ISOLATION_REPEATABLE_READ、ISOLATION_SERIALIZABLE 第一种是 Spring 默认使用 DB设置的事务隔离级别，后面四种事务隔离级别跟 Mysql 的事务隔离级别一致，下面就类比着 Mysql 的事务隔离级别，进行分析！！！ 事务并发可能产生的问题释义脏读 ( Dirty Read )：一个事务读取到另一个未提交事务修改过的数据 session B 开启一个事务，修改了 id = 1 的 name 数据，但是 session B 事务未提交；此时 另一个 session A 事务读取到 session B 修改但没提交的 name 数据，并返回了，然后 session B 事务回滚了，那么此刻 session A 读取到的数据是不存在的，那么这种现象是脏读。(读未提交–该事务隔离级别会出现) 不可重复读 (Non-Repeatable-Read) : 事务 A 中，多次读取同一条数据，此时事务 A 并没有结束，事务 B 对同一条数据进行了修改，事务 A 读取到 事务 B 修改后的数据，造成了 事务 A 多次读取的数据值不一致，这种现象就是不可重复读 session A 事务开启，读取到 id = 1 的 name 数据为武汉，session A 事务并未结束， session B 事务将 id = 1 的 name 数据修改为 温州，session A 事务读取 id =1 的 name 数据为温州；session B 事务将 id = 1 的 name 数据修改为杭州，sesssion A 事务读取 id = 1 的 name 数据为杭州；session B 事务每次修改后的数据，session A 事务都能读取到最新的数据，那么这种现象就是不可重复读。(读未提交，读已提交–两种事务隔离级别都可能会出现) 幻读 (Phantom) : 一个事务读取符合某些条件的数据， 该事务未结束，此时另一个事务插入了一些符合这些条件的新数据，这个事务再次根据这些条件读取数据时，能把另一个事务插入的数据也取出来，那么这种现象叫幻读 session A 事务开启，读取 id &gt; 0 的 name 数据为武汉，session 事务 A 未结束；session B 事务开启，插入温州市数据；session A 事务再次读取 id &gt; 0 的 name 数据，读取到武汉和温州时，这种现象就是幻读 (读未提交，读已提交，可重复读–三种隔离级别都可能出现) 事务隔离级别释义DEFAULT：采用 DB 默认设置的事务隔离级别READ_UNCOMMITTED：读未提交(会出现脏读，不可重复读，幻读)(隔离级别最低，并发性能最高) session A 事务开启，更新 id = 1 的数据为温州；session B 的事务开启，读取到未提交事务 A 修改的数据； READ_COMMITTED：读已提交(会出现不可重复读，幻读) session A 事务开启，更新 id =1 的 name 数据，session B 事务开启，读取 id = 1 的 name 数据为 武汉；session A事务提交，session B 事务再次读取 id = 1 的name 数据为温州；也就是说 事务 B 只能读取到 事务 A 修改且提交的数据 REPEATABLE_READ：可重复读(会出现幻读) session A 事务开启，更新 id = 1 的 name 名称为温州，此时 session B 事务开启，读取 id = 1 的数据为 武汉 session A 事务读取 id = 1 的 name 名称为温州；session A 事务提交；session B 事务提交；session B 事务再次读取 id = 1 的 name 名称为 温州；也就是说在可重复读隔离级别下，session B 事务读取 session A 事务修改后的值，需要 session A 事务修改数据且提交，session B 当前的事务也提交。 提问：为什么 session A事务修改数据，加了写锁，为什么别的事务还可以操作？因为 MVCC 多版本控制，有快照可以供其他事务读 SERIALIZABLE：可串行化(不会出现脏读、不可重复读，幻读)(隔离级别最高，并发性能最低)1. 读读操作(不会阻塞，两个读操作互不影响) 2. 读写操作(会产生阻塞，读操作提交之后，写操作才会执行) 3. 写读操作(会阻塞，写操作提交之后，读操作才会执行) 4. 写写操作(会阻塞，前面的写操作提交之后，后面的写操作才会执行) 事务传播行为在 Spring-tx 的 jar 包中， TransactionDefinition 接口定义了七种事务传播行为： 1. PROPAGATION_REQUIRED（Spring 默认设置）​ 当前方法必须在一个具有事务的上下文中运行，如果调用端有事务在运行，那么被调用端将在该事务中运行，否则将重新开启一个事务( 如果被调用端发生异常，则调用端和被调用端事务都将回滚 ) 2. PROPAGATION_SUPPORTS​ 当前方法不必需要一个具有事务的上下文，但是上下文具有事务时，也可以在这个事务中运行 3. PROPAGATION_MANDATORY​ 当前方法必须在一个事务中运行，不然会抛出异常 4. PROPAGATION_REQUIRES_NEW​ 当前方法必须运行在它自己的事务中，如果一个新的事务将启动，而且如果有一个当前事务在运行的话，则当前事务( 方法 )在运行期被挂起，等待新事务提交或回滚才恢复执行 5. PROPAGATION_NOT_SUPPORTED​ 当前方法不支持在事务中运行，总是以非事务的方式运行，如果有一个事务正在执行，当前方法将在运行期挂起，直到这个事务提交或回滚，才恢复执行 6. PROPAGATION_NEVER​ 当前方法不支持在事务中运行，如果存在当前事务，将会抛出异常 7. PROPAGATION_NESTED​ 如果当前方法存在一个事务正在执行，那么该方法应该运行在一个嵌套事务中，被嵌套的事务(子事务)可以独立于被封装的事务(父事务)之外提交或回滚。如果封装事务存在，并且外层事务抛出异常，事务回滚，那么内层事务必须回滚，反之，内层事务并不影响外层事务。如果封装事务不存在，则跟 PROPAGATION_REQUIRED 的传播机制一致 事务失效的场景1. 没有走动态代理导致事务失效的场景1.1 访问权限问题Java 的访问权限，主要有四种：private、default、protected 、public 权限从左往右，依次变大，如果事务方法，使用错误的访问权限，事务就会出现问题，spring-tx 的 jar 包 中 AbstractFallbackTransactionAttributeSource#computeTransactionAttribute() 方法，事务方法必须是 public 关键字修饰的访问权限，否则会返回 null，事务就会失效，所以事务方法访问权限是 private ，default ，protected 关键字修饰时，Spring不会提供事务功能 1.2 使用 final 、static 关键字修饰如果某个方法不想被子类重写，就需要用 final 关键字修饰，Spring 的事务是基于 AOP 实现的，如果使用 final 关键字，该方法将不会被重写，则无法通过动态代理，生成代理类，添加事务；static 关键字也无法使用动态代理，生成代理类，添加事务！ 1.3 方法内部调用同一个类中的方法，直接内部调用，会导致事务失效，因为 spring 的 事务是通过 aop 实现的，同一个类中的方法，直接调用，相当于通过 this 关键字直接调用方法，没有通过代理类，添加事务，故事务失效！可以通过 AopContext#currentProxy() 获取代理对象，使用事务！！！ @Servcie public class ServiceA { public void save(User user) { queryData1(); queryData2(); ((ServiceA)AopContext.currentProxy()).doSave(user); } @Transactional(rollbackFor=Exception.class) public void doSave(User user) { addData1(); updateData2(); } } 1.4 没有被 Spring 管理使用 Spring 的事务，需要Bean 对象被 Spring 管理。没有使用@Controller @Service @Reponsitory @Component @Bean 等注解，对象将不会被 Spring 管理，则事务不生效 2. 异常导致事务失效的场景2.1 自己捕获异常Spring 事务需要正常回滚，必须抛出 Spring 能正确处理的异常，如果没有异常抛出，则事务不会回滚 @Slf4j @Service public class UserService { @Transactional public void add(UserModel userModel) throws Exception { try { saveData(userModel); updateData(userModel); } catch (Exception e) { log.error(e.getMessage(), e); } } } 2.2 手动抛出非(运行时异常(RuntimeException)或错误(Error))如果代码捕获了异常，并手动抛出了异常：Exception ，对于普通的 Exception (非运行时异常)，事务不会回滚 @Slf4j @Service public class UserService { @Transactional public void add(UserModel userModel) throws Exception { try { saveData(userModel); updateData(userModel); } catch (Exception e) { log.error(e.getMessage(), e); throw new Exception(e); } } } 2.3 自定义回滚异常@Transactional 注解中的 rollbackFor 属性使用默认值，那么当程序抛出 Exception ，事务不会回滚，所以，一般需要设置 rollbackFor 的属性值为 Exception 或 Throwable @Slf4j @Service public class UserService { @Transactional(rollbackFor = BusinessException.class) public void add(UserModel userModel) throws Exception { saveData(userModel); updateData(userModel); } }","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>spring 有五个事务隔离级别：ISOLATION_DEFAULT、ISOLATION_READ_UNCOMMITTED、ISOLATION_READ_COMMITTED、ISOLATION_REPEATABLE_READ、ISOLATION_SERIALIZABLE</p>\n<p>第一种是 Spring 默认使用 DB设置的事务隔离级别，后面四种事务隔离级别跟 Mysql 的事务隔离级别一致，下面就类比着 Mysql 的事务隔离级别，进行分析！！！</p>\n<span id=\"more\"></span>\n\n<h4 id=\"事务并发可能产生的问题释义\"><a href=\"#事务并发可能产生的问题释义\" class=\"headerlink\" title=\"事务并发可能产生的问题释义\"></a>事务并发可能产生的问题释义</h4><h5 id=\"脏读-Dirty-Read-：一个事务读取到另一个未提交事务修改过的数据\"><a href=\"#脏读-Dirty-Read-：一个事务读取到另一个未提交事务修改过的数据\" class=\"headerlink\" title=\"脏读 ( Dirty Read )：一个事务读取到另一个未提交事务修改过的数据\"></a>脏读 ( Dirty Read )：一个事务读取到另一个未提交事务修改过的数据</h5><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/Dirty_Read.png\">\n\n<p>session B 开启一个事务，修改了 id = 1 的 name 数据，但是 session B 事务未提交；此时 另一个 session A 事务读取到 session B 修改但没提交的 name 数据，并返回了，然后 session B 事务回滚了，那么此刻 session A 读取到的数据是不存在的，那么这种现象是脏读。(<font color=\"red\">读未提交–该事务隔离级别会出现</font>)</p>\n<h5 id=\"不可重复读-Non-Repeatable-Read-事务-A-中，多次读取同一条数据，此时事务-A-并没有结束，事务-B-对同一条数据进行了修改，事务-A-读取到-事务-B-修改后的数据，造成了-事务-A-多次读取的数据值不一致，这种现象就是不可重复读\"><a href=\"#不可重复读-Non-Repeatable-Read-事务-A-中，多次读取同一条数据，此时事务-A-并没有结束，事务-B-对同一条数据进行了修改，事务-A-读取到-事务-B-修改后的数据，造成了-事务-A-多次读取的数据值不一致，这种现象就是不可重复读\" class=\"headerlink\" title=\"不可重复读 (Non-Repeatable-Read) : 事务 A 中，多次读取同一条数据，此时事务 A 并没有结束，事务 B 对同一条数据进行了修改，事务 A 读取到 事务 B 修改后的数据，造成了 事务 A 多次读取的数据值不一致，这种现象就是不可重复读\"></a>不可重复读 (Non-Repeatable-Read) : 事务 A 中，多次读取同一条数据，此时事务 A 并没有结束，事务 B 对同一条数据进行了修改，事务 A 读取到 事务 B 修改后的数据，造成了 事务 A 多次读取的数据值不一致，这种现象就是不可重复读</h5><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/Non-Repeatable-Read.png\">\n\n<p>session A 事务开启，读取到 id = 1 的 name 数据为武汉，session A 事务并未结束， session B 事务将 id = 1 的 name 数据修改为 温州，session  A 事务读取 id =1 的 name 数据为温州；session B 事务将 id  = 1 的 name 数据修改为杭州，sesssion A 事务读取 id = 1 的 name 数据为杭州；session B 事务每次修改后的数据，session A 事务都能读取到最新的数据，那么这种现象就是不可重复读。(<font color=\"red\">读未提交，读已提交–两种事务隔离级别都可能会出现</font>)</p>\n<h5 id=\"幻读-Phantom-一个事务读取符合某些条件的数据，-该事务未结束，此时另一个事务插入了一些符合这些条件的新数据，这个事务再次根据这些条件读取数据时，能把另一个事务插入的数据也取出来，那么这种现象叫幻读\"><a href=\"#幻读-Phantom-一个事务读取符合某些条件的数据，-该事务未结束，此时另一个事务插入了一些符合这些条件的新数据，这个事务再次根据这些条件读取数据时，能把另一个事务插入的数据也取出来，那么这种现象叫幻读\" class=\"headerlink\" title=\"幻读 (Phantom) : 一个事务读取符合某些条件的数据， 该事务未结束，此时另一个事务插入了一些符合这些条件的新数据，这个事务再次根据这些条件读取数据时，能把另一个事务插入的数据也取出来，那么这种现象叫幻读\"></a>幻读 (Phantom) : 一个事务读取符合某些条件的数据， 该事务未结束，此时另一个事务插入了一些符合这些条件的新数据，这个事务再次根据这些条件读取数据时，能把另一个事务插入的数据也取出来，那么这种现象叫幻读</h5><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/Phantom.png\">\n\n<p>session A 事务开启，读取 id &gt; 0 的 name 数据为武汉，session 事务 A 未结束；session B 事务开启，插入温州市数据；session A 事务再次读取 id &gt; 0 的 name 数据，读取到武汉和温州时，这种现象就是幻读 (<font color=\"red\">读未提交，读已提交，可重复读–三种隔离级别都可能出现</font>)</p>\n<h4 id=\"事务隔离级别释义\"><a href=\"#事务隔离级别释义\" class=\"headerlink\" title=\"事务隔离级别释义\"></a>事务隔离级别释义</h4><h5 id=\"DEFAULT：采用-DB-默认设置的事务隔离级别\"><a href=\"#DEFAULT：采用-DB-默认设置的事务隔离级别\" class=\"headerlink\" title=\"DEFAULT：采用 DB 默认设置的事务隔离级别\"></a>DEFAULT：采用 DB 默认设置的事务隔离级别</h5><h5 id=\"READ-UNCOMMITTED：读未提交-会出现脏读，不可重复读，幻读-隔离级别最低，并发性能最高\"><a href=\"#READ-UNCOMMITTED：读未提交-会出现脏读，不可重复读，幻读-隔离级别最低，并发性能最高\" class=\"headerlink\" title=\"READ_UNCOMMITTED：读未提交(会出现脏读，不可重复读，幻读)(隔离级别最低，并发性能最高)\"></a>READ_UNCOMMITTED：读未提交(会出现<font color=\"red\">脏读，不可重复读，幻读</font>)(隔离级别最低，并发性能最高)</h5><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/Read-Uncommitted.png\">\n\n<p>session A 事务开启，更新 id = 1 的数据为温州；session B 的事务开启，读取到未提交事务 A 修改的数据；</p>\n<h5 id=\"READ-COMMITTED：读已提交-会出现不可重复读，幻读\"><a href=\"#READ-COMMITTED：读已提交-会出现不可重复读，幻读\" class=\"headerlink\" title=\"READ_COMMITTED：读已提交(会出现不可重复读，幻读)\"></a>READ_COMMITTED：读已提交(会出现<font color=\"red\">不可重复读，幻读</font>)</h5><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/Read-Committed.png\">\n\n<p>session A 事务开启，更新 id =1 的 name 数据，session B 事务开启，读取 id = 1 的 name 数据为 武汉；session A事务提交，session B 事务再次读取 id = 1 的name 数据为温州；也就是说 事务 B 只能读取到 事务 A 修改且提交的数据</p>\n<h5 id=\"REPEATABLE-READ：可重复读-会出现幻读\"><a href=\"#REPEATABLE-READ：可重复读-会出现幻读\" class=\"headerlink\" title=\"REPEATABLE_READ：可重复读(会出现幻读)\"></a>REPEATABLE_READ：可重复读(会出现<font color=\"red\">幻读</font>)</h5><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/Repeatable-Read.png\">\n\n<p>session A 事务开启，更新 id = 1 的 name 名称为温州，此时 session B 事务开启，读取 id = 1 的数据为 武汉</p>\n<p>session A 事务读取 id = 1 的 name 名称为温州；session A 事务提交；session B 事务提交；session B 事务再次读取 id = 1 的 name 名称为 温州；也就是说在可重复读隔离级别下，session B 事务读取 session A 事务修改后的值，需要 session A 事务修改数据且提交，session  B 当前的事务也提交。</p>\n<p>提问：为什么 session A事务修改数据，加了写锁，为什么别的事务还可以操作？因为 MVCC  多版本控制，有快照可以供其他事务读</p>\n<h5 id=\"SERIALIZABLE：可串行化-不会出现脏读、不可重复读，幻读-隔离级别最高，并发性能最低\"><a href=\"#SERIALIZABLE：可串行化-不会出现脏读、不可重复读，幻读-隔离级别最高，并发性能最低\" class=\"headerlink\" title=\"SERIALIZABLE：可串行化(不会出现脏读、不可重复读，幻读)(隔离级别最高，并发性能最低)\"></a>SERIALIZABLE：可串行化(<font color=\"red\">不会出现</font>脏读、不可重复读，幻读)(隔离级别最高，并发性能最低)</h5><h5 id=\"1-读读操作-不会阻塞，两个读操作互不影响\"><a href=\"#1-读读操作-不会阻塞，两个读操作互不影响\" class=\"headerlink\" title=\"1. 读读操作(不会阻塞，两个读操作互不影响)\"></a>1. 读读操作(不会阻塞，两个读操作互不影响)</h5><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/ReadOrRead.png\">\n\n<h6 id=\"2-读写操作-会产生阻塞，读操作提交之后，写操作才会执行\"><a href=\"#2-读写操作-会产生阻塞，读操作提交之后，写操作才会执行\" class=\"headerlink\" title=\"2. 读写操作(会产生阻塞，读操作提交之后，写操作才会执行)\"></a>2. 读写操作(会产生阻塞，读操作提交之后，写操作才会执行)</h6><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/Read-Write.png\">\n\n<h5 id=\"3-写读操作-会阻塞，写操作提交之后，读操作才会执行\"><a href=\"#3-写读操作-会阻塞，写操作提交之后，读操作才会执行\" class=\"headerlink\" title=\"3. 写读操作(会阻塞，写操作提交之后，读操作才会执行)\"></a>3. 写读操作(会阻塞，写操作提交之后，读操作才会执行)</h5><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/Write-Read.png\">\n\n<h5 id=\"4-写写操作-会阻塞，前面的写操作提交之后，后面的写操作才会执行\"><a href=\"#4-写写操作-会阻塞，前面的写操作提交之后，后面的写操作才会执行\" class=\"headerlink\" title=\"4. 写写操作(会阻塞，前面的写操作提交之后，后面的写操作才会执行)\"></a>4. 写写操作(会阻塞，前面的写操作提交之后，后面的写操作才会执行)</h5><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/Write-Write.png\">\n\n<h4 id=\"事务传播行为\"><a href=\"#事务传播行为\" class=\"headerlink\" title=\"事务传播行为\"></a>事务传播行为</h4><p>在 Spring-tx 的 jar 包中， TransactionDefinition 接口定义了七种事务传播行为：</p>\n<h5 id=\"1-PROPAGATION-REQUIRED（Spring-默认设置）\"><a href=\"#1-PROPAGATION-REQUIRED（Spring-默认设置）\" class=\"headerlink\" title=\"1. PROPAGATION_REQUIRED（Spring 默认设置）\"></a>1. PROPAGATION_REQUIRED（Spring 默认设置）</h5><p>​\t当前方法<font color=\"red\">必须在一个具有事务的上下文中运行</font>，如果调用端有事务在运行，那么被调用端将在该事务中运行，否则将重新开启一个事务( 如果被调用端发生异常，则调用端和被调用端事务都将回滚 )</p>\n<h5 id=\"2-PROPAGATION-SUPPORTS\"><a href=\"#2-PROPAGATION-SUPPORTS\" class=\"headerlink\" title=\"2. PROPAGATION_SUPPORTS\"></a>2. PROPAGATION_SUPPORTS</h5><p>​\t当前方法<font color=\"red\">不必需要一个具有事务的上下文</font>，但是上下文具有事务时，也可以在这个事务中运行</p>\n<h5 id=\"3-PROPAGATION-MANDATORY\"><a href=\"#3-PROPAGATION-MANDATORY\" class=\"headerlink\" title=\"3. PROPAGATION_MANDATORY\"></a>3. PROPAGATION_MANDATORY</h5><p>​\t当前方法<font color=\"red\">必须在一个事务中运行，不然会抛出异常</font></p>\n<h5 id=\"4-PROPAGATION-REQUIRES-NEW\"><a href=\"#4-PROPAGATION-REQUIRES-NEW\" class=\"headerlink\" title=\"4. PROPAGATION_REQUIRES_NEW\"></a>4. PROPAGATION_REQUIRES_NEW</h5><p>​\t当前方法<font color=\"red\">必须运行在它自己的事务中</font>，如果一个新的事务将启动，而且如果有一个当前事务在运行的话，则当前事务( 方法 )在运行期被挂起，等待新事务提交或回滚才恢复执行</p>\n<h5 id=\"5-PROPAGATION-NOT-SUPPORTED\"><a href=\"#5-PROPAGATION-NOT-SUPPORTED\" class=\"headerlink\" title=\"5. PROPAGATION_NOT_SUPPORTED\"></a>5. PROPAGATION_NOT_SUPPORTED</h5><p>​\t当前方法<font color=\"red\">不支持在事务中运行，总是以非事务的方式运行</font>，如果有一个事务正在执行，当前方法将在运行期挂起，直到这个事务提交或回滚，才恢复执行</p>\n<h5 id=\"6-PROPAGATION-NEVER\"><a href=\"#6-PROPAGATION-NEVER\" class=\"headerlink\" title=\"6. PROPAGATION_NEVER\"></a>6. PROPAGATION_NEVER</h5><p>​\t当前方法<font color=\"red\">不支持在事务中运行，如果存在当前事务，将会抛出异常</font></p>\n<h5 id=\"7-PROPAGATION-NESTED\"><a href=\"#7-PROPAGATION-NESTED\" class=\"headerlink\" title=\"7. PROPAGATION_NESTED\"></a>7. PROPAGATION_NESTED</h5><p>​\t如果当前方法<font color=\"red\">存在一个事务正在执行，那么该方法应该运行在一个嵌套事务中</font>，被嵌套的事务(子事务)可以独立于被封装的事务(父事务)之外提交或回滚。如果封装事务存在，并且外层事务抛出异常，事务回滚，那么内层事务必须回滚，反之，内层事务并不影响外层事务。如果封装事务不存在，则跟 PROPAGATION_REQUIRED 的传播机制一致</p>\n<h4 id=\"事务失效的场景\"><a href=\"#事务失效的场景\" class=\"headerlink\" title=\"事务失效的场景\"></a>事务失效的场景</h4><h5 id=\"1-没有走动态代理导致事务失效的场景\"><a href=\"#1-没有走动态代理导致事务失效的场景\" class=\"headerlink\" title=\"1. 没有走动态代理导致事务失效的场景\"></a>1. 没有走动态代理导致事务失效的场景</h5><h5 id=\"1-1-访问权限问题\"><a href=\"#1-1-访问权限问题\" class=\"headerlink\" title=\"1.1 访问权限问题\"></a>1.1 访问权限问题</h5><p>Java 的访问权限，主要有四种：private、default、protected 、public 权限从左往右，依次变大，如果事务方法，使用错误的访问权限，事务就会出现问题，<font color=\"red\">spring-tx 的 jar 包 中 AbstractFallbackTransactionAttributeSource#computeTransactionAttribute() 方法，事务方法必须是 public 关键字修饰的访问权限，否则会返回 null，事务就会失效</font>，所以事务方法访问权限是 private ，default ，protected 关键字修饰时，Spring不会提供事务功能</p>\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/20220505174927.png\">\n\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/20220505175024.png\">\n\n<h5 id=\"1-2-使用-final-、static-关键字修饰\"><a href=\"#1-2-使用-final-、static-关键字修饰\" class=\"headerlink\" title=\"1.2 使用 final 、static 关键字修饰\"></a>1.2 使用 final 、static 关键字修饰</h5><p>如果某个方法不想被子类重写，就需要用 final 关键字修饰，Spring 的事务是基于 AOP 实现的，如果使用 final 关键字，该方法将不会被重写，则无法通过动态代理，生成代理类，添加事务；static 关键字也无法使用动态代理，生成代理类，添加事务！</p>\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/20220505181232.png\">\n\n<h5 id=\"1-3-方法内部调用\"><a href=\"#1-3-方法内部调用\" class=\"headerlink\" title=\"1.3 方法内部调用\"></a>1.3 方法内部调用</h5><p>同一个类中的方法，直接内部调用，会导致事务失效，因为 spring 的 事务是通过 aop 实现的，同一个类中的方法，直接调用，相当于通过 this 关键字直接调用方法，没有通过代理类，添加事务，故事务失效！可以通过  AopContext#currentProxy() 获取代理对象，使用事务！！！</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Servcie</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceA</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>User user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">queryData1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">queryData2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ServiceA<span class=\"token punctuation\">)</span>AopContext<span class=\"token punctuation\">.</span><span class=\"token function\">currentProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSave</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor<span class=\"token operator\">=</span>Exception<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSave</span><span class=\"token punctuation\">(</span>User user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">addData1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token function\">updateData2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"1-4-没有被-Spring-管理\"><a href=\"#1-4-没有被-Spring-管理\" class=\"headerlink\" title=\"1.4 没有被 Spring 管理\"></a>1.4 没有被 Spring 管理</h5><p>使用 Spring 的事务，需要Bean 对象被 Spring 管理。没有使用@Controller @Service @Reponsitory @Component  @Bean 等注解，对象将不会被 Spring 管理，则事务不生效</p>\n<h5 id=\"2-异常导致事务失效的场景\"><a href=\"#2-异常导致事务失效的场景\" class=\"headerlink\" title=\"2. 异常导致事务失效的场景\"></a>2. 异常导致事务失效的场景</h5><h5 id=\"2-1-自己捕获异常\"><a href=\"#2-1-自己捕获异常\" class=\"headerlink\" title=\"2.1 自己捕获异常\"></a>2.1 自己捕获异常</h5><p>Spring 事务需要正常回滚，必须抛出 Spring 能正确处理的异常，如果没有异常抛出，则事务不会回滚</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>UserModel userModel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span>userModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token function\">updateData</span><span class=\"token punctuation\">(</span>userModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"2-2-手动抛出非-运行时异常-RuntimeException-或错误-Error\"><a href=\"#2-2-手动抛出非-运行时异常-RuntimeException-或错误-Error\" class=\"headerlink\" title=\"2.2 手动抛出非(运行时异常(RuntimeException)或错误(Error))\"></a>2.2 手动抛出非(运行时异常(RuntimeException)或错误(Error))</h5><p>如果代码捕获了异常，并手动抛出了异常：Exception ，对于普通的 Exception (非运行时异常)，事务不会回滚</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>UserModel userModel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span>userModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token function\">updateData</span><span class=\"token punctuation\">(</span>userModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"2-3-自定义回滚异常\"><a href=\"#2-3-自定义回滚异常\" class=\"headerlink\" title=\"2.3 自定义回滚异常\"></a>2.3 自定义回滚异常</h5><p>@Transactional 注解中的 rollbackFor 属性使用默认值，那么当程序抛出 Exception ，事务不会回滚，所以，一般需要设置 rollbackFor 的属性值为 Exception 或 Throwable</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor <span class=\"token operator\">=</span> BusinessException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>UserModel userModel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span>userModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token function\">updateData</span><span class=\"token punctuation\">(</span>userModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","comments":true,"link":"","tags":[{"name":"Spring","slug":"Spring","permalink":"https://carefulhuo.github.io/tags/Spring/"}]},{"title":"小情话第六百一十八则","date":"2022-04-28T05:19:58.000Z","path":"posts/608e932b.html","text":"小情话第六百一十八则","content":"<p> 小情话第六百一十八则</p>\n","comments":true,"link":"","tags":[{"name":"Little Love","slug":"Little-Love","permalink":"https://carefulhuo.github.io/tags/Little-Love/"}]},{"title":"Maven配置文件属性解析","date":"2022-04-20T11:24:09.000Z","path":"posts/57464dbe.html","text":"前置信息Maven 版本 apache-maven-3.5.2 Nexus 信息 nexus2、nexus3 镜像仓库 如果仓库 X 可以提供仓库 Y 存储的所有的内容，那么仓库 X 就可以说是 仓库 Y 的镜像(也就是说能从仓库 Y 获取的内容，从仓库 X 也能获取) 属性解析setting&lt;setting>setting 文件的根元素&lt;/setting> localRepository&lt;localRepository>本地仓库&lt;/localRepository> &lt;!-- 该属性一般需要自己设置 不设置的话，本地仓库默认地址为--> &lt;localRepository>${user.home}/.m2/repository&lt;/localRepository> interactiveMode&lt;interactiveMode>Maven 是否与用户交互&lt;/interactiveMode> &lt;!-- 该属性一般按照默认配置(设置为 true ) 设置为 false 时，Maven 会基于一些其他设置参数，配置一个默认值--> &lt;interactiveMode>true&lt;/interactiveMode> offline&lt;offline>离线模式&lt;/offline> &lt;!-- 该属性一般按照默认设置(设置为 false) 该属性值 Maven 构建时是否连接网络，会产生 jar 包下载、部署及其他错误影响--> &lt;offline>false&lt;/offline> pluginGroups&lt;pluginGroups>插件组&lt;/pluginGroups> proxies&lt;!-- | 代理主机信息 | 当公司网络与公网隔离，需要代理主机才能访问公网时，需要设置该属性 --> &lt;proxies> &lt;proxy> &lt;!-- (自定义id名称即可) --> &lt;id>optional&lt;/id> &lt;!-- (是否激活该代理) --> &lt;active>true&lt;/active> &lt;!-- (使用的代理协议) --> &lt;protocol>http&lt;/protocol> &lt;!-- (用户名) --> &lt;username>proxyuser&lt;/username> &lt;!-- (密码) --> &lt;password>proxypass&lt;/password> &lt;!-- (代理服务器地址) --> &lt;host>proxy.host.net&lt;/host> &lt;!-- (代理服务器端口) --> &lt;port>80&lt;/port> &lt;!-- (指定那些主机地址不需要代理) | 支持 “ | ” 分隔多个主机地址 | 支持 “ * ” 适配符 例如 *.baidu.com 表示所有以 baidu.com 结尾的主机地址,都不会走代理 --> &lt;nonProxyHosts>local.net|some.host.com&lt;/nonProxyHosts> &lt;/proxy> &lt;/proxies> &lt;!-- | 支持配置多个 proxy ，默认是第一个 proxy 配置生效 --> servers&lt;!-- | 仓库/镜像仓库的认证信息 --> &lt;servers> &lt;server> &lt;!-- (自定义id名称) | id 属性，需要与下面讲述的 mirror 、profile 属性中的 id 保持一致 --> &lt;id>deploymentRepo&lt;/id> &lt;!-- (用户名) --> &lt;username>repouser&lt;/username> &lt;!-- (密码) --> &lt;password>repopwd&lt;/password> &lt;/server> &lt;/servers> mirrors&lt;!-- | 镜像仓库 --> &lt;mirrors> &lt;mirror> &lt;!-- (自定义id名称) --> &lt;id>mirrorId&lt;/id> &lt;!-- (镜像仓库匹配范围) | “ * ”表示匹配所有远程仓库，任何对远程仓库的请求，都会转到该镜像地址下 | “ external:* ”表示匹配所有远程仓库(localhost、file://协议、这两种除外)即匹配不在本机上的所有远程仓库 | “ repo1,repo2 ”表示匹配 repo1、repo2 两个远程仓库，可以使用逗号分隔多个远程仓库 | “ *,!repo1”表示匹配所有远程仓库，但是 repo1 远程仓库除外 --> &lt;mirrorOf>repositoryId&lt;/mirrorOf> &lt;!-- (镜像名称) --> &lt;name>Human Readable Name for this Mirror.&lt;/name> &lt;!-- (镜像地址) --> &lt;url>http://my.repository.com/repo/path&lt;/url> &lt;/mirror> &lt;/mirrors> &lt;!-- | 镜像仓库的常用方式：结合私服使用 | 说明：因为私服，可以代理任何外部公共仓库，那么，可以使用一个私服地址，代理所有需要的外部公共仓库，简化 Maven 的配置。 这种情况下，私服可以说所有需要的外部公共仓库的镜像； | 如果镜像需要认证信息，同样是在 servers 中增加 server 信息 | 镜像仓库完全屏蔽了被镜像仓库，当镜像仓库不稳定或停止服务的时候，Maven 将无法方位被镜像仓库，因为无法下载内容 --> profiles&lt;!-- | 配置文件列表 | 不同环境的构建大概率是不同的，比如数据库配置、使用特殊版本的依赖、配置插件使用本地文件，为了让构建能在不同环境移植，Maven 引入 Profile --> &lt;profiles> &lt;profile> &lt;!-- (自定义id名称) --> &lt;id>nexus&lt;/id> &lt;repositories> &lt;repository> &lt;id>nexus&lt;/id> &lt;!-- (自定义资源名称) --> &lt;name>Nexus&lt;/name> &lt;!-- 仓库地址 --> &lt;url>http://100.4.252.5:18080/nexus/content/groups/public&lt;/url> &lt;releases> &lt;!-- 是否允许该仓库为构件提供 发布版 / 快照版 下载功能 --> &lt;enabled>true&lt;/enabled> &lt;!-- 每次执行构建命令时, Maven 会比较本地 POM 和远程 POM 的时间戳, 该元素指定比较的频率 | always（每次构建都检查） | daily（默认, 距上次构建检查时间超过一天） | interval: x（距上次构建检查超过 x 分钟） | never（从不） --> &lt;updatePolicy>daily&lt;/updatePolicy> &lt;!-- 当 Maven 验证构件的校验文件失败时该怎么做: ignore（忽略）, fail（失败）, 或者warn（警告）--> &lt;checksumPolicy>warn&lt;/checksumPolicy> &lt;/releases> &lt;snapshots> &lt;!-- 参照 releases --> &lt;enabled>true&lt;/enabled> &lt;updatePolicy>daily&lt;/updatePolicy> &lt;checksumPolicy>warn&lt;/checksumPolicy> &lt;/snapshots> &lt;/repository> &lt;/repositories> &lt;pluginRepositories> &lt;pluginRepository> &lt;id>nexus&lt;/id> &lt;name>Nexus&lt;/name> &lt;!-- 仓库地址 --> &lt;url>http://100.4.252.5:18080/nexus/content/groups/public&lt;/url> &lt;!-- (发布版本的插件) --> &lt;releases>&lt;enabled>true&lt;/enabled>&lt;/releases> &lt;!--(快照版本的插件) --> &lt;snapshots>&lt;enabled>true&lt;/enabled>&lt;/snapshots> &lt;/pluginRepository> &lt;/pluginRepositories> &lt;/profile> &lt;/profiles> &lt;!-- | profile 激活 | 通过命令行激活：用户使用 mvn 命令行参数 -P 加上 profile 的id 来激活 profile，多个通过逗号分隔 | setting.xml 配置文件显式激活：使用 activeProfiles 属性，表示 setting.xml 中的 profile 在所有项目中激活(下面会讲) | 系统属性激活 --> profile 种类 pom.xml: pom 文件的 profile 只对当前项目生效 用户setting.xml: 用户目录下/.m2/setting.xml 文件中的 profile 只对本机该用户所有的 Maven 项目生效 全局setting.xml: Maven 安装目录下的 setting.xml 文件中的 profile 对本机所有的 Maven 项目生效 profiles.xml (Maven 2) 还可以在项目根目录下使用一个额外的 profiles.xml 声明，该特性在 Maven 3 中移除，建议将 profiles 添加到 setting.xml 中 profile激活 通过命令行激活：用户使用 mvn 命令行参数 -P 加上 profile 的id 来激活 profile，多个通过逗号分隔 mvn clean -Pdev-x,dev-y setting.xml 配置文件显式激活：使用 activeProfiles 属性，表示 setting.xml 中的 profile 在所有项目中激活 &lt;activeProfiles> &lt;activeProfile>nexus&lt;/activeProfile> &lt;/activeProfiles> 系统属性激活：用户可以配置系统属性 test 存在时，自动激活 profile ，如下面第一个示例；用户可以配置系统属性存在，且系统属性值时，自动激活profile，如下面第二个示例 &lt;!-- 第一个示例 --> &lt;profiles> &lt;profile> &lt;activeprofile> &lt;property> &lt;name>test&lt;/name> &lt;/property> &lt;/activeprofile> &lt;/profile> &lt;/profiles> &lt;!-- 第二个示例 --> &lt;profiles> &lt;profile> &lt;activeprofile> &lt;property> &lt;name>test&lt;/name> &lt;value>x&lt;/value> &lt;/property> &lt;/activeprofile> &lt;/profile> &lt;/profiles> &lt;!-- 一定要记得，也是可以通过命令行声明系统属性激活 --> mvn clean -Ptest=x 操作系统环境激活：profile 可以根据不同操作系统环境自动激活，如果构建在不同操作系统环境且有差异，可以把这些差异写进 profile &lt;profiles> &lt;profile> &lt;activeprofile> &lt;os> &lt;name>Window XP&lt;/name> &lt;family>Window&lt;/value> &lt;arch>X86&lt;/arch> &lt;/os> &lt;/activeprofile> &lt;/profile> &lt;/profiles> 文件是否存在激活：Maven 能够根据项目中某个文件是否存在来决定是否激活 profile &lt;profiles> &lt;profile> &lt;activeprofile> &lt;file> &lt;missing>y.properties&lt;/name> &lt;exists>x.properties&lt;/value> &lt;/file> &lt;/activeprofile> &lt;/profile> &lt;/profiles> activeprofile&lt;!-- 使用 activeProfiles 属性，表示 setting.xml 中的 profile 在所有项目中激活 --> &lt;activeProfiles> &lt;activeProfile>central(id 需要与 profile 中的 id 保持一致)&lt;/activeProfile> &lt;/activeProfiles>","content":"<h4 id=\"前置信息\"><a href=\"#前置信息\" class=\"headerlink\" title=\"前置信息\"></a>前置信息</h4><h5 id=\"Maven-版本\"><a href=\"#Maven-版本\" class=\"headerlink\" title=\"Maven 版本\"></a>Maven 版本</h5><ul>\n<li>apache-maven-3.5.2</li>\n</ul>\n<span id=\"more\"></span>\n\n<h5 id=\"Nexus-信息\"><a href=\"#Nexus-信息\" class=\"headerlink\" title=\"Nexus 信息\"></a>Nexus 信息</h5><ul>\n<li>nexus2、nexus3</li>\n</ul>\n<h5 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h5><ul>\n<li>如果仓库 X 可以提供仓库 Y 存储的所有的内容，那么仓库 X 就可以说是 仓库 Y 的镜像(也就是说能从仓库 Y 获取的内容，从仓库 X 也能获取)</li>\n</ul>\n<h4 id=\"属性解析\"><a href=\"#属性解析\" class=\"headerlink\" title=\"属性解析\"></a>属性解析</h4><h5 id=\"setting\"><a href=\"#setting\" class=\"headerlink\" title=\"setting\"></a>setting</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span><span class=\"token punctuation\">></span></span>setting 文件的根元素<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>setting</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h5 id=\"localRepository\"><a href=\"#localRepository\" class=\"headerlink\" title=\"localRepository\"></a>localRepository</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span>本地仓库<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 该属性一般需要自己设置\n     不设置的话，本地仓库默认地址为--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span>${user.home}/.m2/repository<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h5 id=\"interactiveMode\"><a href=\"#interactiveMode\" class=\"headerlink\" title=\"interactiveMode\"></a>interactiveMode</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>interactiveMode</span><span class=\"token punctuation\">></span></span>Maven 是否与用户交互<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>interactiveMode</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 该属性一般按照默认配置(设置为 true )\n     设置为 false 时，Maven 会基于一些其他设置参数，配置一个默认值--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>interactiveMode</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>interactiveMode</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h5 id=\"offline\"><a href=\"#offline\" class=\"headerlink\" title=\"offline\"></a>offline</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>offline</span><span class=\"token punctuation\">></span></span>离线模式<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>offline</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 该属性一般按照默认设置(设置为 false)\n     该属性值 Maven 构建时是否连接网络，会产生 jar 包下载、部署及其他错误影响--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>offline</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>offline</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h5 id=\"pluginGroups\"><a href=\"#pluginGroups\" class=\"headerlink\" title=\"pluginGroups\"></a>pluginGroups</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pluginGroups</span><span class=\"token punctuation\">></span></span>插件组<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pluginGroups</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h5 id=\"proxies\"><a href=\"#proxies\" class=\"headerlink\" title=\"proxies\"></a>proxies</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- \n     | 代理主机信息\n    | 当公司网络与公网隔离，需要代理主机才能访问公网时，需要设置该属性 \n--></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>proxies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>proxy</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (自定义id名称即可) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>optional<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (是否激活该代理) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>active</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>active</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (使用的代理协议) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>protocol</span><span class=\"token punctuation\">></span></span>http<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>protocol</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (用户名) --></span>  \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>username</span><span class=\"token punctuation\">></span></span>proxyuser<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>username</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (密码) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>password</span><span class=\"token punctuation\">></span></span>proxypass<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>password</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (代理服务器地址) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>host</span><span class=\"token punctuation\">></span></span>proxy.host.net<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>host</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (代理服务器端口) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (指定那些主机地址不需要代理)\n          | 支持 “ | ” 分隔多个主机地址 \n        | 支持 “ * ” 适配符 例如 *.baidu.com 表示所有以 baidu.com 结尾的主机地址,都不会走代理\n      --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nonProxyHosts</span><span class=\"token punctuation\">></span></span>local.net|some.host.com<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nonProxyHosts</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>proxy</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>proxies</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- \n     | 支持配置多个 proxy ，默认是第一个 proxy 配置生效\n--></span>\n</code></pre>\n<h5 id=\"servers\"><a href=\"#servers\" class=\"headerlink\" title=\"servers\"></a>servers</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- \n    | 仓库/镜像仓库的认证信息\n--></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servers</span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>server</span><span class=\"token punctuation\">></span></span>   \n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (自定义id名称) \n          | id 属性，需要与下面讲述的 mirror 、profile 属性中的 id 保持一致\n      --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>deploymentRepo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (用户名) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>username</span><span class=\"token punctuation\">></span></span>repouser<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>username</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (密码) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>password</span><span class=\"token punctuation\">></span></span>repopwd<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>password</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>server</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servers</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h5 id=\"mirrors\"><a href=\"#mirrors\" class=\"headerlink\" title=\"mirrors\"></a>mirrors</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!--\n    | 镜像仓库\n--></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrors</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (自定义id名称) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>mirrorId<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (镜像仓库匹配范围) \n        | “ * ”表示匹配所有远程仓库，任何对远程仓库的请求，都会转到该镜像地址下\n        | “ external:* ”表示匹配所有远程仓库(localhost、file://协议、这两种除外)即匹配不在本机上的所有远程仓库\n        | “ repo1,repo2 ”表示匹配 repo1、repo2 两个远程仓库，可以使用逗号分隔多个远程仓库\n        | “ *,!repo1”表示匹配所有远程仓库，但是 repo1 远程仓库除外\t\t  \n      --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>repositoryId<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (镜像名称) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Human Readable Name for this Mirror.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (镜像地址) --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://my.repository.com/repo/path<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrors</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!--\t\n    | 镜像仓库的常用方式：结合私服使用\n        | 说明：因为私服，可以代理任何外部公共仓库，那么，可以使用一个私服地址，代理所有需要的外部公共仓库，简化 Maven 的配置。\n               这种情况下，私服可以说所有需要的外部公共仓库的镜像；\t\n    | 如果镜像需要认证信息，同样是在 servers 中增加 server 信息\n    | 镜像仓库完全屏蔽了被镜像仓库，当镜像仓库不稳定或停止服务的时候，Maven 将无法方位被镜像仓库，因为无法下载内容\n--></span>\n</code></pre>\n<h5 id=\"profiles\"><a href=\"#profiles\" class=\"headerlink\" title=\"profiles\"></a>profiles</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- \n    | 配置文件列表\n    | 不同环境的构建大概率是不同的，比如数据库配置、使用特殊版本的依赖、配置插件使用本地文件，为了让构建能在不同环境移植，Maven 引入 Profile \n--></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profiles</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (自定义id名称) --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>nexus<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span> \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>repositories</span><span class=\"token punctuation\">></span></span> \n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>repository</span><span class=\"token punctuation\">></span></span> \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>nexus<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (自定义资源名称) --></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Nexus<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 仓库地址 --></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://100.4.252.5:18080/nexus/content/groups/public<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>releases</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 是否允许该仓库为构件提供 发布版 / 快照版 下载功能 --></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>enabled</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>enabled</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 每次执行构建命令时, Maven 会比较本地 POM 和远程 POM 的时间戳, 该元素指定比较的频率 \n                    | always（每次构建都检查）\n                    | daily（默认, 距上次构建检查时间超过一天）\n                    | interval: x（距上次构建检查超过 x 分钟）\n                    | never（从不）\n                --></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>updatePolicy</span><span class=\"token punctuation\">></span></span>daily<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>updatePolicy</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 当 Maven 验证构件的校验文件失败时该怎么做: ignore（忽略）, fail（失败）, 或者warn（警告）--></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>checksumPolicy</span><span class=\"token punctuation\">></span></span>warn<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>checksumPolicy</span><span class=\"token punctuation\">></span></span>  \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>releases</span><span class=\"token punctuation\">></span></span> \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>snapshots</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 参照 releases --></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>enabled</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>enabled</span><span class=\"token punctuation\">></span></span>  \n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>updatePolicy</span><span class=\"token punctuation\">></span></span>daily<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>updatePolicy</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>checksumPolicy</span><span class=\"token punctuation\">></span></span>warn<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>checksumPolicy</span><span class=\"token punctuation\">></span></span>  \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>snapshots</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>repository</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>repositories</span><span class=\"token punctuation\">></span></span> \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pluginRepositories</span><span class=\"token punctuation\">></span></span> \n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pluginRepository</span><span class=\"token punctuation\">></span></span> \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>nexus<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span> \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Nexus<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 仓库地址 --></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://100.4.252.5:18080/nexus/content/groups/public<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\" spellcheck=\"true\">&lt;!-- (发布版本的插件) --></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>releases</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>enabled</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>enabled</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>releases</span><span class=\"token punctuation\">></span></span> \n            <span class=\"token comment\" spellcheck=\"true\">&lt;!--(快照版本的插件) --></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>snapshots</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>enabled</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>enabled</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>snapshots</span><span class=\"token punctuation\">></span></span> \n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pluginRepository</span><span class=\"token punctuation\">></span></span> \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pluginRepositories</span><span class=\"token punctuation\">></span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profiles</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- \n     | profile 激活\n        | 通过命令行激活：用户使用 mvn 命令行参数 -P 加上 profile 的id 来激活 profile，多个通过逗号分隔\n        | setting.xml 配置文件显式激活：使用 activeProfiles 属性，表示 setting.xml 中的 profile 在所有项目中激活(下面会讲)\n        | 系统属性激活\n--></span>\n</code></pre>\n<h6 id=\"profile-种类\"><a href=\"#profile-种类\" class=\"headerlink\" title=\"profile 种类\"></a>profile 种类</h6><blockquote>\n<p>pom.xml: pom 文件的 profile 只对当前项目生效</p>\n<p>用户setting.xml: 用户目录下/.m2/setting.xml 文件中的 profile 只对本机该用户所有的 Maven 项目生效</p>\n<p>全局setting.xml: Maven 安装目录下的 setting.xml 文件中的 profile 对本机所有的 Maven 项目生效</p>\n<p>profiles.xml (Maven 2) 还可以在项目根目录下使用一个额外的 profiles.xml 声明，该特性在 Maven 3 中移除，建议将 profiles 添加到 setting.xml 中</p>\n</blockquote>\n<h6 id=\"profile激活\"><a href=\"#profile激活\" class=\"headerlink\" title=\"profile激活\"></a>profile激活</h6><blockquote>\n<p>通过命令行激活：用户使用 mvn 命令行参数 -P 加上 profile 的id 来激活 profile，多个通过逗号分隔</p>\n</blockquote>\n<pre class=\" language-mvn\"><code class=\"language-mvn\">mvn clean -Pdev-x,dev-y\n</code></pre>\n<blockquote>\n<p>setting.xml 配置文件显式激活：使用 activeProfiles 属性，表示 setting.xml 中的 profile 在所有项目中激活</p>\n</blockquote>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeProfiles</span><span class=\"token punctuation\">></span></span> \n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeProfile</span><span class=\"token punctuation\">></span></span>nexus<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeProfile</span><span class=\"token punctuation\">></span></span>  \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeProfiles</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<blockquote>\n<p>系统属性激活：用户可以配置系统属性 test 存在时，自动激活 profile ，如下面第一个示例；用户可以配置系统属性存在，且系统属性值时，自动激活profile，如下面第二个示例</p>\n</blockquote>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- 第一个示例 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profiles</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeprofile</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeprofile</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profiles</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 第二个示例 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profiles</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeprofile</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>x<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeprofile</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profiles</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 一定要记得，也是可以通过命令行声明系统属性激活 --></span>\nmvn clean -Ptest=x\n</code></pre>\n<blockquote>\n<p>操作系统环境激活：profile 可以根据不同操作系统环境自动激活，如果构建在不同操作系统环境且有差异，可以把这些差异写进 profile </p>\n</blockquote>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profiles</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeprofile</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>os</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Window XP<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>family</span><span class=\"token punctuation\">></span></span>Window<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>arch</span><span class=\"token punctuation\">></span></span>X86<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>arch</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>os</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeprofile</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profiles</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<blockquote>\n<p>文件是否存在激活：Maven 能够根据项目中某个文件是否存在来决定是否激活 profile</p>\n</blockquote>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profiles</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeprofile</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>file</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>missing</span><span class=\"token punctuation\">></span></span>y.properties<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exists</span><span class=\"token punctuation\">></span></span>x.properties<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>file</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeprofile</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profiles</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h5 id=\"activeprofile\"><a href=\"#activeprofile\" class=\"headerlink\" title=\"activeprofile\"></a>activeprofile</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- 使用 activeProfiles 属性，表示 setting.xml 中的 profile 在所有项目中激活 --></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeProfiles</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeProfile</span><span class=\"token punctuation\">></span></span>central(id 需要与 profile 中的 id 保持一致)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeProfile</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeProfiles</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n","comments":true,"link":"","tags":[{"name":"Maven","slug":"Maven","permalink":"https://carefulhuo.github.io/tags/Maven/"}]},{"title":"GC 日志分析及优化","date":"2022-04-06T08:31:54.000Z","path":"posts/1abb8830.html","text":"GC 日志分析及优化","content":"<h4 id=\"GC-日志分析及优化\"><a href=\"#GC-日志分析及优化\" class=\"headerlink\" title=\"GC 日志分析及优化\"></a>GC 日志分析及优化</h4>","comments":true,"link":"","tags":[{"name":"JVM","slug":"JVM","permalink":"https://carefulhuo.github.io/tags/JVM/"}]},{"title":"Java 应用配置 GC 日志输出","date":"2022-04-06T07:32:58.000Z","path":"posts/682caf67.html","text":"Java 应用配置 GC日志输出文件GC 日志部分配置项 基本 GC 日志信息 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps GC 后对象年龄分布信息 -XX:+PrintTenuringDistribution GC 后打印GC前后的堆数据 -XX:+PrintHeapAtGC GC会产生暂停，打印 STW 时间(暂停时间) -XX:+PrintGCApplicationStoppedTime 打印 safepoint 信息(进入STW阶段，需要找到一个合适的 safepoint ) -XX:+PrintSafepointStatistics -XX:+PrintSafepointStatisticsCount=1 打印 Reference 信息 (查看强引用/弱引用/软引用/虚引用/finalize方法 是否存在问题) -XX:+PrintReferenceGC GC 日志输出格式GC 日志输出的文件路径（%t 表示取当前时间作为文件名） -Xloggc:自定义路径/gc-%t.log GC 日志文件分割 -XX:+UseGCLogFileRotation GC 日志文件最多分割几个文件，超过从头开始写 -XX:NumberOfGcLogFiles=14 每个文件上限大小，超过就触发分割 -XX:GCLogFileSize=100M","content":"<h4 id=\"Java-应用配置-GC日志输出文件\"><a href=\"#Java-应用配置-GC日志输出文件\" class=\"headerlink\" title=\"Java 应用配置 GC日志输出文件\"></a>Java 应用配置 GC日志输出文件</h4><h5 id=\"GC-日志部分配置项\"><a href=\"#GC-日志部分配置项\" class=\"headerlink\" title=\"GC 日志部分配置项\"></a>GC 日志部分配置项</h5><span id=\"more\"></span>\n\n<p>基本 GC 日志信息</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>PrintGCDetails\n<span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>PrintGCDateStamps\n<span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>PrintGCTimeStamps\n</code></pre>\n<p>GC 后对象年龄分布信息</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>PrintTenuringDistribution\n</code></pre>\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/4a6731f8d33bb2a861ec0dd2727f3a2.png\">\n\n<p>GC 后打印GC前后的堆数据</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>PrintHeapAtGC\n</code></pre>\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/184987aa667d55b686acb3ac312669d.png\">\n\n<p>GC会产生暂停，打印 STW 时间(暂停时间)</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>PrintGCApplicationStoppedTime\n</code></pre>\n<p><img src=\"C:\\Users\\hwy\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220406155025905.png\" alt=\"image-20220406155025905\"></p>\n<p>打印 safepoint 信息(进入STW阶段，需要找到一个合适的 safepoint )</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>PrintSafepointStatistics\n<span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>PrintSafepointStatisticsCount<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n</code></pre>\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/36ed7b2837e7c8b568229589c10a22a.png\">\n\n<p>打印 Reference 信息 (查看强引用/弱引用/软引用/虚引用/finalize方法 是否存在问题)</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>PrintReferenceGC\n</code></pre>\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/b256c20ae534d22eddba310b24ccb59.png\">\n\n<h4 id=\"GC-日志输出格式\"><a href=\"#GC-日志输出格式\" class=\"headerlink\" title=\"GC 日志输出格式\"></a>GC 日志输出格式</h4><p>GC 日志输出的文件路径（%t 表示取当前时间作为文件名）</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>Xloggc<span class=\"token operator\">:</span>自定义路径<span class=\"token operator\">/</span>gc<span class=\"token operator\">-</span><span class=\"token operator\">%</span>t<span class=\"token punctuation\">.</span>log\n</code></pre>\n<p>GC 日志文件分割</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>UseGCLogFileRotation\n</code></pre>\n<p>GC 日志文件最多分割几个文件，超过从头开始写</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span>NumberOfGcLogFiles<span class=\"token operator\">=</span><span class=\"token number\">14</span>\n</code></pre>\n<p>每个文件上限大小，超过就触发分割</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span>GCLogFileSize<span class=\"token operator\">=</span>100M\n</code></pre>\n","comments":true,"link":"","tags":[{"name":"JVM","slug":"JVM","permalink":"https://carefulhuo.github.io/tags/JVM/"}]},{"title":"win10 Jdk 版本切换","date":"2021-10-22T05:27:06.000Z","path":"posts/db12e1ad.html","text":"环境信息系统：Win 10 jdk：7、8、11 安装方式：可执行文件安装(exe 格式) 切换步骤1. jdk 安装后，一般我们会手动添加 JAVA_HOME 系统环境变量，然后将 %JAVA_HOME%\\bin 添加到系统环境变量 Path中，如图所示 2. 检查以下目录是否包含 java.exe、javaw.exe、javaws.exe 三个文件，包含的话，可删除，也可不删除-- 64 位 C:\\Program Files\\Common Files\\Oracle\\Java\\javapath -- 32 位 C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath 注意 如果没有找到，可以去系统环境变量 Path 中，根据 Oracle\\Java\\javapath 这个关键词去找 上述路径，是在安装 jdk 时，Oracle 自动配置的 3. 修改系统环境变量 Path 的值，将 %JAVA_HOME%\\bin 值移动到最上方，或 第二步目录上方即可4. 修改 JAVA_HOME 的值，进行 jdk 版本切换5. 打开 PowerShell / 命令提示符 验证版本是否切换成功注意 修改完 JAVA_HOME 的值之后，如果之前打开过 PowerShell / 命令提示符 窗口，而且没有关闭，需要重新打开 PowerShell / 命令提示符","content":"<h4 id=\"环境信息\"><a href=\"#环境信息\" class=\"headerlink\" title=\"环境信息\"></a>环境信息</h4><p><strong>系统</strong>：Win 10</p>\n<p><strong>jdk</strong>：7、8、11</p>\n<p><strong>安装方式</strong>：可执行文件安装(exe 格式)  </p>\n<span id=\"more\"></span>\n\n<h4 id=\"切换步骤\"><a href=\"#切换步骤\" class=\"headerlink\" title=\"切换步骤\"></a>切换步骤</h4><h5 id=\"1-jdk-安装后，一般我们会手动添加-JAVA-HOME-系统环境变量，然后将-JAVA-HOME-bin-添加到系统环境变量-Path中，如图所示\"><a href=\"#1-jdk-安装后，一般我们会手动添加-JAVA-HOME-系统环境变量，然后将-JAVA-HOME-bin-添加到系统环境变量-Path中，如图所示\" class=\"headerlink\" title=\"1.  jdk 安装后，一般我们会手动添加  JAVA_HOME 系统环境变量，然后将 %JAVA_HOME%\\bin 添加到系统环境变量 Path中，如图所示\"></a>1.  jdk 安装后，一般我们会手动添加  JAVA_HOME 系统环境变量，然后将 %JAVA_HOME%\\bin 添加到系统环境变量 Path中，如图所示</h5><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/0dca60767fa0e3e89547e77842eaef4.png\">\n\n\n\n<h5 id=\"2-检查以下目录是否包含-java-exe、javaw-exe、javaws-exe-三个文件，包含的话，可删除，也可不删除\"><a href=\"#2-检查以下目录是否包含-java-exe、javaw-exe、javaws-exe-三个文件，包含的话，可删除，也可不删除\" class=\"headerlink\" title=\"2. 检查以下目录是否包含 java.exe、javaw.exe、javaws.exe 三个文件，包含的话，可删除，也可不删除\"></a>2. 检查以下目录是否包含 java.exe、javaw.exe、javaws.exe 三个文件，包含的话，可删除，也可不删除</h5><pre class=\" language-path\"><code class=\"language-path\">-- 64 位\nC:\\Program Files\\Common Files\\Oracle\\Java\\javapath\n\n-- 32 位\nC:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath\n</code></pre>\n<p><strong>注意</strong></p>\n<ol>\n<li>如果没有找到，可以去系统环境变量 Path 中，根据 Oracle\\Java\\javapath 这个关键词去找</li>\n<li>上述路径，是在安装 jdk 时，Oracle 自动配置的</li>\n</ol>\n<h5 id=\"3-修改系统环境变量-Path-的值，将-JAVA-HOME-bin-值移动到最上方，或-第二步目录上方即可\"><a href=\"#3-修改系统环境变量-Path-的值，将-JAVA-HOME-bin-值移动到最上方，或-第二步目录上方即可\" class=\"headerlink\" title=\"3. 修改系统环境变量 Path 的值，将  %JAVA_HOME%\\bin 值移动到最上方，或 第二步目录上方即可\"></a>3. 修改系统环境变量 Path 的值，将  %JAVA_HOME%\\bin 值移动到最上方，或 第二步目录上方即可</h5><h5 id=\"4-修改-JAVA-HOME-的值，进行-jdk-版本切换\"><a href=\"#4-修改-JAVA-HOME-的值，进行-jdk-版本切换\" class=\"headerlink\" title=\"4. 修改 JAVA_HOME 的值，进行 jdk 版本切换\"></a>4. 修改 JAVA_HOME 的值，进行 jdk 版本切换</h5><h5 id=\"5-打开-PowerShell-x2F-命令提示符-验证版本是否切换成功\"><a href=\"#5-打开-PowerShell-x2F-命令提示符-验证版本是否切换成功\" class=\"headerlink\" title=\"5. 打开 PowerShell / 命令提示符 验证版本是否切换成功\"></a>5. 打开 PowerShell / 命令提示符 验证版本是否切换成功</h5><p><strong>注意</strong></p>\n<ol>\n<li>修改完 JAVA_HOME  的值之后，如果之前打开过 PowerShell / 命令提示符 窗口，而且没有关闭，需要重新打开 PowerShell / 命令提示符</li>\n</ol>\n","comments":true,"link":"","tags":[{"name":"Tools","slug":"Tools","permalink":"https://carefulhuo.github.io/tags/Tools/"}]},{"title":"IDEA插件FindBugs安装及使用","date":"2021-08-12T11:14:06.000Z","path":"posts/77a9f2e4.html","text":"环境信息 idea版本IntelliJ IDEA 2020.3.2 (Ultimate Edition) Build #IU-203.7148.57, built on January 26, 2021 jdk版本java version \"1.8.0_231\" 安装 通过以下路径查询插件 FindBugsFile-&gt;Settings-&gt;Plugins-&gt;Marketplace 插件安装点击 install 安装，接着重启 idea 注意事项FindBugs 是配合 QAPlug 插件使用的 可查看 https://qaplug.com/about/ 该网址查看关联关系 使用 右键选中项目，按图示顺序选择 弹窗的选项如图所示，点击确定，执行 执行结果示例红框选中的位置，是报错信息及报错信息id，可以通过 QAPlugs-FindBugs查找对应的错误说明，来改正错误。 BUG类型 英文 中文 Bad practice 不好的习惯 Correctness 代码的正确性 Dodgy 小问题 Malicious code vulnerability 恶意代码 Internationalization 国际化问题 Performance 性能问题 Security 安全性问题 Multithreaded currectness 线程问题 Experrimental 实验性问题","content":"<h4 id=\"环境信息\"><a href=\"#环境信息\" class=\"headerlink\" title=\"环境信息\"></a>环境信息</h4><span id=\"more\"></span>\n<ol>\n<li><strong>idea版本</strong><pre><code>IntelliJ IDEA 2020.3.2 (Ultimate Edition)\nBuild #IU-203.7148.57, built on January 26, 2021\n</code></pre>\n</li>\n<li><strong>jdk版本</strong><pre><code>java version \"1.8.0_231\"\n</code></pre>\n</li>\n</ol>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ol>\n<li><strong>通过以下路径查询插件 FindBugs</strong><pre><code>File-&gt;Settings-&gt;Plugins-&gt;Marketplace\n</code></pre>\n</li>\n<li><strong>插件安装</strong><pre><code>点击 install 安装，接着重启 idea\n</code></pre>\n</li>\n<li><strong>注意事项</strong><pre><code>FindBugs 是配合 QAPlug 插件使用的\n可查看 https://qaplug.com/about/ 该网址查看关联关系\n</code></pre>\n</li>\n</ol>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ol>\n<li><strong>右键选中项目，按图示顺序选择</strong><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/923ad995a6d736db9f2b6990b8f7e05.png\" title=\"图1\"></li>\n<li><strong>弹窗的选项如图所示，点击确定，执行</strong><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/d559ae9b77d16b268b0513ba2aa8120.png\" title=\"图2\"></li>\n<li><strong>执行结果示例</strong><br><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/041b287c7fd6013b7d3df4873b0a9de.png\" title=\"图3\"><br><br>红框选中的位置，是报错信息及报错信息id，可以通过 <a href=\"http://findbugs.sourceforge.net/bugDescriptions.html\">QAPlugs-FindBugs</a>查找对应的错误说明，来改正错误。</li>\n<li><strong>BUG类型</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>英文</th>\n<th>中文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Bad practice</td>\n<td>不好的习惯</td>\n</tr>\n<tr>\n<td>Correctness</td>\n<td>代码的正确性</td>\n</tr>\n<tr>\n<td>Dodgy</td>\n<td>小问题</td>\n</tr>\n<tr>\n<td>Malicious code vulnerability</td>\n<td>恶意代码</td>\n</tr>\n<tr>\n<td>Internationalization</td>\n<td>国际化问题</td>\n</tr>\n<tr>\n<td>Performance</td>\n<td>性能问题</td>\n</tr>\n<tr>\n<td>Security</td>\n<td>安全性问题</td>\n</tr>\n<tr>\n<td>Multithreaded currectness</td>\n<td>线程问题</td>\n</tr>\n<tr>\n<td>Experrimental</td>\n<td>实验性问题</td>\n</tr>\n</tbody></table>\n","comments":true,"link":"","tags":[{"name":"Tools","slug":"Tools","permalink":"https://carefulhuo.github.io/tags/Tools/"}]},{"title":"Java8中的HashMap","date":"2021-07-27T11:12:52.000Z","path":"posts/f3f77c2.html","text":"红黑树(red black tree)特点 一个节点是红色或黑色 根节点是黑色 如果一个节点是红色，那么它的子节点必须是黑色 一个节点到一个null引用的每一条路径必须包含相同数目的黑色节点(红色节点不影响) 两种旋转方式和一种颜色变换 单旋转方式 双旋转方式(需要两次反方向的单旋转) 当两个子节点均为红色的时候，执行颜色变换，因为插入的是红色节点，会产生冲突。例如根节点的子节点是红色，两个叶子节点变成黑色，根节点变成红色，再变成黑色。 问题 为什么插入的总是红色节点?因为插入前，树都是构建好的，如果插入的是黑色节点，就破坏了每一条路径必须包含相同数目的黑色节点这一特性 为什么进行旋转？因为插入时总是红色节点，如果不旋转的话，违背了一个节点是红色，那么它的子节点必须是黑色这一特性 为什么进行颜色变换？图示的第一种旋转，红色节点 X 的插入破坏了红黑树结构，所以进行旋转，旋转后的结构如图所示，旋转后，P 和 G 点如果维持本来的颜色，就会违背第三、四条特性，所以，进行颜色变换。 与 AVL(Adelson-Velsky and Landis Tree) 树（平衡二叉查找树）比较?红黑树不是通过递归方式，而是通过循环的方式来实现，不需要保存节点高度字段，节省内存两者最坏操作时间复杂度都是O(logN) HashMap特性 允许 key 、 value 任一值或同时为 null HashMap 的元素时无序，不稳定 HashMap 写操作线程不安全，读操作线程安全 支持已任何形式创建的迭代器 不支持除迭代本身方法(remove())改变集合元素，否则会抛出 ConcurrentModificationException 异常 HashMap与HashTable区别 HashTable 读写操作是线程安全 HashTable 不允许 key 、 value 任一值或同时为 null HashMap内部类内部类简介 Node (static class):基于 hash 的链表节点，由 LinkedHashMap.Entry 、 TreeNode 继承实现 TreeNode (static final class) Values (final Class)：HashMap中的 value 集合 KeySet (final Class)：HashMap中的 key 集合 EntrySet (final Class)：HashMap中的 Entry 集合 HashIterator (abstract class)：抽象迭代器 KeyIterator (final Class): HashMap中的 Key 集合的迭代器 ValueIterator (final class)：HashMap中的 Value 集合的迭代器 EntryIterator (final class)：HashMap中的 Entry 集合的迭代器 HashMapSpliterator (static class):抽象的并行迭代器 KeySpliterator (static final class):HashMap中的 Key 集合的并行迭代器 ValueSpliterator (static final class):HashMap中的 Value 集合的并行迭代器 EntrySpliterator (static final class)：HashMap中的 Entry 集合的并行迭代器 Node 内部类static class Node&lt;K,V> implements Map.Entry&lt;K,V> { final int hash; final K key; V value; Node&lt;K,V> next; Node(int hash, K key, V value, Node&lt;K,V> next) { this.hash = hash; this.key = key; this.value = value; this.next = next; } public final K getKey() { return key; } public final V getValue() { return value; } public final String toString() { return key + \"=\" + value; } public final int hashCode() { return Objects.hashCode(key) ^ Objects.hashCode(value); } public final V setValue(V newValue) { V oldValue = value; value = newValue; return oldValue; } public final boolean equals(Object o) { if (o == this) return true; return o instanceof Map.Entry&lt;?, ?> e &amp;&amp; Objects.equals(key, e.getKey()) &amp;&amp; Objects.equals(value, e.getValue()); } } TreeNode 内部类static final class TreeNode&lt;K, V> extends LinkedHashMap.Entry&lt;K, V> { TreeNode&lt;K, V> parent; // red-black tree links TreeNode&lt;K, V> left; TreeNode&lt;K, V> right; TreeNode&lt;K, V> prev; // needed to unlink next upon deletion boolean red; TreeNode(int hash, K key, V val, Node&lt;K, V> next) { super(hash, key, val, next); } final void treeify(Node&lt;K,V>[] tab) { // ...... } static &lt;K,V> TreeNode&lt;K,V> balanceInsertion(TreeNode&lt;K,V> root, TreeNode&lt;K,V> x) { // ...... } static &lt;K,V> TreeNode&lt;K,V> rotateLeft(TreeNode&lt;K,V> root, TreeNode&lt;K,V> p) { // ...... } static &lt;K,V> TreeNode&lt;K,V> rotateRight(TreeNode&lt;K,V> root, TreeNode&lt;K,V> p) { // ...... } // ......其余方法省略 } HashMap中内部变量 /** * 默认桶的数量 为 16 必须是 2 的幂次方 */ static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16 /** * 桶的最大数量为 2 的 30 幂次方 */ static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30; /** * 桶的负载因子，当存有数据的桶的数量超过 75% ，就会扩容为 2 倍桶数量，并自动进行再散列(rehashed) * 可以查看构造函数 */ static final float DEFAULT_LOAD_FACTOR = 0.75f; /** * 桶内数据量超过这个阈值就会将桶内数据结构从链表转为红黑树 */ static final int TREEIFY_THRESHOLD = 8; /** * 桶内数据量小于这个阈值就会将桶内数据结构从红黑树退化为链表 */ static final int UNTREEIFY_THRESHOLD = 6; /** * 如果桶的数量小于 64 ，会先扩容，直至桶的数量超过 64 * 这样是为了减少形成很满的桶，因为桶的数量越多，越不容易造成桶满 * 借鉴了 &lt;see>https://stackoverflow.com/questions/43911369/hashmap-java-8-implementation&lt;/see> */ static final int MIN_TREEIFY_CAPACITY = 64; HashMap插入put()方法使用内部 putval()方法 putval()方法 putval方法参数说明```java @param hash hash for key (key 的 Hash 值) @param key the key @param value the value to put @param onlyIfAbsent if true, don’t change existing value (如果键存在，是否需要更新 value值，true 更新 false 不更新) @param evict if false, the table is in creation mode.(如果为false，表示该表处于创建模式，jdk1.8版本里面使用该参数的方法是空实现，故暂没有作用) @return previous value, or null if none(返回之前的值，如果没有直接返回 null)``` 代码逻辑执行过程 表是否为null或表长度是否为零，决定了是否先进行初始化。 1.1 初始化表，调用方法resize() 1.2 Hash计算后，如果对应桶内为null，往桶内添加数据，此时桶内使用数据结构为链表 1.3 Hash计算后，如果对应桶内不为null，判断key的 Hash 值以及 key 值是否相等， 1.3.1 相等，直接覆盖 1.3.2 不相等，判断节点结构是否为红黑树结构(TreeNode)实例，是则直接使用 putTreeVal() 方法 1.3.3 判断节点结构是否为红黑树节点结构(TreeNode)实例，不是则直接将数据插入链表末端，并判断链表长度是否大于等于 8 ，是则开始进行将链表进化为红黑树的操作(treeifyBin) treeifyBin() 2.1 如果表为null或者表长度小于 64 ，则进行表长度扩容 2.2 如果表长度大于 64 且表最后一个桶内数据不为null，则将桶内链表的节点结构转换为TreeNode，并连成一个链表 2.3 进化红黑树(treeify) 转换红黑树代码解析 treeify() final void treeify(Node&lt;K,V>[] tab) { TreeNode&lt;K,V> root = null; for (TreeNode&lt;K,V> x = this, next; x != null; x = next) { next = (TreeNode&lt;K,V>)x.next; x.left = x.right = null; if (root == null) { // 配置红黑树根节点 x.parent = null; x.red = false; root = x; } else { // 存在根节点后，根据外层的for循环，知晓当前节点 x 的信息 // 开始从上往下进行红黑树节点添加，以下的 for 循环是核心循环，进行节点添加 K k = x.key; int h = x.hash; Class&lt;?> kc = null; // for 循环是为了寻找一个空的节点位置，将元素放入 for (TreeNode&lt;K,V> p = root;;) { // for 循环中没有控制条件，需循环内部跳出 int dir, ph; K pk = p.key; if ((ph = p.hash) > h) // 节点的 Hash 值 大于 当前元素 Hash 值，放左节点 dir = -1; else if (ph &lt; h) // 节点的 Hash 值 小于 当前元素 Hash 值，放右节点 dir = 1; else if ((kc == null &amp;&amp; (kc = comparableClassFor(k)) == null) || (dir = compareComparables(kc, k, pk)) == 0) // 先尝试通过Comparable比较两个对象(当前pk的key对象和x的key对象) // 1. 先通过 comparableClassFor 方法判断两者是否可以进行 Comparable // 2. 如果可以，通过 compareComparables 方法进行比较 // 判断条件中的方法没有分出胜负则使用此方法分出胜负 dir = tieBreakOrder(k, pk); TreeNode&lt;K,V> xp = p; if ((p = (dir &lt;= 0) ? p.left : p.right) == null) { x.parent = xp; if (dir &lt;= 0) xp.left = x; else xp.right = x; // 维护红黑树添加节点后的结构 root = balanceInsertion(root, x); break; } } } } //Ensures that the given root is the first node of its bin // 确保根节点在链表的第一个 moveRootToFront(tab, root); } 需要被插入的元素的key对象是否实现了 Comparable 接口 static Class&lt;?> comparableClassFor(Object x) { // 当前元素key 是否实现了 Comparable 接口 if (x instanceof Comparable) { Class&lt;?> c; Type[] ts, as; ParameterizedType p; if ((c = x.getClass()) == String.class) // bypass checks // 如果 x 是字符串对象，直接返回，因为 String 实现了Comparable接口 return c; if ((ts = c.getGenericInterfaces()) != null) { // 获取 x 实现了哪些接口，包含泛型接口(泛型信息) for (Type t : ts) { if ((t instanceof ParameterizedType) &amp;&amp; ((p = (ParameterizedType) t).getRawType() == Comparable.class) &amp;&amp; (as = p.getActualTypeArguments()) != null &amp;&amp; as.length == 1 &amp;&amp; as[0] == c) // type arg is c // 如果当前接口t是个泛型接口 // 如果该泛型接口t的原始类型p 是 Comparable 接口 // 如果该Comparable接口p只定义了一个泛型参数 // 如果这一个泛型参数的类型就是c，那么返回c return c; } } } return null; } 通过 Comparable 比较大小，确定节点位置 static int compareComparables(Class&lt;?> kc, Object k, Object x) { // 如果 x == null 或者 x 的实现类不是 comparableClassFor 获取的类，直接返回 0 // 如果 x != null 或者 x 的实现类是 comparableClassFor 获取的类 // 通过 Comparable 比较大小，返回比较结果 return (x == null || x.getClass() != kc ? 0 : ((Comparable)k).compareTo(x)); } 插入节点后，平衡红黑树结构 static &lt;K,V> TreeNode&lt;K,V> balanceInsertion(TreeNode&lt;K,V> root, TreeNode&lt;K,V> x) { // 印证了之前说的新加入节点都是红色的 x.red = true; // xp x 的父节点 // xpp x 的祖父节点 // xppl x 的祖父的左节点 // xppr x 的祖父的右节点 for (TreeNode&lt;K,V> xp, xpp, xppl, xppr;;) { if ((xp = x.parent) == null) { // 如果 x 的父节点是 null 说明 x 节点为 根节点 // 红黑树特性 根节点必须黑色 x.red = false; return x; } else if (!xp.red || (xpp = xp.parent) == null) // 进入 else 说明 x 不是根节点， // x 的父节点为黑色，可以在下面直接添加红色节点，直接返回根， // x 的祖父节点为空，表示 x 的父节点是根节点，且调用该方法前，节点已经添加完成，所以直接返回根节点 return root; // 进入下面的执行逻辑表示 // 1. x 的父节点xp是红色的， // 2. x 的祖父节点xpp不为空 // 这样就遇到两个红色节点相连的问题，所以必须经过颜色变换和双旋转 if (xp == (xppl = xpp.left)) { // x 的父节点是 x 祖父节点的左节点 if ((xppr = xpp.right) != null &amp;&amp; xppr.red) { // x 的祖父节点的右节点不是 null 且右节点是红色，则证明祖父节点的左节点也是红色 // 因为红色节点下面不能再挂红色节点，所以需要将祖父节点的左右节点全部变成黑色，祖父节点变成红色(就是前面说的颜色变换) xppr.red = false; xp.red = false; xpp.red = true; // 为什么让 x = xpp ？因为 xpp 变成红色节点后可能与 xpp 的父节点发生冲突(两个红色节点相连)， // 就此形成了图示的第二种旋转，所以需要从下往上旋转 x = xpp; } else { // x 的祖父节点的右节点是 null 且右节点是黑色 // 那么此时的结构位置就有两种情况 // 1. xpp->xp(xxp的左节点)->x(xp的右节点) if (x == xp.right) { // 向左旋（图示的单旋转方式）注意进行左旋的节点是 x 的父节点 root = rotateLeft(root, x = xp); // 将xp 的父节点执向 x 的祖父节点 xpp = (xp = x.parent) == null ? null : xp.parent; } // 2. xpp->xp(xxp的左节点)->x(xp的左节点) 或者上面旋转后，也会形成这种结构 if (xp != null) { // x 的父节点变为黑色 xp.red = false; if (xpp != null) { // x 的祖父节点变为红色 xpp.red = true; // 向右旋 （图示的单旋转方式） root = rotateRight(root, xpp); } } } } else { // x 的父节点是祖父节点的右节点 if (xppl != null &amp;&amp; xppl.red) { // x 的祖父节点的左节点不是 null 且是红色节点 // 那么 x 的父节点 肯定也是红色节点，这样就符合图示的第三种旋转 // x 的祖父节点的左节点变成黑色节点，x 的父节点也变成黑色节点 ，x 的祖父节点变成红色节点 xppl.red = false; xp.red = false; xpp.red = true; // 为什么 x = xpp ? 因为 x 的祖父节点变成红色节点后，可能产生两个红色节点相连的冲突，即图示的第二种旋转 // 所以将x = xpp ，进行从下而上的旋转 x = xpp; } else { // x 的祖父节点的左节点是 null 且是黑色节点，那么 x 的父节点肯定是黑色 // 此时结构肯定有两种 // 1. xpp右->xp左->x if (x == xp.left) { // 向右旋 root = rotateRight(root, x = xp); xpp = (xp = x.parent) == null ? null : xp.parent; } // 2. xpp右->xp右->x 或上述旋转后形成的该结构 if (xp != null) { xp.red = false; if (xpp != null) { xpp.red = true; // 向左旋 root = rotateLeft(root, xpp); } } } } } } rotateLeft static &lt;K,V> TreeNode&lt;K,V> rotateLeft(TreeNode&lt;K,V> root, TreeNode&lt;K,V> p) { // root 表示根节点 // p 表示 x 的父节点 xp // pp 表示 父节点的父节点 祖父节点 // rl 表示 右节点的左节点 // r 表示 右节点 // 左旋就是将某个节点旋转为其右节点的左节点 TreeNode&lt;K,V> r, pp, rl; if (p != null &amp;&amp; (r = p.right) != null) { // 如果符合的话，p 的右节点指向 rl 否则指向 null if ((rl = p.right = r.left) != null) rl.parent = p; // 如果pp 为空，实际剩下三个节点 if ((pp = r.parent = p.parent) == null) (root = r).red = false; // 如果pp 不为为空 else if (pp.left == p) pp.left = r; else pp.right = r; r.left = p; p.parent = r; } return root; } 图示左旋过程 // 执行完该代码，形成图示结构 if (p != null &amp;&amp; (r = p.right) != null) { if ((rl = p.right = r.left) != null) rl.parent = p; ```java // (图示 PP != null) 执行完该代码，形成图示结构 if ((pp = r.parent = p.parent) == null) (root = r).red = false; ``` ```java // (图示 PP != null) 执行完该代码，形成图示结构(图示 pp.left == p 成立) else if (pp.left == p) pp.left = r; else pp.right = r; r.left = p; p.parent = r; ``` ```java // (图示 PP == null) 执行完该代码，形成图示结构 if ((pp = r.parent = p.parent) == null) (root = r).red = false; ``` ```java // (图示 PP == null) 执行完该代码，形成图示结构 r.left = p; p.parent = r; ``` rotateRight static &lt;K,V> TreeNode&lt;K,V> rotateRight(TreeNode&lt;K,V> root, TreeNode&lt;K,V> p) { // l 左节点 // pp 祖父节点 // lr 左节点的右节点 // 右旋就是将某个节点旋转为其左节点(孩子)的右节点(孩子) TreeNode&lt;K,V> l, pp, lr; if (p != null &amp;&amp; (l = p.left) != null) { if ((lr = p.left = l.right) != null) lr.parent = p; if ((pp = l.parent = p.parent) == null) (root = l).red = false; else if (pp.right == p) pp.right = l; else pp.left = l; l.right = p; p.parent = l; } return root; } // 执行完图示代码，形成右旋开始前的红黑树结构 // x 的父节点变为黑色 xp.red = false; if (xpp != null) { // x 的祖父节点变为红色 xpp.red = true; // 向右旋 （图示的单旋转方式） } 图示右旋过程 // 执行完图示代码，形成图示结构 if (p != null &amp;&amp; (l = p.left) != null) { if ((lr = p.left = l.right) != null) lr.parent = p; ```java // ( 图示 pp != null )执行完图示代码，形成图示结构 if ((pp = l.parent = p.parent) == null) (root = l).red = false; ``` ```java // ( 图示 pp != null )执行完图示代码，形成图示结构 else pp.left = l; l.right = p; p.parent = l; ``` ```java // ( 图示 pp == null )执行完图示代码，形成图示结构 if ((pp = l.parent = p.parent) == null) (root = l).red = false; ``` ```java // ( 图示 pp == null )执行完图示代码，形成图示结构 l.right = p; p.parent = l; ``` 左旋和右旋结合起来的旋转过程 问题： 为什么右旋前，需要将 x 节点变成黑色？因为这样就可以不考虑 xppp 节点的颜色，即使 xppp 节点颜色是红色，可以进行再次平衡旋转 以上都是拿 x 的父节点是祖父节点的左节点的情况，x 的父节点是祖父节点的右节点的情况，与之相反。","content":"<h4 id=\"红黑树-red-black-tree\"><a href=\"#红黑树-red-black-tree\" class=\"headerlink\" title=\"红黑树(red black tree)\"></a>红黑树(red black tree)</h4><h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li>一个节点是红色或黑色</li>\n<li>根节点是黑色</li>\n<li>如果一个节点是红色，那么它的子节点必须是黑色</li>\n<li>一个节点到一个null引用的每一条路径必须包含相同数目的黑色节点(红色节点不影响)</li>\n</ul>\n<h5 id=\"两种旋转方式和一种颜色变换\"><a href=\"#两种旋转方式和一种颜色变换\" class=\"headerlink\" title=\"两种旋转方式和一种颜色变换\"></a>两种旋转方式和一种颜色变换</h5><img src=\"https://images2017.cnblogs.com/blog/1309421/201801/1309421-20180108210123191-875930636.png\">\n<img src=\"https://images2017.cnblogs.com/blog/1309421/201801/1309421-20180108212815160-82602581.png\">\n\n<ul>\n<li>单旋转方式</li>\n<li>双旋转方式(需要两次反方向的单旋转)</li>\n<li>当两个子节点均为红色的时候，执行颜色变换，因为插入的是红色节点，会产生冲突。<font color=\"red\">例如根节点的子节点是红色，两个叶子节点变成黑色，根节点变成红色，再变成黑色。</font></li>\n</ul>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ol>\n<li>为什么插入的总是红色节点?<br><br>因为插入前，树都是构建好的，如果插入的是黑色节点，就破坏了每一条路径必须包含相同数目的黑色节点这一特性</li>\n<li>为什么进行旋转？<br><br>因为插入时总是红色节点，如果不旋转的话，违背了一个节点是红色，那么它的子节点必须是黑色这一特性</li>\n<li>为什么进行颜色变换？<br><br>图示的第一种旋转，红色节点 X 的插入破坏了红黑树结构，所以进行旋转，旋转后的结构如图所示，旋转后，P 和 G 点如果维持本来的颜色，就会违背第三、四条特性，所以，进行颜色变换。</li>\n<li>与 AVL(Adelson-Velsky and Landis Tree) 树（平衡二叉查找树）比较?<br><br>红黑树不是通过递归方式，而是通过循环的方式来实现，不需要保存节点高度字段，节省内存<br>两者最坏操作时间复杂度都是O(logN)</li>\n</ol>\n<h4 id=\"HashMap特性\"><a href=\"#HashMap特性\" class=\"headerlink\" title=\"HashMap特性\"></a>HashMap特性</h4><ol>\n<li>允许 key 、 value 任一值或同时为 null</li>\n<li>HashMap 的元素时无序，不稳定</li>\n<li>HashMap 写操作线程不安全，读操作线程安全</li>\n<li>支持已任何形式创建的迭代器</li>\n<li>不支持除迭代本身方法(remove())改变集合元素，否则会抛出 ConcurrentModificationException 异常</li>\n</ol>\n<h4 id=\"HashMap与HashTable区别\"><a href=\"#HashMap与HashTable区别\" class=\"headerlink\" title=\"HashMap与HashTable区别\"></a>HashMap与HashTable区别</h4><ol>\n<li>HashTable 读写操作是线程安全</li>\n<li>HashTable 不允许 key 、 value 任一值或同时为 null</li>\n</ol>\n<h4 id=\"HashMap内部类\"><a href=\"#HashMap内部类\" class=\"headerlink\" title=\"HashMap内部类\"></a>HashMap内部类</h4><h5 id=\"内部类简介\"><a href=\"#内部类简介\" class=\"headerlink\" title=\"内部类简介\"></a>内部类简介</h5><ol>\n<li>Node (static class):基于 hash 的链表节点，由 LinkedHashMap.Entry 、 TreeNode 继承实现<ul>\n<li>TreeNode (static final class)</li>\n</ul>\n</li>\n<li>Values (final Class)：HashMap中的 value 集合</li>\n<li>KeySet (final Class)：HashMap中的 key 集合</li>\n<li>EntrySet (final Class)：HashMap中的 Entry 集合</li>\n<li>HashIterator (abstract class)：抽象迭代器<ul>\n<li>KeyIterator (final Class): HashMap中的 Key 集合的迭代器</li>\n<li>ValueIterator (final class)：HashMap中的 Value 集合的迭代器</li>\n<li>EntryIterator (final class)：HashMap中的 Entry 集合的迭代器</li>\n</ul>\n</li>\n<li>HashMapSpliterator (static class):抽象的并行迭代器<ul>\n<li>KeySpliterator (static final class):HashMap中的 Key 集合的并行迭代器</li>\n<li>ValueSpliterator (static final class):HashMap中的 Value 集合的并行迭代器</li>\n<li>EntrySpliterator (static final class)：HashMap中的 Entry 集合的并行迭代器</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"Node-内部类\"><a href=\"#Node-内部类\" class=\"headerlink\" title=\"Node 内部类\"></a>Node 内部类</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> K key<span class=\"token punctuation\">;</span>\n        V value<span class=\"token punctuation\">;</span>\n        Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> next<span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> K key<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> K <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> V <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> key <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> V <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>V newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            V oldValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            value <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token operator\">></span> e\n                    <span class=\"token operator\">&amp;&amp;</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;&amp;</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"TreeNode-内部类\"><a href=\"#TreeNode-内部类\" class=\"headerlink\" title=\"TreeNode 内部类\"></a>TreeNode 内部类</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LinkedHashMap<span class=\"token punctuation\">.</span>Entry</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>\n        TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> parent<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// red-black tree links</span>\n        TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> left<span class=\"token punctuation\">;</span>\n        TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> right<span class=\"token punctuation\">;</span>\n        TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> prev<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// needed to unlink next upon deletion</span>\n        <span class=\"token keyword\">boolean</span> red<span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> K key<span class=\"token punctuation\">,</span> V val<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> next<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">treeify</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// ......</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token function\">balanceInsertion</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> root<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// ......</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> root<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// ......</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> root<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// ......</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\" spellcheck=\"true\">// ......其余方法省略</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"HashMap中内部变量\"><a href=\"#HashMap中内部变量\" class=\"headerlink\" title=\"HashMap中内部变量\"></a>HashMap中内部变量</h5><pre class=\" language-java\"><code class=\"language-java\">   <span class=\"token comment\" spellcheck=\"true\">/**\n     * 默认桶的数量 为 16 必须是 2 的幂次方\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// aka 16</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 桶的最大数量为 2 的 30 幂次方\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAXIMUM_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 桶的负载因子，当存有数据的桶的数量超过 75% ，就会扩容为 2 倍桶数量，并自动进行再散列(rehashed)\n     * 可以查看构造函数\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> DEFAULT_LOAD_FACTOR <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 桶内数据量超过这个阈值就会将桶内数据结构从链表转为红黑树\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TREEIFY_THRESHOLD <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 桶内数据量小于这个阈值就会将桶内数据结构从红黑树退化为链表\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> UNTREEIFY_THRESHOLD <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 如果桶的数量小于 64 ，会先扩容，直至桶的数量超过 64 \n     * 这样是为了减少形成很满的桶，因为桶的数量越多，越不容易造成桶满\n     * 借鉴了 &lt;see>https://stackoverflow.com/questions/43911369/hashmap-java-8-implementation&lt;/see>\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MIN_TREEIFY_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"HashMap插入\"><a href=\"#HashMap插入\" class=\"headerlink\" title=\"HashMap插入\"></a>HashMap插入</h4><h5 id=\"put-方法\"><a href=\"#put-方法\" class=\"headerlink\" title=\"put()方法\"></a>put()方法</h5><p>使用内部 putval()方法</p>\n<h5 id=\"putval-方法\"><a href=\"#putval-方法\" class=\"headerlink\" title=\"putval()方法\"></a>putval()方法</h5><ul>\n<li>putval方法参数说明<br>```java</li>\n</ul>\n<ul>\n<li>@param hash hash for key (key 的 Hash 值)</li>\n<li>@param key the key  </li>\n<li>@param value the value to put</li>\n<li>@param onlyIfAbsent if true, don’t change existing value (如果键存在，是否需要更新 value值，true 更新 false 不更新)</li>\n<li>@param evict if false, the table is in creation mode.(如果为false，表示该表处于创建模式，jdk1.8版本里面使用该参数的方法是空实现，故暂没有作用)</li>\n<li>@return previous value, or null if none(返回之前的值，如果没有直接返回 null)<br>```</li>\n</ul>\n<ul>\n<li>代码逻辑执行过程<br></li>\n</ul>\n<ol>\n<li><p>表是否为null或表长度是否为零，决定了是否先进行初始化。<br></p>\n<ul>\n<li>1.1 初始化表，调用方法resize()</li>\n<li>1.2 Hash计算后，如果对应桶内为null，往桶内添加数据，此时桶内使用数据结构为链表</li>\n<li>1.3 Hash计算后，如果对应桶内不为null，判断key的 Hash 值以及 key 值是否相等，<ul>\n<li>1.3.1 相等，直接覆盖</li>\n<li>1.3.2 不相等，判断节点结构是否为红黑树结构(TreeNode)实例，是则直接使用 putTreeVal() 方法</li>\n<li>1.3.3 判断节点结构是否为红黑树节点结构(TreeNode)实例，不是则直接将数据插入链表末端，并判断链表长度是否大于等于 8 ，是则开始进行将链表进化为红黑树的操作(treeifyBin)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>treeifyBin()</p>\n<ul>\n<li>2.1 如果表为null或者表长度小于 64 ，则进行表长度扩容</li>\n<li>2.2 如果表长度大于 64 且表最后一个桶内数据不为null，则将桶内链表的节点结构转换为TreeNode，并连成一个链表</li>\n<li>2.3 进化红黑树(treeify)</li>\n</ul>\n</li>\n<li><p>转换红黑树代码解析</p>\n</li>\n</ol>\n<ul>\n<li><p>treeify()</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">treeify</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> root <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">;</span> x <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">;</span> x <span class=\"token operator\">=</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>x<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n              x<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 配置红黑树根节点</span>\n                  x<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                  x<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                  root <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n              <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 存在根节点后，根据外层的for循环，知晓当前节点 x 的信息</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 开始从上往下进行红黑树节点添加，以下的 for 循环是核心循环，进行节点添加</span>\n                  K k <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span>\n                  Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> kc <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                  <span class=\"token comment\" spellcheck=\"true\">// for 循环是为了寻找一个空的节点位置，将元素放入</span>\n                  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// for 循环中没有控制条件，需循环内部跳出</span>\n                      <span class=\"token keyword\">int</span> dir<span class=\"token punctuation\">,</span> ph<span class=\"token punctuation\">;</span>\n                      K pk <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n                      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ph <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> h<span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 节点的 Hash 值 大于 当前元素 Hash 值，放左节点</span>\n                          dir <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph <span class=\"token operator\">&lt;</span> h<span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 节点的 Hash 值 小于 当前元素 Hash 值，放右节点</span>\n                          dir <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>kc <span class=\"token operator\">==</span> null <span class=\"token operator\">&amp;&amp;</span>\n                                <span class=\"token punctuation\">(</span>kc <span class=\"token operator\">=</span> <span class=\"token function\">comparableClassFor</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                               <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">=</span> <span class=\"token function\">compareComparables</span><span class=\"token punctuation\">(</span>kc<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 先尝试通过Comparable比较两个对象(当前pk的key对象和x的key对象)</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 1. 先通过 comparableClassFor 方法判断两者是否可以进行 Comparable</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 2. 如果可以，通过 compareComparables 方法进行比较</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 判断条件中的方法没有分出胜负则使用此方法分出胜负</span>\n                          dir <span class=\"token operator\">=</span> <span class=\"token function\">tieBreakOrder</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> xp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">:</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                          x<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> xp<span class=\"token punctuation\">;</span>\n                          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                              xp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                          <span class=\"token keyword\">else</span>\n                              xp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                          <span class=\"token comment\" spellcheck=\"true\">// 维护红黑树添加节点后的结构</span>\n                          root <span class=\"token operator\">=</span> <span class=\"token function\">balanceInsertion</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//Ensures that the given root is the first node of its bin</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 确保根节点在链表的第一个</span>\n          <span class=\"token function\">moveRootToFront</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li><p>需要被插入的元素的key对象是否实现了 Comparable 接口</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">comparableClassFor</span><span class=\"token punctuation\">(</span>Object x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 当前元素key 是否实现了 Comparable 接口</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> c<span class=\"token punctuation\">;</span> Type<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ts<span class=\"token punctuation\">,</span> as<span class=\"token punctuation\">;</span> ParameterizedType p<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// bypass checks</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 如果 x 是字符串对象，直接返回，因为 String 实现了Comparable接口</span>\n              <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ts <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getGenericInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 获取 x 实现了哪些接口，包含泛型接口(泛型信息)</span>\n              <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Type t <span class=\"token operator\">:</span> ts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ParameterizedType<span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRawType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span>\n                       Comparable<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                      <span class=\"token punctuation\">(</span>as <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getActualTypeArguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span>\n                      as<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> as<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// type arg is c</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 如果当前接口t是个泛型接口</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 如果该泛型接口t的原始类型p 是 Comparable 接口</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 如果该Comparable接口p只定义了一个泛型参数</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 如果这一个泛型参数的类型就是c，那么返回c</span>\n                      <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li><p>通过 Comparable 比较大小，确定节点位置</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareComparables</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> kc<span class=\"token punctuation\">,</span> Object k<span class=\"token punctuation\">,</span> Object x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 如果 x == null 或者 x 的实现类不是 comparableClassFor 获取的类，直接返回 0</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 如果 x != null 或者 x 的实现类是 comparableClassFor 获取的类</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 通过 Comparable 比较大小，返回比较结果</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> kc <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Comparable<span class=\"token punctuation\">)</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li><p>插入节点后，平衡红黑树结构</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token function\">balanceInsertion</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> root<span class=\"token punctuation\">,</span>\n                                                  TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 印证了之前说的新加入节点都是红色的</span>\n        x<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// xp x 的父节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// xpp x 的祖父节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// xppl x 的祖父的左节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// xppr x 的祖父的右节点</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> xp<span class=\"token punctuation\">,</span> xpp<span class=\"token punctuation\">,</span> xppl<span class=\"token punctuation\">,</span> xppr<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>xp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 如果 x 的父节点是 null 说明 x 节点为 根节点</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 红黑树特性 根节点必须黑色</span>\n                  x<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n              <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>xpp <span class=\"token operator\">=</span> xp<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 进入 else 说明 x 不是根节点，</span>\n                <span class=\"token comment\" spellcheck=\"true\">// x 的父节点为黑色，可以在下面直接添加红色节点，直接返回根，</span>\n                <span class=\"token comment\" spellcheck=\"true\">// x 的祖父节点为空，表示 x 的父节点是根节点，且调用该方法前，节点已经添加完成，所以直接返回根节点</span>\n                <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 进入下面的执行逻辑表示</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 1. x 的父节点xp是红色的，</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 2. x 的祖父节点xpp不为空</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 这样就遇到两个红色节点相连的问题，所以必须经过颜色变换和双旋转</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xp <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>xppl <span class=\"token operator\">=</span> xpp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// x 的父节点是 x 祖父节点的左节点</span>\n                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>xppr <span class=\"token operator\">=</span> xpp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> xppr<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// x 的祖父节点的右节点不是 null 且右节点是红色，则证明祖父节点的左节点也是红色</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 因为红色节点下面不能再挂红色节点，所以需要将祖父节点的左右节点全部变成黑色，祖父节点变成红色(就是前面说的颜色变换)</span>\n                      xppr<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                      xp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                      xpp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 为什么让 x = xpp ？因为 xpp 变成红色节点后可能与 xpp 的父节点发生冲突(两个红色节点相连)，</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 就此形成了图示的第二种旋转，所以需要从下往上旋转</span>\n                      x <span class=\"token operator\">=</span> xpp<span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">}</span>\n                  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// x 的祖父节点的右节点是 null 且右节点是黑色</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 那么此时的结构位置就有两种情况</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 1. xpp->xp(xxp的左节点)->x(xp的右节点)</span>\n                      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> xp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 向左旋（图示的单旋转方式）注意进行左旋的节点是 x 的父节点 </span>\n                          root <span class=\"token operator\">=</span> <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> xp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 将xp 的父节点执向 x 的祖父节点</span>\n                          xpp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null <span class=\"token operator\">?</span> null <span class=\"token operator\">:</span> xp<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                      <span class=\"token punctuation\">}</span>\n                      <span class=\"token comment\" spellcheck=\"true\">// 2. xpp->xp(xxp的左节点)->x(xp的左节点) 或者上面旋转后，也会形成这种结构</span>\n                      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xp <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// x 的父节点变为黑色</span>\n                          xp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xpp <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\" spellcheck=\"true\">// x 的祖父节点变为红色</span>\n                              xpp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                              <span class=\"token comment\" spellcheck=\"true\">// 向右旋 （图示的单旋转方式）</span>\n                              root <span class=\"token operator\">=</span> <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> xpp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token punctuation\">}</span>\n                      <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n              <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// x 的父节点是祖父节点的右节点</span>\n                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xppl <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> xppl<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// x 的祖父节点的左节点不是 null 且是红色节点</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 那么 x 的父节点 肯定也是红色节点，这样就符合图示的第三种旋转</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// x 的祖父节点的左节点变成黑色节点，x 的父节点也变成黑色节点 ，x 的祖父节点变成红色节点</span>\n                      xppl<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                      xp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                      xpp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token comment\" spellcheck=\"true\">// 为什么 x = xpp ? 因为 x 的祖父节点变成红色节点后，可能产生两个红色节点相连的冲突，即图示的第二种旋转</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 所以将x = xpp ，进行从下而上的旋转</span>\n                      x <span class=\"token operator\">=</span> xpp<span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">}</span>\n                  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// x 的祖父节点的左节点是 null 且是黑色节点，那么 x 的父节点肯定是黑色</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 此时结构肯定有两种</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 1. xpp右->xp左->x</span>\n                      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> xp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 向右旋</span>\n                          root <span class=\"token operator\">=</span> <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> xp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          xpp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null <span class=\"token operator\">?</span> null <span class=\"token operator\">:</span> xp<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                      <span class=\"token punctuation\">}</span>\n                      <span class=\"token comment\" spellcheck=\"true\">// 2. xpp右->xp右->x 或上述旋转后形成的该结构</span>\n                      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xp <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                          xp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xpp <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                              xpp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                              <span class=\"token comment\" spellcheck=\"true\">// 向左旋</span>\n                              root <span class=\"token operator\">=</span> <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> xpp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token punctuation\">}</span>\n                      <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li><p>rotateLeft</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> root<span class=\"token punctuation\">,</span>\n                                            TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// root 表示根节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// p 表示 x 的父节点 xp</span>\n        <span class=\"token comment\" spellcheck=\"true\">// pp 表示 父节点的父节点 祖父节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// rl 表示 右节点的左节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// r 表示 右节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 左旋就是将某个节点旋转为其右节点的左节点</span>\n        TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> r<span class=\"token punctuation\">,</span> pp<span class=\"token punctuation\">,</span> rl<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 如果符合的话，p 的右节点指向 rl 否则指向 null</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rl <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n                  rl<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 如果pp 为空，实际剩下三个节点</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pp <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">(</span>root <span class=\"token operator\">=</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 如果pp 不为为空</span>\n              <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span>\n                  pp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">else</span>\n                  pp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n              r<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n              p<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li><p>图示左旋过程</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 执行完该代码，形成图示结构</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rl <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n     rl<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n</code></pre>\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/1795385f1eaee7b53f384ff71f9e375.png\">\n```java\n// (图示 PP != null) 执行完该代码，形成图示结构\nif ((pp = r.parent = p.parent) == null)\n    (root = r).red = false;\n```\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/43835462937d40005db8b2eefd7d55e.png\">\n```java\n// (图示 PP != null) 执行完该代码，形成图示结构(图示 pp.left == p 成立)\nelse if (pp.left == p)\n  pp.left = r;\nelse\n  pp.right = r;\nr.left = p;\np.parent = r;\n```\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/961fe7d0b48cd473669c4a9ea4aee5e.png\">\n```java\n// (图示 PP == null) 执行完该代码，形成图示结构\nif ((pp = r.parent = p.parent) == null)\n    (root = r).red = false;\n```\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/aedbfe1bf1c62c8a5ef2b96a96926bb.png\">\n```java\n// (图示 PP == null) 执行完该代码，形成图示结构\nr.left = p;\np.parent = r;\n```\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/ec70adec13149d9e7c470523a71d6c1.png\">\n</li>\n<li><p>rotateRight</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> root<span class=\"token punctuation\">,</span>\n                                             TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// l 左节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// pp 祖父节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// lr 左节点的右节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 右旋就是将某个节点旋转为其左节点(孩子)的右节点(孩子)</span>\n        TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> l<span class=\"token punctuation\">,</span> pp<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lr <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n                  lr<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pp <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">(</span>root <span class=\"token operator\">=</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span>\n                  pp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">else</span>\n                  pp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n              l<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n              p<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 执行完图示代码，形成右旋开始前的红黑树结构</span>\n<span class=\"token comment\" spellcheck=\"true\">// x 的父节点变为黑色</span>\nxp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xpp <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// x 的祖父节点变为红色</span>\n  xpp<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 向右旋 （图示的单旋转方式）</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/0967f6452c309aca5691a5830b2509b.png\"></li>\n<li><p>图示右旋过程</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 执行完图示代码，形成图示结构</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lr <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n      lr<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n</code></pre>\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/66417706c273dccabf82f3ff2580365.png\">\n```java\n// ( 图示 pp != null )执行完图示代码，形成图示结构\nif ((pp = l.parent = p.parent) == null)\n    (root = l).red = false;\n```\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/06a15e3f97fd38d1cea8fbf0884d733.png\">\n```java\n// ( 图示 pp != null )执行完图示代码，形成图示结构\nelse\npp.left = l;\nl.right = p;\np.parent = l;\n```\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/bd5895dfd58989427ed5b4f5e52751c.png\">\n```java\n// ( 图示 pp == null )执行完图示代码，形成图示结构\nif ((pp = l.parent = p.parent) == null)\n    (root = l).red = false;\n```\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/12a438f3887d932af67dd911b39d57a.png\">\n```java\n// ( 图示 pp == null )执行完图示代码，形成图示结构\nl.right = p;\np.parent = l;\n```\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/1daef0d407b6d6e71d05493ca10414a.png\">\n</li>\n<li><p>左旋和右旋结合起来的旋转过程</p>\n<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/1ed1c404387f6eb30ebbd92c7dca7c9.png\"></li>\n</ul>\n<p>问题：<br></p>\n<ol>\n<li>为什么右旋前，需要将 x 节点变成黑色？<br><br>因为这样就可以不考虑 xppp 节点的颜色，即使 xppp 节点颜色是红色，可以进行再次平衡旋转</li>\n</ol>\n<p>以上都是拿 x 的父节点是祖父节点的左节点的情况，x 的父节点是祖父节点的右节点的情况，与之相反。</p>\n","comments":true,"link":"","tags":[{"name":"JavaApi","slug":"JavaApi","permalink":"https://carefulhuo.github.io/tags/JavaApi/"}]},{"title":"Ubuntu 20.04 LTS安装 Redis 5.0.7","date":"2021-01-17T12:50:01.000Z","path":"posts/1577700f.html","text":"准备工作环境：Ubuntu 20.04Redis版本：5.0.7 安装 RedisRedis 软件包在 UbUbuntu 20.04 默认在设置的软件源中，执行命令： sudo apt update sudo apt install redis-server 安装完成后，Redis的服务会自动启动，检查服务的状态，执行命令： sudo systemctl status redis-server 正常启动时，应该看到下面的内容： ● redis-server.service - Advanced key-value store Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2020-06-06 20:03:08 UTC; 10s ago ... 如果没有正常启动，查看 IPV6 设置，执行命令： vim /etc/default/ufw 修改 IPV6 的设置为true，如下图所示： # Set to yes to apply rules to support IPv6 (no means only IPv6 on loopback # accepted). You will need to 'disable' and then 'enable' the firewall for # the changes to take affect. IPV6=yes 如果是使用的 WSL ( Windows Subsystem for Linux ) 适用于 Linux 的Windows 子系统，安装的 Ubuntu 20.04，执行检查服务状态的命令提示： System has not been booted with systemd as init system (PID 1). Can't operate. Failed to connect to bus: Host is down 原因是因为 WSL2 没有 systemd 命令 ，可以执行命令： sudo service redis-server status 正常启动 Redis 显示的内容： * redis-server is running 配置 Redis 远程访问默认情况下，Redis不允许远程连接，仅仅能通过127.0.0.1（localhost）连接 Redis 服务器 - Redis 正在运行的机器上。如果使用的是单机器，数据库也在这台机器上，不需要配置远程访问。 配置 Redis 远程访问 ，执行命令： vim /etc/redis/redis.conf 打开 Redis 配置文件后，找到以下内容： # for connections from all the network interfaces available on the server. # It is possible to listen to just one or multiple selected interfaces using # the \"bind\" configuration directive, followed by one or more IP addresses. # # Examples: # # bind 127.0.0.1 ::1 # # ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the # internet, binding to all the interfaces is dangerous and will expose the # instance to everybody on the internet. So by default we uncomment the # following bind directive, that will force Redis to listen only into # the IPv4 loopback interface address (this means Redis will be able to # accept connections only from clients running into the same computer it # is running). # # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES # JUST COMMENT THE FOLLOWING LINE. # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ bind 127.0.0.1 ::1 根据配置文件注释，增加以下 IP 地址： bind 0.0.0.0 ::1 保存配置文件，重启 Redis 服务，执行命令： sudo systemctl restart redis-server sudo service redis-server restart 为什么有两条命令，上面已经讲过了。检查 Redis 监听的端口，执行命令： ss -an | grep 6379 正常启动，应该会看到下面的内容： tcp LISTEN 0 128 0.0.0.0:6379 0.0.0.0:* tcp LISTEN 0 128 [::1]:6379 [::]:* 配置防火墙，允许网络通过 TCP 端口 6379允许从一个指定 IP 地址或者一个指定 IP 范围来访问 Redis 服务器。例如，想要允许从192.168.121.0/24的连接，执行命令： sudo ufw allow proto tcp from 192.168.121.0/24 to any port 6379 确保你的防火墙被配置仅仅接受来自受信任 IP 的连接。到了这里，Redis的远程设置已经完成。验证 Redis 远程配置是否成功，在远程服务器上使用 redis-cli Ping 一下 Redis 服务器，执行命令： redis-cli -h ping 正常响应的结果，如下面所示： PONG 启动 redis 服务器后，打开终端并输入命令 redis-cli，该命令会连接本地的 redis 服务。执行命令： redis-cli 127.0.0.1:6379> ping PONG 注意：执行 Redis 命令需要 Redis客户端。 redis-cli 是 Redis 的客户端，在下载的 Redis 安装包里面。 Redis 文档了解更多的 Redis 使用，可以访问 Redis 官网!","content":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>环境：Ubuntu 20.04<br>Redis版本：5.0.7</p>\n<span id=\"more\"></span>\n<h4 id=\"安装-Redis\"><a href=\"#安装-Redis\" class=\"headerlink\" title=\"安装 Redis\"></a>安装 Redis</h4><p>Redis 软件包在 UbUbuntu 20.04 默认在设置的软件源中，执行命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">sudo apt update\nsudo apt install redis-server\n</code></pre>\n<p>安装完成后，Redis的服务会自动启动，检查服务的状态，执行命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">sudo systemctl status redis-server\n</code></pre>\n<p>正常启动时，应该看到下面的内容：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">● redis-server.service - Advanced key-value store\n     Loaded: loaded (/lib/systemd/system/redis-server.service; enabled; vendor preset: enabled)\n     Active: active (running) since Sat 2020-06-06 20:03:08 UTC; 10s ago\n...\n</code></pre>\n<p>如果没有正常启动，查看 IPV6 设置，执行命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">vim /etc/default/ufw\n</code></pre>\n<p>修改 IPV6 的设置为true，如下图所示：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\"># Set to yes to apply rules to support IPv6 (no means only IPv6 on loopback\n# accepted). You will need to 'disable' and then 'enable' the firewall for\n# the changes to take affect.\nIPV6=yes\n</code></pre>\n<p>如果是使用的 WSL ( Windows Subsystem for Linux ) 适用于 Linux 的Windows 子系统，安装的 Ubuntu 20.04，执行检查服务状态的命令提示：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">System has not been booted with systemd as init system (PID 1). Can't operate.\nFailed to connect to bus: Host is down\n</code></pre>\n<p>原因是因为 <a href=\"https://github.com/MicrosoftDocs/WSL/issues/457\">WSL2 没有 systemd 命令</a> ，可以执行命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">sudo service redis-server status\n</code></pre>\n<p>正常启动 Redis 显示的内容：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\"> * redis-server is running\n</code></pre>\n<h4 id=\"配置-Redis-远程访问\"><a href=\"#配置-Redis-远程访问\" class=\"headerlink\" title=\"配置 Redis 远程访问\"></a>配置 Redis 远程访问</h4><p>默认情况下，Redis不允许远程连接，仅仅能通过127.0.0.1（localhost）连接 Redis 服务器 - Redis 正在运行的机器上。<br>如果使用的是单机器，数据库也在这台机器上，不需要配置远程访问。</p>\n<p>配置 Redis 远程访问 ，执行命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">vim /etc/redis/redis.conf\n</code></pre>\n<p>打开 Redis 配置文件后，找到以下内容：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\"># for connections from all the network interfaces available on the server.\n# It is possible to listen to just one or multiple selected interfaces using\n# the \"bind\" configuration directive, followed by one or more IP addresses.\n#\n# Examples:\n#\n# bind 127.0.0.1 ::1\n#\n# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the\n# internet, binding to all the interfaces is dangerous and will expose the\n# instance to everybody on the internet. So by default we uncomment the\n# following bind directive, that will force Redis to listen only into\n# the IPv4 loopback interface address (this means Redis will be able to\n# accept connections only from clients running into the same computer it\n# is running).\n#\n# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES\n# JUST COMMENT THE FOLLOWING LINE.\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nbind 127.0.0.1 ::1\n</code></pre>\n<p>根据配置文件注释，增加以下 IP 地址：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">bind 0.0.0.0 ::1\n</code></pre>\n<p>保存配置文件，重启 Redis 服务，执行命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">sudo systemctl restart redis-server\nsudo service redis-server restart\n</code></pre>\n<p>为什么有两条命令，上面已经讲过了。<br>检查 Redis 监听的端口，执行命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">ss -an | grep 6379\n</code></pre>\n<p>正常启动，应该会看到下面的内容：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">tcp   LISTEN 0      128               0.0.0.0:6379             0.0.0.0:*\n\ntcp   LISTEN 0      128                 [::1]:6379                [::]:*\n</code></pre>\n<p>配置防火墙，允许网络通过 TCP 端口 6379<br>允许从一个指定 IP 地址或者一个指定 IP 范围来访问 Redis 服务器。例如，想要允许从192.168.121.0/24的连接，执行命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">sudo ufw allow proto tcp from 192.168.121.0/24 to any port 6379\n</code></pre>\n<p>确保你的防火墙被配置仅仅接受来自受信任 IP 的连接。<br>到了这里，Redis的远程设置已经完成。<br>验证 Redis 远程配置是否成功，在远程服务器上使用 redis-cli Ping 一下 Redis 服务器，执行命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">redis-cli -h <REDIS_IP_ADDRESS> ping\n</code></pre>\n<p>正常响应的结果，如下面所示：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">PONG\n</code></pre>\n<p>启动 redis 服务器后，打开终端并输入命令 redis-cli，该命令会连接本地的 redis 服务。执行命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">redis-cli\n127.0.0.1:6379> ping\nPONG\n</code></pre>\n<p><strong>注意</strong>：执行 Redis 命令需要 Redis客户端。 redis-cli 是 Redis 的客户端，在下载的 Redis 安装包里面。</p>\n<h4 id=\"Redis-文档\"><a href=\"#Redis-文档\" class=\"headerlink\" title=\"Redis 文档\"></a>Redis 文档</h4><p>了解更多的 Redis 使用，可以访问 <a href=\"https://redis.io/documentation\">Redis 官网</a>!</p>\n","comments":true,"link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"https://carefulhuo.github.io/tags/Linux/"}]},{"title":"Ubuntu 20.04.1 LTS安装OpenJDK","date":"2021-01-15T14:17:36.000Z","path":"posts/91d6b55f.html","text":"一. 安装 OpenJDK 11 前期准备 root权限或者其他sudo权限用户身份 国内软件源(防止速度过慢) Linux版本：Ubuntu 20.04.1 LTS 开始安装 # 更新软件包索引 sudo apt update # 安装OpenJDK 11 sudo apt install openjdk-11-jdk 安装结果你可以通过查询Java版本检查安装过程，运行下面的命令： java -version 输出结果类似这样： openjdk version \"11.0.7\" 2020-04-14 OpenJDK Runtime Environment (build 11.0.7+10-post-Ubuntu-3ubuntu1) OpenJDK 64-Bit Server VM (build 11.0.7+10-post-Ubuntu-3ubuntu1, mixed mode, sharing) 通过以上的操作，安装 OpenJDK 11 就成功了。 二. 安装 OpenJDK 8 前期准备 跟安装 OpenJDK 11的准备一样 开始安装 # 更新软件包索引 sudo apt update # 安装OpenJDK 11 sudo apt install openjdk-8-jdk 安装结果你可以通过查询Java版本检查安装过程，运行下面的命令： java -version 输出结果类似这样： openjdk version \"1.8.0_275\" OpenJDK Runtime Environment (build 1.8.0_275-8u275-b01-0ubuntu1~20.04-b01) OpenJDK 64-Bit Server VM (build 25.275-b01, mixed mode)mixed mode, sharing) 通过以上的操作，安装 OpenJDK 8 就成功了。 三. 设置默认JAVA版本如果在Ubuntu系统中安装了多个JAVA版本，可以使用下面的命令，确认Ubuntu默认的Java版本是哪一个？ java -version 修改默认版本，使用 update-alternatives 命令： sudo update-alternatives --config java 输出结果类似这样： There are 2 choices for the alternative java (providing /usr/bin/java). Selection Path Priority Status ------------------------------------------------------------ * 0 /usr/lib/jvm/java-11-openjdk-amd64/bin/java 1111 auto mode 1 /usr/lib/jvm/java-11-openjdk-amd64/bin/java 1111 manual mode 2 /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java 1081 manual mode Press to keep the current choice[*], or type selection number: 所有已经安装的 Java 版本将会列出来。输入你想要设置为默认值的序号，并且按”Enter”。 四. 设置环境变量 JAVA_HOME在一些Java应用中，环境变量 JAVA_HOME 用来表示Java的安装位置 想要设置 JAVA_HOME 变量，首先使用update-alternatives找到 Java 安装路径: sudo update-alternatives --config java 上述示例中，安装路径如下： - OpenJDK 11 is located at /usr/lib/jvm/java-11-openjdk-amd64/bin/java - OpenJDK 8 is located at /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java 你找到你喜欢的 Java 安装路径，打开/etc/environment文件： # 进入/root目录下 cd ~ # 编辑 environment 文件 vim /etc/environment 编辑 environment 文件需要 root 权限的用户身份。 假设你想设置 JAVA_HOME 指定到 OpenJDK 8，在文件的末尾，添加下面的行： JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" 想让修改在当前 shell 生效，你可以登出系统，再登入系统，或者运行下面的命令： source /etc/environment 验证环境变量 JAVA_HOME 是否被正确设置： echo $JAVA_HOME 你应该可以看到 Java 安装路径： /usr/lib/jvm/java-8-openjdk-amd64 五. 卸载 Java你可以使用apt卸载Java，就像卸载其他软件包一样： sudo apt remove openjdk-11-jdk","content":"<h4 id=\"一-安装-OpenJDK-11\"><a href=\"#一-安装-OpenJDK-11\" class=\"headerlink\" title=\"一. 安装 OpenJDK 11\"></a>一. 安装 OpenJDK 11</h4><ol>\n<li>前期准备</li>\n</ol>\n<ul>\n<li>root权限或者其他sudo权限用户身份</li>\n<li>国内软件源(防止速度过慢)</li>\n<li>Linux版本：Ubuntu 20.04.1 LTS<span id=\"more\"></span></li>\n</ul>\n<ol start=\"2\">\n<li><p>开始安装</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\"># 更新软件包索引\nsudo apt update\n# 安装OpenJDK 11\nsudo apt install openjdk-11-jdk\n</code></pre>\n</li>\n<li><p>安装结果<br>你可以通过查询Java版本检查安装过程，运行下面的命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">java -version\n</code></pre>\n</li>\n</ol>\n<hr>\n<p>输出结果类似这样：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">openjdk version \"11.0.7\" 2020-04-14\nOpenJDK Runtime Environment (build 11.0.7+10-post-Ubuntu-3ubuntu1)\nOpenJDK 64-Bit Server VM (build 11.0.7+10-post-Ubuntu-3ubuntu1, mixed mode, sharing)\n</code></pre>\n<p>通过以上的操作，安装 OpenJDK 11 就成功了。</p>\n<h4 id=\"二-安装-OpenJDK-8\"><a href=\"#二-安装-OpenJDK-8\" class=\"headerlink\" title=\"二. 安装 OpenJDK 8\"></a>二. 安装 OpenJDK 8</h4><ol>\n<li>前期准备</li>\n</ol>\n<ul>\n<li>跟安装 OpenJDK 11的准备一样</li>\n</ul>\n<ol start=\"2\">\n<li><p>开始安装</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\"># 更新软件包索引\nsudo apt update\n# 安装OpenJDK 11\nsudo apt install openjdk-8-jdk\n</code></pre>\n</li>\n<li><p>安装结果<br>你可以通过查询Java版本检查安装过程，运行下面的命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">java -version\n</code></pre>\n</li>\n</ol>\n<hr>\n<p>输出结果类似这样：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">openjdk version \"1.8.0_275\"\nOpenJDK Runtime Environment (build 1.8.0_275-8u275-b01-0ubuntu1~20.04-b01)\nOpenJDK 64-Bit Server VM (build 25.275-b01, mixed mode)mixed mode, sharing)\n</code></pre>\n<p>通过以上的操作，安装 OpenJDK 8 就成功了。</p>\n<h4 id=\"三-设置默认JAVA版本\"><a href=\"#三-设置默认JAVA版本\" class=\"headerlink\" title=\"三. 设置默认JAVA版本\"></a>三. 设置默认JAVA版本</h4><p>如果在Ubuntu系统中安装了多个JAVA版本，可以使用下面的命令，确认Ubuntu默认的Java版本是哪一个？</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">java -version\n</code></pre>\n<p>修改默认版本，使用 update-alternatives 命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">sudo update-alternatives --config java\n</code></pre>\n<p>输出结果类似这样：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">There are 2 choices for the alternative java (providing /usr/bin/java).\n\n  Selection    Path                                            Priority   Status\n------------------------------------------------------------\n* 0            /usr/lib/jvm/java-11-openjdk-amd64/bin/java      1111      auto mode\n  1            /usr/lib/jvm/java-11-openjdk-amd64/bin/java      1111      manual mode\n  2            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      manual mode\n\nPress <enter> to keep the current choice[*], or type selection number:\n</code></pre>\n<p>所有已经安装的 Java 版本将会列出来。输入你想要设置为默认值的序号，并且按”Enter”。</p>\n<h4 id=\"四-设置环境变量-JAVA-HOME\"><a href=\"#四-设置环境变量-JAVA-HOME\" class=\"headerlink\" title=\"四. 设置环境变量 JAVA_HOME\"></a>四. 设置环境变量 JAVA_HOME</h4><p>在一些Java应用中，环境变量 JAVA_HOME 用来表示Java的安装位置</p>\n<p>想要设置 JAVA_HOME 变量，首先使用update-alternatives找到 Java 安装路径:</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">sudo update-alternatives --config java\n</code></pre>\n<p>上述示例中，安装路径如下：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">- OpenJDK 11 is located at /usr/lib/jvm/java-11-openjdk-amd64/bin/java\n- OpenJDK 8 is located at /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n</code></pre>\n<p>你找到你喜欢的 Java 安装路径，打开/etc/environment文件：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\"># 进入/root目录下\n cd ~\n# 编辑 environment 文件\n vim /etc/environment\n</code></pre>\n<p>编辑 environment 文件需要 root 权限的用户身份。</p>\n<p>假设你想设置 JAVA_HOME 指定到 OpenJDK 8，在文件的末尾，添加下面的行：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n</code></pre>\n<p>想让修改在当前 shell 生效，你可以登出系统，再登入系统，或者运行下面的命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">source /etc/environment\n</code></pre>\n<p>验证环境变量 JAVA_HOME 是否被正确设置：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">echo $JAVA_HOME\n</code></pre>\n<p>你应该可以看到 Java 安装路径：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">/usr/lib/jvm/java-8-openjdk-amd64\n</code></pre>\n<h4 id=\"五-卸载-Java\"><a href=\"#五-卸载-Java\" class=\"headerlink\" title=\"五. 卸载 Java\"></a>五. 卸载 Java</h4><p>你可以使用apt卸载Java，就像卸载其他软件包一样：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">sudo apt remove openjdk-11-jdk\n</code></pre>\n","comments":true,"link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"https://carefulhuo.github.io/tags/Linux/"}]},{"title":"Win10安装Linux子系统","date":"2021-01-15T13:58:40.000Z","path":"posts/d4c1f845.html","text":"1. 根据微软的帮助文档安装 2. 安装的Linux系统版本通过 cat 命令进行简单查看 运行下面命令： cat /etc/issue 输出结果类似这样: Ubuntu 20.04.1 LTS \\n \\l 通过 cat /etc/lsb-release 命令进行具体查看 运行下面命令： cat /etc/lsb-release 输出结果类似这样： DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION=\"Ubuntu 20.04.1 LTS\" 3. Linux子系统安装路径：C：\\ Users \\ AppData \\ Local \\ Packages \\ CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc 4. 系统root密码默认为没有设置密码设置root密码需要输入三次，第一次当前用户密码, 后两次就是设置密码以及确认密码)，运行下面命令： # 语法：sudo passwd 用户名 sudo passwd root 切换root用户，运行下面的命令： # 语法 su 用户名 su root 5. 修改Linux的软件源切换到root权限用户身份，通过 mv 命令备份软件源文件，运行下面命令： # 改名 sources.list 为 sources.list.backup sudo mv /etc/apt/sources.list /etc/apt/sources.list.backup 通过 sudo touch 命令创建新的sources.list文件，运行下面命令： sudo touch /etc/apt/sources.list 通过 vim 命令编辑新生成的sources.list文件，运行下面命令： vim /etc/apt/sources.list 通过 sudo apt 命令刷新软件包索引，验证软件源更换是否成功： sudo apt update 可以选择自己喜欢的国内软件源,执行上面的命令进行更换： 阿里云源 deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse 清华源 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse 中科大源 deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse 网易163源 deb http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse","content":"<h4 id=\"1-根据微软的帮助文档安装\"><a href=\"#1-根据微软的帮助文档安装\" class=\"headerlink\" title=\"1. 根据微软的帮助文档安装\"></a>1. 根据微软的<a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\">帮助文档</a>安装</h4><span id=\"more\"></span>\n<h4 id=\"2-安装的Linux系统版本\"><a href=\"#2-安装的Linux系统版本\" class=\"headerlink\" title=\"2. 安装的Linux系统版本\"></a>2. 安装的Linux系统版本</h4><p>通过 cat 命令进行简单查看 运行下面命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\"> cat /etc/issue\n</code></pre>\n<p>输出结果类似这样:</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">Ubuntu 20.04.1 LTS \\n \\l\n</code></pre>\n<p>通过 cat /etc/lsb-release 命令进行具体查看 运行下面命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">cat /etc/lsb-release\n</code></pre>\n<p>输出结果类似这样：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=20.04\nDISTRIB_CODENAME=focal\nDISTRIB_DESCRIPTION=\"Ubuntu 20.04.1 LTS\"\n</code></pre>\n<h4 id=\"3-Linux子系统安装路径：\"><a href=\"#3-Linux子系统安装路径：\" class=\"headerlink\" title=\"3. Linux子系统安装路径：\"></a>3. Linux子系统安装路径：</h4><pre class=\" language-Linux\"><code class=\"language-Linux\">C：\\ Users <我的用户名> \\ AppData \\ Local \\ Packages \\ CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\n</code></pre>\n<h4 id=\"4-系统root密码默认为没有设置密码\"><a href=\"#4-系统root密码默认为没有设置密码\" class=\"headerlink\" title=\"4. 系统root密码默认为没有设置密码\"></a>4. 系统root密码默认为没有设置密码</h4><p>设置root密码需要输入三次，第一次当前用户密码, 后两次就是设置密码以及确认密码)，运行下面命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\"># 语法：sudo passwd 用户名\nsudo passwd root\n</code></pre>\n<p>切换root用户，运行下面的命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\"># 语法 su 用户名\nsu root \n</code></pre>\n<h4 id=\"5-修改Linux的软件源\"><a href=\"#5-修改Linux的软件源\" class=\"headerlink\" title=\"5. 修改Linux的软件源\"></a>5. 修改Linux的软件源</h4><p>切换到root权限用户身份，通过 mv 命令备份软件源文件，运行下面命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\"># 改名 sources.list 为 sources.list.backup\nsudo mv /etc/apt/sources.list /etc/apt/sources.list.backup\n</code></pre>\n<p>通过 sudo touch 命令创建新的sources.list文件，运行下面命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">sudo touch /etc/apt/sources.list\n</code></pre>\n<p>通过 vim 命令编辑新生成的sources.list文件，运行下面命令：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">vim /etc/apt/sources.list\n</code></pre>\n<p>通过 sudo apt 命令刷新软件包索引，验证软件源更换是否成功：</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">sudo apt update\n</code></pre>\n<p>可以选择自己喜欢的国内软件源,执行上面的命令进行更换：</p>\n<p>阿里云源</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\n</code></pre>\n<p>清华源</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse\n</code></pre>\n<p>中科大源</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse\n</code></pre>\n<p>网易163源</p>\n<pre class=\" language-Linux\"><code class=\"language-Linux\">deb http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ focal main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ focal-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ focal-backports main restricted universe multiverse\n</code></pre>\n","comments":true,"link":"","tags":[{"name":"Linux","slug":"Linux","permalink":"https://carefulhuo.github.io/tags/Linux/"}]},{"title":"SpringBoot使用Validator校验框架","date":"2021-01-13T07:02:25.000Z","path":"posts/dba1824b.html","text":"Hibernate Validator 简介 Hibernate Validator是Hibernate项目中的一个数据校验框架，是Bean Validation 的参考实现，Hibernate Validator除了提供了JSR 303规范中所有内置constraint 的实现，还有一些附加的constraint。 Hibernate Validator 作用 数据校验逻辑和业务代码分离，程序解耦性提高 统一且规范的校验格式，规避了大量重复的数据校验代码 精力更加集中于业务代码 Hibernate Validator 使用项目中，主要通过接口API的接口入参校验和封装工具类在代码中使用两种方式 引入jar包&lt;!-- 使用SpringBoot框架 --> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-validation&lt;/artifactId> &lt;/dependency> &lt;!-- 直接引用jar包 --> &lt;dependency> &lt;groupId>org.hibernate&lt;/groupId> &lt;artifactId>hibernate-validator&lt;/artifactId> &lt;version>6.0.9.Final&lt;/version> &lt;/dependency> Java对象添加约束 级联校验需要添加@Valid注解 import com.ai.chinapost.crm.mdb.mgr.common.ValidateGroup; import lombok.Data; import org.hibernate.validator.constraints.NotBlank; import javax.validation.Valid; import java.util.List; /** * @date 2021/01/11 */ @Data public class CltMktOccuAndIncmBO { /** * 保存或修改标识 1：保存 2：修改 */ @NotBlank(message = \"保存或修改标识不能为空\" ,groups = ValidateGroup.CltMktOccuAndIncm.class) private String saveOrUpdate; /** * 更新人编码 */ @NotBlank(message = \"更新人编码必填\" ,groups = ValidateGroup.CltMktOccuAndIncm.class) private String updatedByUserCode; /** * 更新人所属机构编码 */ @NotBlank(message = \"更新人所属机构编码必填\" ,groups = ValidateGroup.CltMktOccuAndIncm.class) private String updatedByOrgCode; /** * 统计时间 */ @NotBlank(message = \"统计时间必填\" ,groups = ValidateGroup.CltMktOccuAndIncm.class) private String statisDate; @Valid private List&lt;CltMktOccuAndIncmDetailBO> cltMktOccuAndIncmDetailList; } 校验组设置/** * @date 2020/7/21 */ public interface ValidateGroup { interface CltMktOccuAndIncm { } } API接口入参校验 定义接口 接口入参需要添加@Validated注解，进行参数校验 @PostMapping(\"/saveDist\") @ResponseBody public ResponseEntity dist(@Validated(ValidateGroup.CltMktOccuAndIncm.class) @RequestBody TrgtMktOcBase entity) throws CommonException { ResponseEntity resp = distTrgtFacadeConsumer.dist(entity); return resp; } postMan测试结果请求报文: { \"saveOrUpdate\": \"\", \"updatedByUserCode\": \"20000\", \"updatedByOrgCode\": \"100\", \"statisDate\": \"\", \"cltMktOccuAndIncmDetailList\": [ { \"provId\": \"\", \"provName\": \"安徽\" }, { \"provId\": \"370000\", \"provName\": \"山东\" } ] } 响应报文: { \"code\": 400, \"message\": \"statisDate:统计时间必填 saveOrUpdate:保存或修改标识不能为空 cltMktOccuAndIncmDetailList[0].provId:省份编码必填 参数值有误\" } 封装工具类校验 工具类中的Validator对象有两种方式获取(选其一即可) import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Primary; import org.springframework.stereotype.Component; import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean; import javax.validation.Validator; /** * @date 2021/01/13 */ @Component public class ValidatorConfig { @Bean(name = \"validator\") @Primary public Validator validator() { return new LocalValidatorFactoryBean(); } } import lombok.Data; import org.hibernate.validator.HibernateValidator; import org.springframework.beans.BeansException; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; import org.springframework.stereotype.Component; import org.springframework.util.CollectionUtils; import javax.validation.ConstraintViolation; import javax.validation.Validation; import javax.validation.Validator; import java.util.ArrayList; import java.util.List; import java.util.Optional; import java.util.Set; /** * 校验工具类 * * @date 2021/01/13 */ @Component public class ValidationUtil implements ApplicationContextAware { private static final ValidationUtil Instance = new ValidationUtil(); public static ValidationUtil getInstance() { return Instance; } private static Validator validator; // 结合ValidatorConfig类通过Spring容器获取 @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { ValidationUtil.validator = (Validator) applicationContext.getBean(\"validator\"); } // 直接通过Validation类获取对象 // 开启快速结束模式 failFast (true) private static Validator validator1 = Validation.byProvider(HibernateValidator.class).configure().failFast(false).buildValidatorFactory().getValidator(); /** * 校验对象 * * @param obj bean对象 * @param groups 校验组，必须是一个接口 * @param &lt;T> * @return Optional&lt;ValidResult> */ public &lt;T> Optional&lt;ValidResult> validateBean(T obj, Class&lt;?>...groups) { ValidResult result = Instance.new ValidResult(); Set&lt;ConstraintViolation&lt;T>> violationSets = validator.validate(obj, groups); if (CollectionUtils.isEmpty(violationSets)) { return Optional.empty(); } for (ConstraintViolation&lt;T> violation : violationSets) { result.addError(violation.getPropertyPath().toString(), violation.getMessage()); } return Optional.of(result); } /** * 校验对象的某一个属性 * * @param obj bean对象 * @param propertyName 属性名称 * @param &lt;T> * @return Optional&lt;ValidResult> */ public &lt;T> Optional&lt;ValidResult> validateProperty(T obj, String propertyName) { ValidResult result = Instance.new ValidResult(); Set&lt;ConstraintViolation&lt;T>> violationSets = validator.validateProperty(obj, propertyName); if (CollectionUtils.isEmpty(violationSets)) { return Optional.empty(); } for (ConstraintViolation&lt;T> violation : violationSets) { result.addError(violation.getPropertyPath().toString(), violation.getMessage()); } return Optional.of(result); } @Data public class ValidResult { /** * 错误信息 */ private List&lt;ErrorMessage> errors; public ValidResult() { this.errors = new ArrayList&lt;>(); } /** * 获取所有验证信息 * * @return 集合形式 */ public List&lt;ErrorMessage> getAllErrors() { return errors; } /** * 获取所有验证信息 * * @return 字符串形式 */ public String getErrors() { StringBuilder sb = new StringBuilder(); for (ErrorMessage error : errors) { sb.append(error.getPropertyPath()).append(\":\").append(error.getMessage()).append(\" \"); } return sb.toString(); } public void addError(String propertyName, String message) { this.errors.add(new ErrorMessage(propertyName, message)); } } @Data private class ErrorMessage { private String propertyPath; private String message; public ErrorMessage() { } public ErrorMessage(String propertyPath, String message) { this.propertyPath = propertyPath; this.message = message; } } } 测试代码 也可不指定分组(groups)，会默认使用Default.class分组 public ResponseEntity saveCltMktOccuAndIncm(String params) { // 校验参数 Class cltMktOccuAndIncm = ValidateGroup.CltMktOccuAndIncm.class; CltMktOccuAndIncmBO cltMktOccuAndIncmBO = JSON.parseObject(params, CltMktOccuAndIncmBO.class); Optional&lt;ValidationUtil.ValidResult> validResult = ValidationUtil.getInstance().validateBean(cltMktOccuAndIncmBO, cltMktOccuAndIncm); if (validResult.isPresent()) { ValidationUtil.ValidResult errMessage = validResult.get(); return ResponseEntity.fail(ResponseEnum.DATA_ERROR, errMessage.getErrors()); } return cltMktOccuAndIncmFacade.saveOrModifyCltMktOccuAndIncm(cltMktOccuAndIncmBO); } 测试结果响应报文: { \"code\": 400, \"message\": \"statisDate:统计时间必填 saveOrUpdate:保存或修改标识不能为空 cltMktOccuAndIncmDetailList[0].provId:省份编码必填 参数值有误\" } 其他常用的constranint@AssertFalse @AssertTrue 检验boolean类型的值 @DecimalMax @DecimalMin 限定被标注的属性的值的大小 @Digits(intege=,fraction=) 限定被标注的属性的整数位数和小数位数 @Future 检验给定的日期是否比现在晚 @Past 校验给定的日期是否比现在早 @Max 检查被标注的属性的值是否小于等于给定的值 @Min 检查被标注的属性的值是否大于等于给定的值 @NotNull 检验被标注的值不为空 @Null 检验被标注的值为空 @Pattern(regex=,flag=) 检查该字符串是否能够在match指定的情况下被regex定义的正则表达式匹配 @Size(min=,max=) 检查被标注元素的长度 @Valid 递归的对关联的对象进行校验 文章借鉴处 https://www.jianshu.com/p/0bfe2318814f","content":"<h4 id=\"Hibernate-Validator-简介\"><a href=\"#Hibernate-Validator-简介\" class=\"headerlink\" title=\"Hibernate Validator 简介\"></a>Hibernate Validator 简介</h4><p>　　Hibernate Validator是Hibernate项目中的一个数据校验框架，是Bean Validation 的参考实现，Hibernate Validator除了提供了JSR 303规范中所有内置constraint 的实现，还有一些附加的constraint。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"Hibernate-Validator-作用\"><a href=\"#Hibernate-Validator-作用\" class=\"headerlink\" title=\"Hibernate Validator 作用\"></a>Hibernate Validator 作用</h4><ul>\n<li>数据校验逻辑和业务代码分离，程序解耦性提高</li>\n<li>统一且规范的校验格式，规避了大量重复的数据校验代码</li>\n<li>精力更加集中于业务代码</li>\n</ul>\n<h4 id=\"Hibernate-Validator-使用\"><a href=\"#Hibernate-Validator-使用\" class=\"headerlink\" title=\"Hibernate Validator 使用\"></a>Hibernate Validator 使用</h4><p>项目中，主要通过接口API的接口入参校验和封装工具类在代码中使用两种方式</p>\n<h5 id=\"引入jar包\"><a href=\"#引入jar包\" class=\"headerlink\" title=\"引入jar包\"></a>引入jar包</h5><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- 使用SpringBoot框架 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-validation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 直接引用jar包 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.hibernate<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hibernate-validator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>6.0.9.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h5 id=\"Java对象添加约束\"><a href=\"#Java对象添加约束\" class=\"headerlink\" title=\"Java对象添加约束\"></a>Java对象添加约束</h5><blockquote>\n<p>级联校验需要添加@Valid注解</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>ai<span class=\"token punctuation\">.</span>chinapost<span class=\"token punctuation\">.</span>crm<span class=\"token punctuation\">.</span>mdb<span class=\"token punctuation\">.</span>mgr<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>ValidateGroup<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> lombok<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>hibernate<span class=\"token punctuation\">.</span>validator<span class=\"token punctuation\">.</span>constraints<span class=\"token punctuation\">.</span>NotBlank<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> javax<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span>Valid<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @date 2021/01/11\n */</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CltMktOccuAndIncmBO</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 保存或修改标识 1：保存 2：修改\n     */</span>\n    <span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"保存或修改标识不能为空\"</span> <span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span> ValidateGroup<span class=\"token punctuation\">.</span>CltMktOccuAndIncm<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String saveOrUpdate<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 更新人编码\n     */</span>\n    <span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"更新人编码必填\"</span> <span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span> ValidateGroup<span class=\"token punctuation\">.</span>CltMktOccuAndIncm<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String updatedByUserCode<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 更新人所属机构编码\n     */</span>\n    <span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"更新人所属机构编码必填\"</span> <span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span> ValidateGroup<span class=\"token punctuation\">.</span>CltMktOccuAndIncm<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String updatedByOrgCode<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 统计时间\n     */</span>\n    <span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"统计时间必填\"</span> <span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span> ValidateGroup<span class=\"token punctuation\">.</span>CltMktOccuAndIncm<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String statisDate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Valid</span>\n    <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>CltMktOccuAndIncmDetailBO<span class=\"token operator\">></span> cltMktOccuAndIncmDetailList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"校验组设置\"><a href=\"#校验组设置\" class=\"headerlink\" title=\"校验组设置\"></a>校验组设置</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @date 2020/7/21\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ValidateGroup</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CltMktOccuAndIncm</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"API接口入参校验\"><a href=\"#API接口入参校验\" class=\"headerlink\" title=\"API接口入参校验\"></a>API接口入参校验</h5><ul>\n<li>定义接口<br>　　接口入参需要添加@Validated注解，进行参数校验</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/saveDist\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>\n    <span class=\"token keyword\">public</span> ResponseEntity <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Validated</span><span class=\"token punctuation\">(</span>ValidateGroup<span class=\"token punctuation\">.</span>CltMktOccuAndIncm<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token annotation punctuation\">@RequestBody</span> TrgtMktOcBase entity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> CommonException <span class=\"token punctuation\">{</span>\n        ResponseEntity resp <span class=\"token operator\">=</span> distTrgtFacadeConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<ul>\n<li>postMan测试结果<pre class=\" language-json\"><code class=\"language-json\">请求报文<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token property\">\"saveOrUpdate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"updatedByUserCode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20000\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"updatedByOrgCode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"100\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"statisDate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"cltMktOccuAndIncmDetailList\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"provId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"provName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"安徽\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"provId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"370000\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"provName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"山东\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n响应报文<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"statisDate:统计时间必填 saveOrUpdate:保存或修改标识不能为空 cltMktOccuAndIncmDetailList[0].provId:省份编码必填 参数值有误\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n</ul>\n<hr>\n<h5 id=\"封装工具类校验\"><a href=\"#封装工具类校验\" class=\"headerlink\" title=\"封装工具类校验\"></a>封装工具类校验</h5><ul>\n<li>工具类中的Validator对象有两种方式获取(选其一即可)</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>Bean<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>Primary<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span>Component<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span>beanvalidation<span class=\"token punctuation\">.</span>LocalValidatorFactoryBean<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> javax<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span>Validator<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @date 2021/01/13\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidatorConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"validator\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token keyword\">public</span> Validator <span class=\"token function\">validator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalValidatorFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> lombok<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>hibernate<span class=\"token punctuation\">.</span>validator<span class=\"token punctuation\">.</span>HibernateValidator<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>BeansException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>ApplicationContext<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>ApplicationContextAware<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span>Component<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>CollectionUtils<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> javax<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span>ConstraintViolation<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> javax<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span>Validation<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> javax<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span>Validator<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayList<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Optional<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * 校验工具类\n *\n * @date 2021/01/13\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidationUtil</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> ValidationUtil Instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidationUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> ValidationUtil <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Validator validator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 结合ValidatorConfig类通过Spring容器获取</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span>ApplicationContext applicationContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> BeansException <span class=\"token punctuation\">{</span>\n        ValidationUtil<span class=\"token punctuation\">.</span>validator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Validator<span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"validator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 直接通过Validation类获取对象</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 开启快速结束模式 failFast (true)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Validator validator1 <span class=\"token operator\">=</span> Validation<span class=\"token punctuation\">.</span><span class=\"token function\">byProvider</span><span class=\"token punctuation\">(</span>HibernateValidator<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">failFast</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildValidatorFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 校验对象\n     *\n     * @param obj    bean对象\n     * @param groups 校验组，必须是一个接口\n     * @param &lt;T>\n     * @return Optional&lt;ValidResult>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>ValidResult<span class=\"token operator\">></span> <span class=\"token function\">validateBean</span><span class=\"token punctuation\">(</span>T obj<span class=\"token punctuation\">,</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ValidResult result <span class=\"token operator\">=</span> Instance<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Set<span class=\"token operator\">&lt;</span>ConstraintViolation<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> violationSets <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> groups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CollectionUtils<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>violationSets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Optional<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ConstraintViolation<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> violation <span class=\"token operator\">:</span> violationSets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">addError</span><span class=\"token punctuation\">(</span>violation<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> violation<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> Optional<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 校验对象的某一个属性\n     *\n     * @param obj          bean对象\n     * @param propertyName 属性名称\n     * @param &lt;T>\n     * @return Optional&lt;ValidResult>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>ValidResult<span class=\"token operator\">></span> <span class=\"token function\">validateProperty</span><span class=\"token punctuation\">(</span>T obj<span class=\"token punctuation\">,</span> String propertyName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ValidResult result <span class=\"token operator\">=</span> Instance<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Set<span class=\"token operator\">&lt;</span>ConstraintViolation<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> violationSets <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">validateProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CollectionUtils<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>violationSets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Optional<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ConstraintViolation<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> violation <span class=\"token operator\">:</span> violationSets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">addError</span><span class=\"token punctuation\">(</span>violation<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> violation<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> Optional<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Data</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidResult</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/**\n         * 错误信息\n         */</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>ErrorMessage<span class=\"token operator\">></span> errors<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">ValidResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/**\n         * 获取所有验证信息\n         *\n         * @return 集合形式\n         */</span>\n        <span class=\"token keyword\">public</span> List<span class=\"token operator\">&lt;</span>ErrorMessage<span class=\"token operator\">></span> <span class=\"token function\">getAllErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/**\n         * 获取所有验证信息\n         *\n         * @return 字符串形式\n         */</span>\n        <span class=\"token keyword\">public</span> String <span class=\"token function\">getErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            StringBuilder sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ErrorMessage error <span class=\"token operator\">:</span> errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addError</span><span class=\"token punctuation\">(</span>String propertyName<span class=\"token punctuation\">,</span> String message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ErrorMessage</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Data</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorMessage</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> String propertyPath<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> String message<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">ErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">ErrorMessage</span><span class=\"token punctuation\">(</span>String propertyPath<span class=\"token punctuation\">,</span> String message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyPath <span class=\"token operator\">=</span> propertyPath<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<ul>\n<li>测试代码<blockquote>\n<p>也可不指定分组(groups)，会默认使用Default.class分组</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> ResponseEntity <span class=\"token function\">saveCltMktOccuAndIncm</span><span class=\"token punctuation\">(</span>String params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\" spellcheck=\"true\">// 校验参数</span>\n        Class <span class=\"token class-name\">cltMktOccuAndIncm</span> <span class=\"token operator\">=</span> ValidateGroup<span class=\"token punctuation\">.</span>CltMktOccuAndIncm<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        CltMktOccuAndIncmBO cltMktOccuAndIncmBO <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> CltMktOccuAndIncmBO<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Optional<span class=\"token operator\">&lt;</span>ValidationUtil<span class=\"token punctuation\">.</span>ValidResult<span class=\"token operator\">></span> validResult <span class=\"token operator\">=</span> ValidationUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">validateBean</span><span class=\"token punctuation\">(</span>cltMktOccuAndIncmBO<span class=\"token punctuation\">,</span> cltMktOccuAndIncm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validResult<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ValidationUtil<span class=\"token punctuation\">.</span>ValidResult errMessage <span class=\"token operator\">=</span> validResult<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> ResponseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>ResponseEnum<span class=\"token punctuation\">.</span>DATA_ERROR<span class=\"token punctuation\">,</span> errMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> cltMktOccuAndIncmFacade<span class=\"token punctuation\">.</span><span class=\"token function\">saveOrModifyCltMktOccuAndIncm</span><span class=\"token punctuation\">(</span>cltMktOccuAndIncmBO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<ul>\n<li>测试结果<pre class=\" language-json\"><code class=\"language-json\">响应报文<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"statisDate:统计时间必填 saveOrUpdate:保存或修改标识不能为空 cltMktOccuAndIncmDetailList[0].provId:省份编码必填 参数值有误\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n</ul>\n<hr>\n<h4 id=\"其他常用的constranint\"><a href=\"#其他常用的constranint\" class=\"headerlink\" title=\"其他常用的constranint\"></a>其他常用的constranint</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AssertFalse</span> <span class=\"token annotation punctuation\">@AssertTrue</span> 检验<span class=\"token keyword\">boolean</span>类型的值\n\n<span class=\"token annotation punctuation\">@DecimalMax</span> <span class=\"token annotation punctuation\">@DecimalMin</span> 限定被标注的属性的值的大小\n\n<span class=\"token annotation punctuation\">@Digits</span><span class=\"token punctuation\">(</span>intege<span class=\"token operator\">=</span><span class=\"token punctuation\">,</span>fraction<span class=\"token operator\">=</span><span class=\"token punctuation\">)</span> 限定被标注的属性的整数位数和小数位数\n\n<span class=\"token annotation punctuation\">@Future</span> 检验给定的日期是否比现在晚\n\n<span class=\"token annotation punctuation\">@Past</span> 校验给定的日期是否比现在早\n\n<span class=\"token annotation punctuation\">@Max</span> 检查被标注的属性的值是否小于等于给定的值\n\n<span class=\"token annotation punctuation\">@Min</span> 检查被标注的属性的值是否大于等于给定的值\n\n<span class=\"token annotation punctuation\">@NotNull</span> 检验被标注的值不为空\n\n<span class=\"token annotation punctuation\">@Null</span> 检验被标注的值为空\n\n<span class=\"token annotation punctuation\">@Pattern</span><span class=\"token punctuation\">(</span>regex<span class=\"token operator\">=</span><span class=\"token punctuation\">,</span>flag<span class=\"token operator\">=</span><span class=\"token punctuation\">)</span> 检查该字符串是否能够在match指定的情况下被regex定义的正则表达式匹配\n\n<span class=\"token annotation punctuation\">@Size</span><span class=\"token punctuation\">(</span>min<span class=\"token operator\">=</span><span class=\"token punctuation\">,</span>max<span class=\"token operator\">=</span><span class=\"token punctuation\">)</span> 检查被标注元素的长度\n\n<span class=\"token annotation punctuation\">@Valid</span> 递归的对关联的对象进行校验\n</code></pre>\n<hr>\n<p><strong>文章借鉴处</strong></p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/0bfe2318814f\">https://www.jianshu.com/p/0bfe2318814f</a></li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"Tools","slug":"Tools","permalink":"https://carefulhuo.github.io/tags/Tools/"}]},{"title":"SpringBoot配置和加载redis","date":"2020-12-23T10:34:30.000Z","path":"posts/c51e64d0.html","text":"redis在SpringBoot中的配置及加载 // spring framework中的注解驱动的缓存管理功能 // 与该注解联合使用@Cacheable(cacheNames = \"缓存名称\", key = \"redis中的key\") @EnableCaching // 标识该类为一个配置类 @Configuration public class RedisConfig { @Value(\"${spring.redis.decryptPassword}\") private String password; @Value(\"${aes.key}\") private String key; // 读取数据源配置属性，生成JedisPoolConfig对象(redis线程池配置) @Bean @ConfigurationProperties(prefix = \"spring.redis.pool\") public JedisPoolConfig getRedisConfig() { JedisPoolConfig config = new JedisPoolConfig(); return config; } // 读取数据源配置属性，生成JedisConnectionFactory对象(redis属性对象) @Bean @ConfigurationProperties(prefix = \"spring.redis\") public JedisConnectionFactory getConnectionFactory() { JedisConnectionFactory factory = new JedisConnectionFactory(); factory.setUsePool(true); JedisPoolConfig config = getRedisConfig(); factory.setPoolConfig(config); factory.setPassword(new String(AesUtil.decrypt(Base64Utils.decodeFromString(password), key))); return factory; } // StringRedisTemplate类继承于RedisTemplate&lt;String, String> @Bean public StringRedisTemplate stringRedisTemplate() { JedisConnectionFactory factory = getConnectionFactory(); StringRedisTemplate template = new StringRedisTemplate(factory); return template; } // 自定义实现RedisTemplate&lt;String, String> // 因为redis中的数据类型有String、hash、list、set、zset(有序集合) @Bean public RedisTemplate&lt;String, Object> redisTemplate() { JedisConnectionFactory factory = getConnectionFactory(); RedisTemplate&lt;String, Object> template = new RedisTemplate&lt;String, Object>(); template.setConnectionFactory(factory); Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(objectMapper); StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); // key采用String的序列化方式 template.setKeySerializer(stringRedisSerializer); // hash的key也采用String的序列化方式 template.setHashKeySerializer(stringRedisSerializer); // value序列化方式采用jackson template.setValueSerializer(jackson2JsonRedisSerializer); // hash的value序列化方式采用jackson template.setHashValueSerializer(jackson2JsonRedisSerializer); template.afterPropertiesSet(); return template; } /** * 设置Cacheable缓存失效策略,与@EnableCaching，@Cacheable配合使用 */ @Primary @Bean public CacheManager cacheManager(RedisTemplate redisTemplate) { RedisCacheManager redisCacheManager = new RedisCacheManager(redisTemplate); redisCacheManager.setDefaultExpiration(60 * 60 * 6L); //设置缓存失效时间 return redisCacheManager; } }","content":"<h5 id=\"redis在SpringBoot中的配置及加载\"><a href=\"#redis在SpringBoot中的配置及加载\" class=\"headerlink\" title=\"redis在SpringBoot中的配置及加载\"></a>redis在SpringBoot中的配置及加载</h5><span id=\"more\"></span>\n\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// spring framework中的注解驱动的缓存管理功能</span>\n<span class=\"token comment\" spellcheck=\"true\">// 与该注解联合使用@Cacheable(cacheNames = \"缓存名称\", key = \"redis中的key\")</span>\n<span class=\"token annotation punctuation\">@EnableCaching</span>\n<span class=\"token comment\" spellcheck=\"true\">// 标识该类为一个配置类</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${spring.redis.decryptPassword}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String password<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${aes.key}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String key<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 读取数据源配置属性，生成JedisPoolConfig对象(redis线程池配置)</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.redis.pool\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> JedisPoolConfig <span class=\"token function\">getRedisConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        JedisPoolConfig config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 读取数据源配置属性，生成JedisConnectionFactory对象(redis属性对象)</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.redis\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> JedisConnectionFactory <span class=\"token function\">getConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        JedisConnectionFactory factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsePool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        JedisPoolConfig config <span class=\"token operator\">=</span> <span class=\"token function\">getRedisConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPoolConfig</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>AesUtil<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>Base64Utils<span class=\"token punctuation\">.</span><span class=\"token function\">decodeFromString</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// StringRedisTemplate类继承于RedisTemplate&lt;String, String></span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> StringRedisTemplate <span class=\"token function\">stringRedisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        JedisConnectionFactory factory <span class=\"token operator\">=</span> <span class=\"token function\">getConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        StringRedisTemplate template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisTemplate</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 自定义实现RedisTemplate&lt;String, String></span>\n    <span class=\"token comment\" spellcheck=\"true\">// 因为redis中的数据类型有String、hash、list、set、zset(有序集合)</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> RedisTemplate<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        JedisConnectionFactory factory <span class=\"token operator\">=</span> <span class=\"token function\">getConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        RedisTemplate<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ObjectMapper objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span>PropertyAccessor<span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">,</span> JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility<span class=\"token punctuation\">.</span>ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span>ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping<span class=\"token punctuation\">.</span>NON_FINAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jackson2JsonRedisSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>objectMapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        StringRedisSerializer stringRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// key采用String的序列化方式</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span>stringRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// hash的key也采用String的序列化方式</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span>stringRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// value序列化方式采用jackson</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// hash的value序列化方式采用jackson</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        template<span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 设置Cacheable缓存失效策略,与@EnableCaching，@Cacheable配合使用\n     */</span>\n    <span class=\"token annotation punctuation\">@Primary</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> CacheManager <span class=\"token function\">cacheManager</span><span class=\"token punctuation\">(</span>RedisTemplate redisTemplate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        RedisCacheManager redisCacheManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisCacheManager</span><span class=\"token punctuation\">(</span>redisTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisCacheManager<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultExpiration</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> 6L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//设置缓存失效时间</span>\n        <span class=\"token keyword\">return</span> redisCacheManager<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","comments":true,"link":"","tags":[{"name":"Tools","slug":"Tools","permalink":"https://carefulhuo.github.io/tags/Tools/"}]},{"title":"分布式锁工具类","date":"2020-12-23T09:00:09.000Z","path":"posts/d5f1c4d9.html","text":"利用redis实现分布式锁 // 分布式锁实现使用的版本 // springBoot的版本：org.springframework.boot:spring-boot:1.5.8.RELEASE // redis的版本：org.springframework.data:spring-data-redis:1.8.8.RELEASE // lombok的版本：org.projectlombok:lombok:1.18.6 // 标识springBoot启动时会扫描该类并创建实例放入spring容器 @Component // 引入lombokjar包，才能使用的注解 @Slf4j public class DistributedLock { private static final String LOCK_PREFIX = \"REDIS_LOCK_\"; //加锁失效时间，单位:秒 public static final int LOCK_EXPIRE = 3; // 此处注入的RedisTemplate实例信息，可以查看Redis与SpringBoot融合这篇工具类博客 // 文章地址：https://carefulhuo.github.io/posts/c51e64d0/ @Autowired RedisTemplate redisTemplate; /** * 尝试获取分布式锁 * * @param lockKey 锁 * @param requestId 请求标识 * @return 是否获取成功 */ public boolean tryLock(String lockKey, String requestId) { log.info(\"{}开始加锁,requestId:{}\", lockKey, requestId); String lock = LOCK_PREFIX + lockKey; // 利用lambda表达式 // setNX英文全称：SET if Not Exists // setNX含义：如果key存在，设置失败返回0；如果key不存在，设置成功返回1 // setNX方法：原子性的，但是该命令不能设置超时时间 // expire方法：设置超时时间，防止死锁 // 注意其中的RedisCallback，当redis有多个实例时，数据进行主从同步时，但主redis挂掉，随机选择一个从redis作为主redis时，不会发生多个请求获取到锁。 // 原理如下：加锁时，会向多半的节点发送setNX命令，如果多半节点成功，则算加锁成功，那么释放锁的时候，需要想所有节点发送del命令 return (Boolean) redisTemplate.execute((RedisCallback) connection -> { if (connection.setNX(lock.getBytes(), requestId.getBytes())) { connection.expire(lock.getBytes(), LOCK_EXPIRE); return true; } return false; }); } /** * 释放分布式锁 * * @param lockKey 锁 * @param requestId 请求标识 * @return 是否释放成功 */ public boolean releaseLock(String lockKey, String requestId) { log.info(\"{}开始释放锁,requestId:{}\", lockKey, requestId); String lock = LOCK_PREFIX + lockKey; final String script = \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end \"; // eval命令的参数(lua脚本,返回类型,脚本的参数个数,redis的key,redis的value) // redis执行lua脚本是原子性的 return (Boolean)redisTemplate.execute((RedisCallback) connection -> { return connection.eval(script.getBytes(), ReturnType.BOOLEAN ,1, lock.getBytes(Charset.forName(\"UTF-8\")), requestId.getBytes(Charset.forName(\"UTF-8\"))); }); } } -- 上述释放redis锁需要redis执行的lua脚本 -- 代码含义： -- if 中的比较如果是true , 那么 执行 del 并返回del结果；如果 if 结果为false 直接返回 0 。 if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end","content":"<h5 id=\"利用redis实现分布式锁\"><a href=\"#利用redis实现分布式锁\" class=\"headerlink\" title=\"利用redis实现分布式锁\"></a>利用redis实现分布式锁</h5><span id=\"more\"></span>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 分布式锁实现使用的版本</span>\n<span class=\"token comment\" spellcheck=\"true\">// springBoot的版本：org.springframework.boot:spring-boot:1.5.8.RELEASE</span>\n<span class=\"token comment\" spellcheck=\"true\">// redis的版本：org.springframework.data:spring-data-redis:1.8.8.RELEASE</span>\n<span class=\"token comment\" spellcheck=\"true\">// lombok的版本：org.projectlombok:lombok:1.18.6 </span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 标识springBoot启动时会扫描该类并创建实例放入spring容器</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token comment\" spellcheck=\"true\">// 引入lombokjar包，才能使用的注解</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DistributedLock</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String LOCK_PREFIX <span class=\"token operator\">=</span> <span class=\"token string\">\"REDIS_LOCK_\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//加锁失效时间，单位:秒</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> LOCK_EXPIRE <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 此处注入的RedisTemplate实例信息，可以查看Redis与SpringBoot融合这篇工具类博客</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 文章地址：https://carefulhuo.github.io/posts/c51e64d0/</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    RedisTemplate redisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 尝试获取分布式锁\n     *\n     * @param lockKey    锁\n     * @param requestId  请求标识\n     * @return 是否获取成功\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span>String lockKey<span class=\"token punctuation\">,</span> String requestId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}开始加锁,requestId:{}\"</span><span class=\"token punctuation\">,</span> lockKey<span class=\"token punctuation\">,</span> requestId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String lock <span class=\"token operator\">=</span> LOCK_PREFIX <span class=\"token operator\">+</span> lockKey<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 利用lambda表达式</span>\n        <span class=\"token comment\" spellcheck=\"true\">// setNX英文全称：SET if Not Exists</span>\n        <span class=\"token comment\" spellcheck=\"true\">// setNX含义：如果key存在，设置失败返回0；如果key不存在，设置成功返回1</span>\n        <span class=\"token comment\" spellcheck=\"true\">// setNX方法：原子性的，但是该命令不能设置超时时间</span>\n        <span class=\"token comment\" spellcheck=\"true\">// expire方法：设置超时时间，防止死锁</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 注意其中的RedisCallback，当redis有多个实例时，数据进行主从同步时，但主redis挂掉，随机选择一个从redis作为主redis时，不会发生多个请求获取到锁。</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 原理如下：加锁时，会向多半的节点发送setNX命令，如果多半节点成功，则算加锁成功，那么释放锁的时候，需要想所有节点发送del命令</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RedisCallback<span class=\"token punctuation\">)</span> connection <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">setNX</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestId<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LOCK_EXPIRE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 释放分布式锁\n     *\n     * @param lockKey   锁\n     * @param requestId 请求标识\n     * @return 是否释放成功\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">releaseLock</span><span class=\"token punctuation\">(</span>String lockKey<span class=\"token punctuation\">,</span> String requestId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}开始释放锁,requestId:{}\"</span><span class=\"token punctuation\">,</span> lockKey<span class=\"token punctuation\">,</span> requestId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String lock <span class=\"token operator\">=</span> LOCK_PREFIX <span class=\"token operator\">+</span> lockKey<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> String script <span class=\"token operator\">=</span> <span class=\"token string\">\"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end \"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// eval命令的参数(lua脚本,返回类型,脚本的参数个数,redis的key,redis的value)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// redis执行lua脚本是原子性的</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RedisCallback<span class=\"token punctuation\">)</span> connection <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ReturnType<span class=\"token punctuation\">.</span>BOOLEAN <span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span>Charset<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestId<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span>Charset<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-lua\"><code class=\"language-lua\"><span class=\"token comment\" spellcheck=\"true\">-- 上述释放redis锁需要redis执行的lua脚本</span>\n<span class=\"token comment\" spellcheck=\"true\">-- 代码含义：</span>\n<span class=\"token comment\" spellcheck=\"true\">-- if 中的比较如果是true , 那么 执行 del 并返回del结果；如果 if 结果为false 直接返回 0 。</span>\n<span class=\"token keyword\">if</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> \n    <span class=\"token keyword\">then</span> \n        <span class=\"token keyword\">return</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'del'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">else</span> \n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> \n<span class=\"token keyword\">end</span>\n</code></pre>\n","comments":true,"link":"","tags":[{"name":"Tools","slug":"Tools","permalink":"https://carefulhuo.github.io/tags/Tools/"}]},{"title":"SpringBoot配置及加载Mybatis","date":"2020-12-23T06:53:11.000Z","path":"posts/d2273db3.html","text":"Mybatis与springBoot的融合 /** 博主使用的springBoot版本为1.5.8.RELEASE @Configuration注解标识该类为一个配置文件 @MapperScan注解属性： 1. basePackages可以设置多个mapper.xml所在的全限定包名 2. annotationClass = Mapper.class (过滤的作用，只有包含注解的mybatis接口才会被扫描进去，一般不用) 3. sqlSessionFactoryRef=\"xxxSqlSessionFactory\" 4. sqlSessionTemplateRef = \"xxxSqlSessionTemplate\" 注意： 其中3,4属性在使用的时候，可以只保留3的属性，不需要3,4两个属性全都注入， 原因如下： 1. 我们注入的sqlSessionFactory最后在SqlSessionDaoSupport.setSqlSessionFactory被使用，并且内建了一个sqlSessionTemplate对象 2. 如果我们上面的注解是sqlSessionTemplateRef，那么会走SqlSessionDaoSupport.setSqlSessionTemplate 3. 如果两个注解都有，优先使用sqlSessionTemplateRef */ @Configuration @MapperScan(basePackages = {RdsDataSourceConfig.PACKAGE}, sqlSessionFactoryRef = \"rdsSqlSessionFactory\") public class RdsDataSourceConfig { static final String PACKAGE = \"xxxMapper.xml的所在路径(全限定包名)\"; static final String MAPPER_LOCATION = \"classpath:sqlmap/rds/*Mapper.xml(一般位于resource路径下)\"; static final String CONFIG_LOCATION = \"classpath:sqlmap/mybatis-config.xml(一般位于resource路径下)\"; // 读取数据源配置属性，生成DruidDataSource对象 @ConfigurationProperties(prefix = \"application.yml文件中的数据源配置信息地址\") @Bean(name = \"自定义bean名称(建议与方法名一致)\") public DruidDataSource rdsDruidDataSource() { return new DruidDataSource(); } // springBoot中的事务管理器 // 1. spring-boot-starter-jdbc 依赖，框架默认注入DataSourceTransactionManager 实例。 // 2. spring-boot-starter-data-jpa 依赖，框架会默认注入 JpaTransactionManager 实例。 @Bean(name = \"自定义bean名称(建议与方法名一致)\") public DataSourceTransactionManager rdsTransactionManager() throws SQLException { return new DataSourceTransactionManager(rdsDruidDataSource()); } // 1. mybatis设置 // 生成SqlSessionFactory对象 @Bean(name = \"自定义bean名称(建议与方法名一致)\") @Primary // 优先注入的意思 public SqlSessionFactory rdsSqlSessionFactory( @Qualifier(\"rdsDruidDataSource\") DataSource dataSource) throws Exception { final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean(); // SqlSessionFactory设置数据源信息 sessionFactory.setDataSource(dataSource); // SqlSessionFactory设置需要被扫描到的Mapper所在路径(全限定包名) sessionFactory.setMapperLocations( new PathMatchingResourcePatternResolver().getResources(MAPPER_LOCATION)); // SqlSessionFactory设置mybatis的配置信息 sessionFactory.setConfigLocation(new PathMatchingResourcePatternResolver().getResource(CONFIG_LOCATION)); // SqlSessionFactory设置返回结果为map集合时，字段名由下划线转换为驼峰 sessionFactory.setObjectWrapperFactory(new MapWrapperFactory()); // 返回设置好的SqlSessionFactory对象 return sessionFactory.getObject(); } // 2. jdbcTemble设置 // 是spring对 jdbc操作数据库进行的封装，使得开发者可以直接在java文件中 编写sql，无需配置xml文件。 @Bean(name = \"自定义bean名称(建议与方法名一致)\") public JdbcTemplate rdsJdbcTemplate( @Qualifier(\"rdsDruidDataSource\") DataSource dataSource) { return new JdbcTemplate(dataSource); } } // mybatis进行驼峰转换涉及的MapWrapperFactory类 public class MapWrapperFactory implements ObjectWrapperFactory { @Override public boolean hasWrapperFor(Object object) { return object != null &amp;&amp; object instanceof Map; } @Override public ObjectWrapper getWrapperFor(MetaObject metaObject, Object object) { return new CameCaseMapWrapper(metaObject, (Map) object); } } // mybatis进行驼峰转换涉及的CameCaseMapWrapper类 public class CameCaseMapWrapper extends MapWrapper { public CameCaseMapWrapper(MetaObject metaObject, Map&lt;String, Object> map) { super(metaObject, map); } @Override public String findProperty(String name, boolean useCamelCaseMapping) { if (useCamelCaseMapping) { return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, name); } return name; } } &lt;!-- mybatis-config.xml的参数配置 --> &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"> &lt;configuration> &lt;!-- 全局参数 --> &lt;settings> &lt;!-- 使全局的映射器启用或禁用缓存。 --> &lt;setting name=\"cacheEnabled\" value=\"true\"/> &lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 --> &lt;setting name=\"lazyLoadingEnabled\" value=\"true\"/> &lt;!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 --> &lt;setting name=\"aggressiveLazyLoading\" value=\"true\"/> &lt;!-- 是否允许单条sql 返回多个数据集 (取决于驱动的兼容性) default:true --> &lt;setting name=\"multipleResultSetsEnabled\" value=\"true\"/> &lt;!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true --> &lt;setting name=\"useColumnLabel\" value=\"true\"/> &lt;!-- 允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。 default:false --> &lt;setting name=\"useGeneratedKeys\" value=\"true\"/> &lt;!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不隐射 PARTIAL:部分 FULL:全部 --> &lt;setting name=\"autoMappingBehavior\" value=\"PARTIAL\"/> &lt;!-- 这是默认的执行类型 （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新） --> &lt;setting name=\"defaultExecutorType\" value=\"SIMPLE\"/> &lt;!-- 使用驼峰命名法转换字段。 --> &lt;setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/> &lt;!-- 设置本地缓存范围 session:就会有数据的共享 statement:语句范围 (这样就不会有数据的共享 ) defalut:session --> &lt;setting name=\"localCacheScope\" value=\"SESSION\"/> &lt;!-- 设置但JDBC类型为空时,某些驱动程序 要指定值,default:OTHER，插入空值时不需要指定类型 --> &lt;setting name=\"jdbcTypeForNull\" value=\"NULL\"/> &lt;setting name=\"callSettersOnNulls\" value=\"true\"/> &lt;/settings> &lt;/configuration> 注意1.mybatis框架主要是围绕着SqlSessionFactory进行的，创建过程大概如下： (1)、定义一个Configuration对象，其中包含数据源、事务、mapper文件资源以及影响数据库行为属性设置settings (2)、通过配置对象，则可以创建一个SqlSessionFactoryBuilder对象 (3)、通过 SqlSessionFactoryBuilder 获得SqlSessionFactory 的实例。 (4)、SqlSessionFactory 的实例可以获得操作数据的SqlSession实例，通过这个实例对数据库进行操作 文章借鉴处 https://blog.csdn.net/u013412772/article/details/73648537","content":"<p>Mybatis与springBoot的融合</p>\n<span id=\"more\"></span>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n 博主使用的springBoot版本为1.5.8.RELEASE\n @Configuration注解标识该类为一个配置文件\n @MapperScan注解属性：\n    1. basePackages可以设置多个mapper.xml所在的全限定包名\n    2. annotationClass = Mapper.class (过滤的作用，只有包含注解的mybatis接口才会被扫描进去，一般不用)\n    3. sqlSessionFactoryRef=\"xxxSqlSessionFactory\"\n    4. sqlSessionTemplateRef = \"xxxSqlSessionTemplate\"\n    注意： 其中3,4属性在使用的时候，可以只保留3的属性，不需要3,4两个属性全都注入，\n    原因如下：\n    1. 我们注入的sqlSessionFactory最后在SqlSessionDaoSupport.setSqlSessionFactory被使用，并且内建了一个sqlSessionTemplate对象\n    2. 如果我们上面的注解是sqlSessionTemplateRef，那么会走SqlSessionDaoSupport.setSqlSessionTemplate\n    3. 如果两个注解都有，优先使用sqlSessionTemplateRef\n*/</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>RdsDataSourceConfig<span class=\"token punctuation\">.</span>PACKAGE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        sqlSessionFactoryRef <span class=\"token operator\">=</span> <span class=\"token string\">\"rdsSqlSessionFactory\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RdsDataSourceConfig</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String PACKAGE <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxMapper.xml的所在路径(全限定包名)\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String MAPPER_LOCATION <span class=\"token operator\">=</span> <span class=\"token string\">\"classpath:sqlmap/rds/*Mapper.xml(一般位于resource路径下)\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String CONFIG_LOCATION <span class=\"token operator\">=</span> <span class=\"token string\">\"classpath:sqlmap/mybatis-config.xml(一般位于resource路径下)\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 读取数据源配置属性，生成DruidDataSource对象</span>\n    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"application.yml文件中的数据源配置信息地址\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"自定义bean名称(建议与方法名一致)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> DruidDataSource <span class=\"token function\">rdsDruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// springBoot中的事务管理器</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 1. spring-boot-starter-jdbc 依赖，框架默认注入DataSourceTransactionManager 实例。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 2.  spring-boot-starter-data-jpa 依赖，框架会默认注入 JpaTransactionManager 实例。</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"自定义bean名称(建议与方法名一致)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> DataSourceTransactionManager <span class=\"token function\">rdsTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> SQLException <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSourceTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">rdsDruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 1. mybatis设置</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 生成SqlSessionFactory对象</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"自定义bean名称(建议与方法名一致)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Primary</span> <span class=\"token comment\" spellcheck=\"true\">// 优先注入的意思</span>\n    <span class=\"token keyword\">public</span> SqlSessionFactory <span class=\"token function\">rdsSqlSessionFactory</span><span class=\"token punctuation\">(</span>\n            <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rdsDruidDataSource\"</span><span class=\"token punctuation\">)</span> DataSource dataSource<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> SqlSessionFactoryBean sessionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// SqlSessionFactory设置数据源信息</span>\n        sessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// SqlSessionFactory设置需要被扫描到的Mapper所在路径(全限定包名)</span>\n        sessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperLocations</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span>MAPPER_LOCATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// SqlSessionFactory设置mybatis的配置信息</span>\n        sessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setConfigLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PathMatchingResourcePatternResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>CONFIG_LOCATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// SqlSessionFactory设置返回结果为map集合时，字段名由下划线转换为驼峰</span>\n        sessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectWrapperFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MapWrapperFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 返回设置好的SqlSessionFactory对象</span>\n        <span class=\"token keyword\">return</span> sessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 2. jdbcTemble设置</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 是spring对 jdbc操作数据库进行的封装，使得开发者可以直接在java文件中 编写sql，无需配置xml文件。</span>\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"自定义bean名称(建议与方法名一致)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> JdbcTemplate <span class=\"token function\">rdsJdbcTemplate</span><span class=\"token punctuation\">(</span>\n            <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rdsDruidDataSource\"</span><span class=\"token punctuation\">)</span> DataSource dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// mybatis进行驼峰转换涉及的MapWrapperFactory类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapWrapperFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ObjectWrapperFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasWrapperFor</span><span class=\"token punctuation\">(</span>Object object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> object <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> ObjectWrapper <span class=\"token function\">getWrapperFor</span><span class=\"token punctuation\">(</span>MetaObject metaObject<span class=\"token punctuation\">,</span> Object object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CameCaseMapWrapper</span><span class=\"token punctuation\">(</span>metaObject<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// mybatis进行驼峰转换涉及的CameCaseMapWrapper类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CameCaseMapWrapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MapWrapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CameCaseMapWrapper</span><span class=\"token punctuation\">(</span>MetaObject metaObject<span class=\"token punctuation\">,</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>metaObject<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">findProperty</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> useCamelCaseMapping<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useCamelCaseMapping<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> CaseFormat<span class=\"token punctuation\">.</span>UPPER_UNDERSCORE<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>CaseFormat<span class=\"token punctuation\">.</span>LOWER_CAMEL<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- mybatis-config.xml的参数配置 --></span>\n<span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n\n<span class=\"token doctype\">&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 全局参数 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 使全局的映射器启用或禁用缓存。 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cacheEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lazyLoadingEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aggressiveLazyLoading<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 是否允许单条sql 返回多个数据集  (取决于驱动的兼容性) default:true --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>multipleResultSetsEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>useColumnLabel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。  default:false  --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>useGeneratedKeys<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不隐射　PARTIAL:部分  FULL:全部  --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>autoMappingBehavior<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>PARTIAL<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 这是默认的执行类型  （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新）  --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>defaultExecutorType<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SIMPLE<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 使用驼峰命名法转换字段。 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mapUnderscoreToCamelCase<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 设置本地缓存范围 session:就会有数据的共享  statement:语句范围 (这样就不会有数据的共享 ) defalut:session --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>localCacheScope<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SESSION<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 设置但JDBC类型为空时,某些驱动程序 要指定值,default:OTHER，插入空值时不需要指定类型 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>jdbcTypeForNull<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>NULL<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>callSettersOnNulls<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<hr>\n<p><strong>注意</strong><br>1.mybatis框架主要是围绕着SqlSessionFactory进行的，创建过程大概如下：</p>\n<p>(1)、定义一个Configuration对象，其中包含数据源、事务、mapper文件资源以及影响数据库行为属性设置settings</p>\n<p>(2)、通过配置对象，则可以创建一个SqlSessionFactoryBuilder对象</p>\n<p>(3)、通过 SqlSessionFactoryBuilder 获得SqlSessionFactory 的实例。</p>\n<p>(4)、SqlSessionFactory 的实例可以获得操作数据的SqlSession实例，通过这个实例对数据库进行操作</p>\n<hr>\n<p><strong>文章借鉴处</strong></p>\n<ul>\n<li><a href=\"https://blog.csdn.net/u013412772/article/details/73648537\">https://blog.csdn.net/u013412772/article/details/73648537</a></li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"Tools","slug":"Tools","permalink":"https://carefulhuo.github.io/tags/Tools/"}]},{"title":"deploy插件的使用","date":"2020-12-16T13:16:24.000Z","path":"posts/d4eda90d.html","text":"deploy插件的使用第一种方式 项目引用maven之后，通过idea的侧边栏直接使用，具体位置如图所示： 此时项目中的pom文件配置如下图所示： 此时就可以上传jar包到指定的仓库 注意：使用该种方式如果出现下面的报错，可以使用第二种方式 Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy (default-deploy) on project mdb-board: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in -DaltDeploymentRepository=id::layout::url parameter -> [Help 1] 第二种方式 打开cmd(命令提示符)(本人是win10，搞不起高大上的mbp)，进入到需上传jar的所在位置，一般位于项目的target目录下 然后执行如下代码所示的maven命令即可，mvn deploy:deploy-file -DgroupId=com.ai.chinapost.crm.mdb -DartifactId=mdb-board-facade -Dversion=1.0.0-SNAPSHOT -Dpacckaging=jar -Dfile=mdb-board-facade-1.0.0-SNAPSHOT.jar -DrepositoryId=nexus-snapshots-level-1 -Durl=http://IP地址/nexus/content/repositories/bj-crm-snapshots/ DgroupId、DartifactId、Dversion、Dpacckaging要跟项目的pom文件保持一致，否则会有问题； Dfile直接写文件名即可，如果不在同一个目录下，需要在file后面写上文件的绝对路径。 DrepositoryId写仓库标识id， Durl写私服的仓库地址，一般可以通过maven的setting.xml或者打开nexus-&gt;repositories菜单，可以看到该路径。 注意 使用第二种方式有如下报错的解决方案： 第一个问题 Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy-file (default-cli) on project standalone-pom: Failed to deploy artifacts: Could not transfer artifact com.zhenai.dakehu:dakehu-commons:jar:1.0.0-20171212.105921-1 from/to maven-snapshots (http://112.124.33.150:8081/repository/maven-snapshots/): Failed to transfer file: http://112.124.33.150:8081/repository/maven-snapshots/com/zhenai/dakehu/dakehu-commons/1.0.0-SNAPSHOT/dakehu-commons-1.0.0-20171212.105921-1.jar. neuxs 帐号密码是否正确 maven setting.xml 中仓库认证的 id 不对 maven-snapshots // ===》这个必须和 nexus DrepositoryId 对应的仓库标识(id)一致 第二个问题Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy-file (default-cli) on project standalone-pom: Cannot deploy artifact from the local repository: D:\\Program Files\\maven\\apache-maven-3.5.2-bin\\repository\\com\\ai\\chinapost\\crm\\mdb\\mdb-board-facade\\1.0.0-SNAPSHOT\\mdb-board-facade-1.0.0-SNAPSHOT.jar -> [Help 1] jar包的位置不对，不能在本地仓库直接上传jar包到仓库，需要修改jar包到项目的target目录下 小知识： maven package：打包到本项目，一般是在项目target目录下。 maven install：打包会安装到本地仓库。","content":"<h4 id=\"deploy插件的使用\"><a href=\"#deploy插件的使用\" class=\"headerlink\" title=\"deploy插件的使用\"></a>deploy插件的使用</h4><h5 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h5><span id=\"more\"></span>\n<ol>\n<li>项目引用maven之后，通过idea的侧边栏直接使用，具体位置如图所示：<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/deploy_01.png\"></li>\n<li>此时项目中的pom文件配置如下图所示：<img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/deploy_02.png\"></li>\n<li>此时就可以上传jar包到指定的仓库</li>\n</ol>\n<hr>\n<p><strong>注意</strong>：使用该种方式如果出现下面的报错，可以使用第二种方式</p>\n<pre class=\" language-java\"><code class=\"language-java\">Failed to execute goal org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>maven<span class=\"token punctuation\">.</span>plugins<span class=\"token operator\">:</span>maven<span class=\"token operator\">-</span>deploy<span class=\"token operator\">-</span>plugin<span class=\"token operator\">:</span><span class=\"token number\">2.8</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token function\">deploy</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token operator\">-</span>deploy<span class=\"token punctuation\">)</span> on project mdb<span class=\"token operator\">-</span>board<span class=\"token operator\">:</span> Deployment failed<span class=\"token operator\">:</span> repository element was not specified in the POM inside distributionManagement element or in <span class=\"token operator\">-</span>DaltDeploymentRepository<span class=\"token operator\">=</span>id<span class=\"token operator\">:</span><span class=\"token operator\">:</span>layout<span class=\"token operator\">:</span><span class=\"token operator\">:</span>url parameter <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>Help <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h5 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h5><ol>\n<li>打开cmd(命令提示符)(本人是win10，搞不起高大上的mbp)，进入到需上传jar的所在位置，一般位于项目的target目录下</li>\n<li>然后执行如下代码所示的maven命令即可，<pre class=\" language-java\"><code class=\"language-java\">mvn deploy<span class=\"token operator\">:</span>deploy<span class=\"token operator\">-</span>file \n<span class=\"token operator\">-</span>DgroupId<span class=\"token operator\">=</span>com<span class=\"token punctuation\">.</span>ai<span class=\"token punctuation\">.</span>chinapost<span class=\"token punctuation\">.</span>crm<span class=\"token punctuation\">.</span>mdb \n<span class=\"token operator\">-</span>DartifactId<span class=\"token operator\">=</span>mdb<span class=\"token operator\">-</span>board<span class=\"token operator\">-</span>facade \n<span class=\"token operator\">-</span>Dversion<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>SNAPSHOT \n<span class=\"token operator\">-</span>Dpacckaging<span class=\"token operator\">=</span>jar \n<span class=\"token operator\">-</span>Dfile<span class=\"token operator\">=</span>mdb<span class=\"token operator\">-</span>board<span class=\"token operator\">-</span>facade<span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>SNAPSHOT<span class=\"token punctuation\">.</span>jar \n<span class=\"token operator\">-</span>DrepositoryId<span class=\"token operator\">=</span>nexus<span class=\"token operator\">-</span>snapshots<span class=\"token operator\">-</span>level<span class=\"token operator\">-</span><span class=\"token number\">1</span> \n<span class=\"token operator\">-</span>Durl<span class=\"token operator\">=</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>IP地址<span class=\"token operator\">/</span>nexus<span class=\"token operator\">/</span>content<span class=\"token operator\">/</span>repositories<span class=\"token operator\">/</span>bj<span class=\"token operator\">-</span>crm<span class=\"token operator\">-</span>snapshots<span class=\"token operator\">/</span>\n</code></pre>\n</li>\n</ol>\n<ul>\n<li>DgroupId、DartifactId、Dversion、Dpacckaging要跟项目的pom文件保持一致，否则会有问题；</li>\n<li>Dfile直接写文件名即可，如果不在同一个目录下，需要在file后面写上文件的绝对路径。</li>\n<li>DrepositoryId写仓库标识id，</li>\n<li>Durl写私服的仓库地址，一般可以通过maven的setting.xml或者打开nexus-&gt;repositories菜单，可以看到该路径。</li>\n</ul>\n<p><strong>注意</strong> 使用第二种方式有如下报错的解决方案：</p>\n<ol>\n<li>第一个问题<pre class=\" language-java\"><code class=\"language-java\"> Failed to execute goal org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>maven<span class=\"token punctuation\">.</span>plugins<span class=\"token operator\">:</span>maven<span class=\"token operator\">-</span>deploy<span class=\"token operator\">-</span>plugin<span class=\"token operator\">:</span><span class=\"token number\">2.7</span><span class=\"token operator\">:</span>deploy<span class=\"token operator\">-</span><span class=\"token function\">file</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token operator\">-</span>cli<span class=\"token punctuation\">)</span> on project standalone<span class=\"token operator\">-</span>pom<span class=\"token operator\">:</span> Failed to deploy artifacts<span class=\"token operator\">:</span> Could not transfer artifact com<span class=\"token punctuation\">.</span>zhenai<span class=\"token punctuation\">.</span>dakehu<span class=\"token operator\">:</span>dakehu<span class=\"token operator\">-</span>commons<span class=\"token operator\">:</span>jar<span class=\"token operator\">:</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">20171212.105921</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> from<span class=\"token operator\">/</span>to maven<span class=\"token operator\">-</span><span class=\"token function\">snapshots</span> <span class=\"token punctuation\">(</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">112.124</span><span class=\"token punctuation\">.</span><span class=\"token number\">33.150</span><span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>repository<span class=\"token operator\">/</span>maven<span class=\"token operator\">-</span>snapshots<span class=\"token operator\">/</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Failed to transfer file<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">112.124</span><span class=\"token punctuation\">.</span><span class=\"token number\">33.150</span><span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>repository<span class=\"token operator\">/</span>maven<span class=\"token operator\">-</span>snapshots<span class=\"token operator\">/</span>com<span class=\"token operator\">/</span>zhenai<span class=\"token operator\">/</span>dakehu<span class=\"token operator\">/</span>dakehu<span class=\"token operator\">-</span>commons<span class=\"token operator\">/</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>SNAPSHOT<span class=\"token operator\">/</span>dakehu<span class=\"token operator\">-</span>commons<span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">20171212.105921</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>jar<span class=\"token punctuation\">.</span>\n</code></pre>\n</li>\n</ol>\n<ul>\n<li><p>neuxs 帐号密码是否正确</p>\n</li>\n<li><p>maven setting.xml 中仓库认证的 id 不对</p>\n</li>\n<li><p><id>maven-snapshots</id> // ===》这个必须和 nexus DrepositoryId 对应的仓库标识(id)一致</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>第二个问题<pre class=\" language-java\"><code class=\"language-java\">Failed to execute goal org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>maven<span class=\"token punctuation\">.</span>plugins<span class=\"token operator\">:</span>maven<span class=\"token operator\">-</span>deploy<span class=\"token operator\">-</span>plugin<span class=\"token operator\">:</span><span class=\"token number\">2.7</span><span class=\"token operator\">:</span>deploy<span class=\"token operator\">-</span><span class=\"token function\">file</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token operator\">-</span>cli<span class=\"token punctuation\">)</span> on project standalone<span class=\"token operator\">-</span>pom<span class=\"token operator\">:</span> Cannot deploy artifact from the local repository<span class=\"token operator\">:</span> D<span class=\"token operator\">:</span>\\Program Files\\maven\\apache<span class=\"token operator\">-</span>maven<span class=\"token operator\">-</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token operator\">-</span>bin\\repository\\com\\ai\\chinapost\\crm\\mdb\\mdb<span class=\"token operator\">-</span>board<span class=\"token operator\">-</span>facade\\<span class=\"token number\">1.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>SNAPSHOT\\mdb<span class=\"token operator\">-</span>board<span class=\"token operator\">-</span>facade<span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>SNAPSHOT<span class=\"token punctuation\">.</span>jar <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>Help <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</code></pre>\n</li>\n</ol>\n<ul>\n<li>jar包的位置不对，不能在本地仓库直接上传jar包到仓库，需要修改jar包到项目的target目录下</li>\n</ul>\n<hr>\n<p><strong>小知识</strong>：</p>\n<ul>\n<li>maven package：打包到本项目，一般是在项目target目录下。</li>\n<li>maven install：打包会安装到本地仓库。</li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"Maven","slug":"Maven","permalink":"https://carefulhuo.github.io/tags/Maven/"}]},{"title":"AES加密及解密","date":"2020-12-08T08:52:35.000Z","path":"posts/5498b849.html","text":"AES加密及解密(请注意方法说明和方法使用) public class AesUtil { static { Security.addProvider(new BouncyCastleProvider()); } private static final String ALGORITHM = \"AES/ECB/PKCS7Padding\"; /** * AES加密 * * @param content 需加密的字符串 * @param key 密钥 * @return */ public static byte[] encrypt(String content, String key) { try { Cipher cipher = Cipher.getInstance(ALGORITHM); byte[] byteContent = content.getBytes(\"utf-8\"); cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(Base64Utils.decodeFromString(key), \"AES\")); byte[] result = cipher.doFinal(byteContent); return result; } catch (NoSuchPaddingException e) { e.printStackTrace(); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } catch (InvalidKeyException e) { e.printStackTrace(); } catch (IllegalBlockSizeException e) { e.printStackTrace(); } catch (BadPaddingException e) { e.printStackTrace(); } return null; } /** * AES解密 * * @param content 加密后的字节数组 * @param key * @return */ public static byte[] decrypt(byte[] content, String key) { try { SecretKeySpec secretKey = new SecretKeySpec(Base64Utils.decodeFromString(key), \"AES\"); Cipher cipher = Cipher.getInstance(ALGORITHM); cipher.init(Cipher.DECRYPT_MODE, secretKey); byte[] result = cipher.doFinal(content); return result; } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } catch (NoSuchPaddingException e) { e.printStackTrace(); } catch (InvalidKeyException e) { e.printStackTrace(); } catch (IllegalBlockSizeException e) { e.printStackTrace(); } catch (BadPaddingException e) { e.printStackTrace(); } return null; } public static void main(String[] args) { // AES加密 String crm20190608 = Base64Utils.encodeToString(AesUtil.encrypt(\"Crm20190608\", \"lRJKZnfee/7jJbuqGY0U8w==\")); // AES解密 String decryptres = new String(decrypt AesUtil.decrypt(Base64Utils.decodeFromString(crm20190608), \"lRJKZnfee/7jJbuqGY0U8w==\")); } }","content":"<p>AES加密及解密(请注意方法说明和方法使用)</p>\n<span id=\"more\"></span>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AesUtil</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        Security<span class=\"token punctuation\">.</span><span class=\"token function\">addProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BouncyCastleProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String ALGORITHM <span class=\"token operator\">=</span> <span class=\"token string\">\"AES/ECB/PKCS7Padding\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * AES加密\n     *\n     * @param content 需加密的字符串\n     * @param key     密钥\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>String content<span class=\"token punctuation\">,</span> String key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\n            Cipher cipher <span class=\"token operator\">=</span> Cipher<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>ALGORITHM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> byteContent <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>Cipher<span class=\"token punctuation\">.</span>ENCRYPT_MODE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">(</span>Base64Utils<span class=\"token punctuation\">.</span><span class=\"token function\">decodeFromString</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>byteContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchPaddingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchAlgorithmException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvalidKeyException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalBlockSizeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BadPaddingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * AES解密\n     *\n     * @param content 加密后的字节数组\n     * @param key\n     * @return \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> content<span class=\"token punctuation\">,</span> String key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            SecretKeySpec secretKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">(</span>Base64Utils<span class=\"token punctuation\">.</span><span class=\"token function\">decodeFromString</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Cipher cipher <span class=\"token operator\">=</span> Cipher<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>ALGORITHM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>Cipher<span class=\"token punctuation\">.</span>DECRYPT_MODE<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchAlgorithmException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchPaddingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvalidKeyException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalBlockSizeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BadPaddingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// AES加密</span>\n        String crm20190608 <span class=\"token operator\">=</span> Base64Utils<span class=\"token punctuation\">.</span><span class=\"token function\">encodeToString</span><span class=\"token punctuation\">(</span>AesUtil<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Crm20190608\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lRJKZnfee/7jJbuqGY0U8w==\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// AES解密</span>\n        String decryptres <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>decrypt AesUtil<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>Base64Utils<span class=\"token punctuation\">.</span><span class=\"token function\">decodeFromString</span><span class=\"token punctuation\">(</span>crm20190608<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lRJKZnfee/7jJbuqGY0U8w==\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","comments":true,"link":"","tags":[{"name":"Tools","slug":"Tools","permalink":"https://carefulhuo.github.io/tags/Tools/"}]},{"title":"生成哈希值","date":"2020-12-08T08:38:57.000Z","path":"posts/b2a9e1a0.html","text":"生成哈希值 // 哈希函数/散列算法 // 根据某个值进行hash值计算，确保唯一性 public class HashUtils { private static final String ALGORITHM = \"SHA-256\"; public static String sha256Hex(byte[] bytes){ MessageDigest messageDigest; String encodeStr = \"\"; try { messageDigest = MessageDigest.getInstance(ALGORITHM); messageDigest.update(bytes); encodeStr = byte2Hex(messageDigest.digest()); } catch (NoSuchAlgorithmException e) { log.error(\"未知的hash算法{}\", ALGORITHM); } return encodeStr; } private static String byte2Hex(byte[] bytes){ StringBuffer stringBuffer = new StringBuffer(); String temp = null; for (int i=0;i&lt;bytes.length;i++){ temp = Integer.toHexString(bytes[i] &amp; 0xFF); if (temp.length()==1){ //1得到一位的进行补0操作 stringBuffer.append(\"0\"); } stringBuffer.append(temp); } return stringBuffer.toString(); } }","content":"<p>生成哈希值</p>\n<span id=\"more\"></span>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 哈希函数/散列算法</span>\n<span class=\"token comment\" spellcheck=\"true\">// 根据某个值进行hash值计算，确保唯一性</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashUtils</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String ALGORITHM <span class=\"token operator\">=</span> <span class=\"token string\">\"SHA-256\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> String <span class=\"token function\">sha256Hex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        MessageDigest messageDigest<span class=\"token punctuation\">;</span>\n        String encodeStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            messageDigest <span class=\"token operator\">=</span> MessageDigest<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>ALGORITHM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            messageDigest<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            encodeStr <span class=\"token operator\">=</span> <span class=\"token function\">byte2Hex</span><span class=\"token punctuation\">(</span>messageDigest<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchAlgorithmException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未知的hash算法{}\"</span><span class=\"token punctuation\">,</span> ALGORITHM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> encodeStr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> String <span class=\"token function\">byte2Hex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        StringBuffer stringBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String temp <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            temp <span class=\"token operator\">=</span> Integer<span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//1得到一位的进行补0操作</span>\n                stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","comments":true,"link":"","tags":[{"name":"Tools","slug":"Tools","permalink":"https://carefulhuo.github.io/tags/Tools/"}]},{"title":"Mysql中的索引","date":"2020-12-08T08:07:12.000Z","path":"posts/dedbcdc9.html","text":"为什么会出现索引索引的出现是为了提高数据查询的效率，就像书的目录一样 索引的常见模型哈希表哈希表是一种以键-值(key-value)存储数据的结构，我们只需要输入待查找的键即key，就可以找到对应的value值。哈希的思路很简单，把值放到数组里面，用一个哈希函数把key换算成一个确定的位置，然后把value值放入数组的这个位置。但是，多个key经过哈希函数计算会出现同一个值的情况，处理这种情况的方法其中一种是拉出一个链表，跟Java中的ArrayList集合有点类似。图上的user_id都不是递增的，这样做的好处是增加数据的时候很快，但是缺点是不是有序的，通过哈希查询区间数据的时候，是很慢的，因为你需要把全表都扫描一遍，所以哈希表适用等值查询的场景，比如一些适用NOSQL引擎的数据库(Memcached) 有序数组有序数组在等值查询和范围查询场景中的能力是非常优秀的，假设图中的user_id都是不重复，那么数据在表内存储的时候都是有序的，按照身份证号进行递增排序，此时根据user_id查询对应的名字，通过二分法可以快速找到，时间复杂度为O(log(N))；而且对于范围查询也是支持的，对于查询[user_id_x,user_id_y]区间的user，通过二分法找到第一个大于id_card_x的id，然后向右遍历，找到第一个大于user_id_y的id,退出循环即可。仅仅看查询效率的话，有序数组是最好的数据结构，但是更新数据的时候，往中间插入一个数据，需要移动的数据太多，效率很差。所以有序数组只适用于静态数据引擎，所谓静态数据，也就是不会再修改的数据。 二叉搜索树二叉搜索树的特点是父子节点左边的值小于父子节点，右边的值大于父子节点，如图所示，如果要查询id_card_2的值，按照顺序就是UserA -&gt; UserC -&gt; UserF -&gt; User2 这个路径得到。这个时间复杂度是 O(log(N))。为了维持这个时间复杂度，就必须是平衡二叉树，为了这个平衡二叉树，更新的时间复杂度也是O(log(N))。那么树可以有二叉，就可以有多叉。多叉树表示一个父节点有多个子节点，子节点的大小从左到右依次是递增的。二叉树的搜索效率是最高的，但是实际上大多数数据库引擎却不用它，是因为索引不光存储在内存中,还存储在硬盘上，如果数据越来越多，则意味着二叉树的树高也就越来越大，一次查询就可能访问磁盘中很多个数据块，为了减少磁盘中数据块的访问次数，可以使用N叉树 注意N叉树的这个N取决于数据块的大小，在Innodb模型中，一个整数字段索引的N大约是1200(MySql默认一个节点的长度为16K，一个整数（bigint）字段索引的长度为 8B,另外每个索引还跟着6B的指向其子树的指针；所以16K/14B ≈ 1170),那么树高为4的时候，可以存储1200的3次方个值，而且树根的值总是存储在内存中，那么最多需要查询三次数据块就行了。N叉树因为读写性能的优势和适配磁盘的访问模式，被广泛应用于数据库的引擎设计 Innodb索引模型在Mysql中，索引和事务一样都是在存储引擎层实现的，所以没有统一的索引标准，即不同存储引擎的索引的工作方式是不一样的，而且即使多个存储引擎使用同一个类型的索引，那么索引的底层实现也可能是不一样的。那么Innodb的索引模型是B+树，为什么上面在说N叉树的时候，已经说了，下面专门说Innodb的索引模型","content":"<h4 id=\"为什么会出现索引\"><a href=\"#为什么会出现索引\" class=\"headerlink\" title=\"为什么会出现索引\"></a>为什么会出现索引</h4><p>索引的出现是为了提高数据查询的效率，就像书的目录一样</p>\n<span id=\"more\"></span>\n<h4 id=\"索引的常见模型\"><a href=\"#索引的常见模型\" class=\"headerlink\" title=\"索引的常见模型\"></a>索引的常见模型</h4><h5 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h5><p>哈希表是一种以键-值(key-value)存储数据的结构，我们只需要输入待查找的键即key，就可以找到对应的value值。哈希的思路很简单，把值放到数组里面，用一个哈希函数把key换算成一个确定的位置，然后把value值放入数组的这个位置。但是，多个key经过哈希函数计算会出现同一个值的情况，处理这种情况的方法其中一种是拉出一个链表，跟Java中的ArrayList集合有点类似。<br><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/mysqlOfIndex_01.png\" alt=\"哈希示意图\"><br>图上的user_id都不是递增的，这样做的好处是增加数据的时候很快，但是缺点是不是有序的，通过哈希查询区间数据的时候，是很慢的，因为你需要把全表都扫描一遍，所以<strong>哈希表适用等值查询</strong>的场景，比如一些适用NOSQL引擎的数据库(Memcached)</p>\n<h5 id=\"有序数组\"><a href=\"#有序数组\" class=\"headerlink\" title=\"有序数组\"></a>有序数组</h5><p><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/mysqlOfindex_02.png\" alt=\"有序数组示意图\"><br>有序数组在等值查询和范围查询场景中的能力是非常优秀的，<br>假设图中的user_id都是不重复，那么数据在表内存储的时候都是有序的，按照身份证号进行递增排序，此时根据user_id查询对应的名字，通过二分法可以快速找到，时间复杂度为O(log(N))；而且对于范围查询也是支持的，对于查询[user_id_x,user_id_y]区间的user，通过二分法找到第一个大于id_card_x的id，然后向右遍历，找到第一个大于user_id_y的id,退出循环即可。<br>仅仅看查询效率的话，有序数组是最好的数据结构，但是更新数据的时候，往中间插入一个数据，需要移动的数据太多，效率很差。所以<strong>有序数组只适用于静态数据引擎</strong>，所谓静态数据，也就是不会再修改的数据。</p>\n<h5 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h5><p><img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/mysqlOfIndex_03.png\" alt=\"二叉搜索树示意图\"><br>二叉搜索树的特点是父子节点左边的值小于父子节点，右边的值大于父子节点，<br>如图所示，如果要查询id_card_2的值，按照顺序就是UserA -&gt; UserC -&gt; UserF -&gt; User2 这个路径得到。这个时间复杂度是 O(log(N))。为了维持这个时间复杂度，就必须是平衡二叉树，为了这个平衡二叉树，更新的时间复杂度也是O(log(N))。那么树可以有二叉，就可以有多叉。多叉树表示一个父节点有多个子节点，子节点的大小从左到右依次是递增的。<strong>二叉树的搜索效率是最高的，但是实际上大多数数据库引擎却不用它，是因为索引不光存储在内存中,还存储在硬盘上，如果数据越来越多，则意味着二叉树的树高也就越来越大，一次查询就可能访问磁盘中很多个数据块，为了减少磁盘中数据块的访问次数，可以使用N叉树</strong></p>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>N叉树的这个N取决于数据块的大小，在Innodb模型中，一个整数字段索引的N大约是1200(MySql默认一个节点的长度为16K，一个整数（bigint）字段索引的长度为 8B,另外每个索引还跟着6B的指向其子树的指针；所以16K/14B ≈ 1170),那么树高为4的时候，可以存储1200的3次方个值，而且树根的值总是存储在内存中，那么最多需要查询三次数据块就行了。N叉树因为读写性能的优势和适配磁盘的访问模式，被广泛应用于数据库的引擎设计</p>\n<h4 id=\"Innodb索引模型\"><a href=\"#Innodb索引模型\" class=\"headerlink\" title=\"Innodb索引模型\"></a>Innodb索引模型</h4><p>在Mysql中，索引和事务一样都是在存储引擎层实现的，所以没有统一的索引标准，即不同存储引擎的索引的工作方式是不一样的，而且即使多个存储引擎使用同一个类型的索引，那么索引的底层实现也可能是不一样的。那么Innodb的索引模型是B+树，为什么上面在说N叉树的时候，已经说了，下面专门说Innodb的索引模型</p>\n","comments":true,"link":"","tags":[{"name":"Mysql","slug":"Mysql","permalink":"https://carefulhuo.github.io/tags/Mysql/"}]},{"title":"java8中Optional静态类","date":"2020-11-01T09:31:08.000Z","path":"posts/bb929634.html","text":"Optional简介 在Java8中的StreamAPI有很多操作都返回了Optional对象，那么这个对象是用来干嘛的，用来解决空指针问题，产生的一个类。也可以认为这是一个容器对象，因为它可以保存类型为T的对象，也可以保存null Optional类源码import java.util.NoSuchElementException; import java.util.Objects; import java.util.function.Consumer; import java.util.function.Function; import java.util.function.Predicate; import java.util.function.Supplier; public final class Optional&lt;T> { private static final Optional&lt;?> EMPTY = new Optional&lt;>(); private final T value; private Optional() { this.value = null; } public static &lt;T> Optional&lt;T> empty() { @SuppressWarnings(\"unchecked\") Optional&lt;T> t = (Optional&lt;T>) EMPTY; return t; } private Optional(T value) { this.value = Objects.requireNonNull(value); } public static &lt;T> Optional&lt;T> of(T value) { return new Optional&lt;>(value); } public static &lt;T> Optional&lt;T> ofNullable(T value) { return value == null ? empty() : of(value); } public T get() { if (value == null) { throw new NoSuchElementException(\"No value present\"); } return value; } public boolean isPresent() { return value != null; } public void ifPresent(Consumer&lt;? super T> consumer) { if (value != null) consumer.accept(value); } public Optional&lt;T> filter(Predicate&lt;? super T> predicate) { Objects.requireNonNull(predicate); if (!isPresent()) return this; else return predicate.test(value) ? this : empty(); } public &lt;U> Optional&lt;U> map(Function&lt;? super T, ? extends U> mapper) { Objects.requireNonNull(mapper); if (!isPresent()) return empty(); else { return Optional.ofNullable(mapper.apply(value)); } } public &lt;U> Optional&lt;U> flatMap(Function&lt;? super T, Optional&lt;U>> mapper) { Objects.requireNonNull(mapper); if (!isPresent()) return empty(); else { return Objects.requireNonNull(mapper.apply(value)); } } public T orElse(T other) { return value != null ? value : other; } public T orElseGet(Supplier&lt;? extends T> other) { return value != null ? value : other.get(); } public &lt;X extends Throwable> T orElseThrow(Supplier&lt;? extends X> exceptionSupplier) throws X { if (value != null) { return value; } else { throw exceptionSupplier.get(); } } @Override public boolean equals(Object obj) { if (this == obj) { return true; } if (!(obj instanceof Optional)) { return false; } Optional&lt;?> other = (Optional&lt;?>) obj; return Objects.equals(value, other.value); } @Override public int hashCode() { return Objects.hashCode(value); } @Override public String toString() { return value != null ? String.format(\"Optional[%s]\", value) : \"Optional.empty\"; } } 创建Optional类该类创建对象的方法被私有化了，所以不能直接创建该对象，提供了三个静态方法创建实例对象 private Optional() { this.value = null; } private Optional(T value) { this.value = Objects.requireNonNull(value); } // 1.直接返回类加载后，就创建的空对象 public static &lt;T> Optional&lt;T> empty() { @SuppressWarnings(\"unchecked\") Optional&lt;T> t = (Optional&lt;T>) EMPTY; return t; } // 2.直接new一个Optional对象 public static &lt;T> Optional&lt;T> of(T value) { return new Optional&lt;>(value); } // 3.判断是否为null，是直接返回类加载后，就创建的空对象，否则直接new一个对象 public static &lt;T> Optional&lt;T> ofNullable(T value) { return value == null ? empty() : of(value); 获取泛型对象的方法 // 1. 直接获取，如果为null，则抛出异常 public T get() { if (value == null) { throw new NoSuchElementException(\"No value present\"); } return value; } // 2. 获取对象时，设置一个默认值进行获取，如果为null，则返回默认值 public T orElse(T other) { return value != null ? value : other; } // 3. 与第2个方式相同，只是该方法的参数是函数式参数 public T orElseGet(Supplier&lt;? extends T> other) { return value != null ? value : other.get(); } // 4. 与第1个方式相同，但可以返回特定的异常 public &lt;X extends Throwable> T orElseThrow(Supplier&lt;? extends X> exceptionSupplier) throws X { if (value != null) { return value; } else { throw exceptionSupplier.get(); } } Optional类的其他方法 // 1. 判断值是否为null public boolean isPresent() { return value != null; } // 2. 如果值不为空，对值做一些特定操作 public void ifPresent(Consumer&lt;? super T> consumer) { if (value != null) consumer.accept(value); } // 3. 筛选符合规则的对象 public Optional&lt;T> filter(Predicate&lt;? super T> predicate) { Objects.requireNonNull(predicate); if (!isPresent()) return this; else return predicate.test(value) ? this : empty(); } // 4. 改变对象的类型,然后返回 public &lt;U> Optional&lt;U> map(Function&lt;? super T, ? extends U> mapper) { Objects.requireNonNull(mapper); if (!isPresent()) return empty(); else { return Optional.ofNullable(mapper.apply(value)); } } // 5. 合并相同对象类型,然后返回 public &lt;U> Optional&lt;U> flatMap(Function&lt;? super T, Optional&lt;U>> mapper) { Objects.requireNonNull(mapper); if (!isPresent()) return empty(); else { return Objects.requireNonNull(mapper.apply(value)); } } 文章借鉴处 https://blog.csdn.net/qq_28410283/article/details/80952768","content":"<h4 id=\"Optional简介\"><a href=\"#Optional简介\" class=\"headerlink\" title=\"Optional简介\"></a>Optional简介</h4><p>  在Java8中的StreamAPI有很多操作都返回了Optional<t>对象，那么这个对象是用来干嘛的，用来解决空指针问题，产生的一个类。也可以认为这是一个容器对象，因为它可以保存类型为T的对象，也可以保存null</t></p>\n<span id=\"more\"></span>\n\n<h4 id=\"Optional类源码\"><a href=\"#Optional类源码\" class=\"headerlink\" title=\"Optional类源码\"></a>Optional类源码</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>NoSuchElementException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Objects<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span>Consumer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span>Function<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span>Predicate<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span>Supplier<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Optional</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Optional<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> EMPTY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Optional</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> T value<span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">private</span> <span class=\"token function\">Optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n        Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> EMPTY<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">private</span> <span class=\"token function\">Optional</span><span class=\"token punctuation\">(</span>T value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span>T value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Optional</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>T value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">==</span> null <span class=\"token operator\">?</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> T <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSuchElementException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No value present\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>Consumer<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> T<span class=\"token operator\">></span> consumer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Predicate<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> T<span class=\"token operator\">></span> predicate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">return</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> T<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span><span class=\"token operator\">></span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Optional<span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span> <span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> T<span class=\"token punctuation\">,</span> Optional<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">>></span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> T <span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span>T other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">!=</span> null <span class=\"token operator\">?</span> value <span class=\"token operator\">:</span> other<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> T <span class=\"token function\">orElseGet</span><span class=\"token punctuation\">(</span>Supplier<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">!=</span> null <span class=\"token operator\">?</span> value <span class=\"token operator\">:</span> other<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>X <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span><span class=\"token operator\">></span> T <span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span>Supplier<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">X</span><span class=\"token operator\">></span> exceptionSupplier<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> X <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> exceptionSupplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        Optional<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> other <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Optional<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">!=</span> null <span class=\"token operator\">?</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Optional[%s]\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Optional.empty\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"创建Optional类\"><a href=\"#创建Optional类\" class=\"headerlink\" title=\"创建Optional类\"></a>创建Optional类</h4><p>该类创建对象的方法被私有化了，所以不能直接创建该对象，提供了三个静态方法创建实例对象</p>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token function\">Optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">private</span> <span class=\"token function\">Optional</span><span class=\"token punctuation\">(</span>T value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 1.直接返回类加载后，就创建的空对象</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n        Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> EMPTY<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 2.直接new一个Optional对象</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span>T value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Optional</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 3.判断是否为null，是直接返回类加载后，就创建的空对象，否则直接new一个对象</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>T value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">==</span> null <span class=\"token operator\">?</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"获取泛型对象的方法\"><a href=\"#获取泛型对象的方法\" class=\"headerlink\" title=\"获取泛型对象的方法\"></a>获取泛型对象的方法</h4><pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token comment\" spellcheck=\"true\">// 1. 直接获取，如果为null，则抛出异常</span>\n    <span class=\"token keyword\">public</span> T <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSuchElementException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No value present\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 2. 获取对象时，设置一个默认值进行获取，如果为null，则返回默认值</span>\n    <span class=\"token keyword\">public</span> T <span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span>T other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">!=</span> null <span class=\"token operator\">?</span> value <span class=\"token operator\">:</span> other<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 3. 与第2个方式相同，只是该方法的参数是函数式参数</span>\n    <span class=\"token keyword\">public</span> T <span class=\"token function\">orElseGet</span><span class=\"token punctuation\">(</span>Supplier<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">!=</span> null <span class=\"token operator\">?</span> value <span class=\"token operator\">:</span> other<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 4. 与第1个方式相同，但可以返回特定的异常</span>\n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>X <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span><span class=\"token operator\">></span> T <span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span>Supplier<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">X</span><span class=\"token operator\">></span> exceptionSupplier<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> X <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> exceptionSupplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"Optional类的其他方法\"><a href=\"#Optional类的其他方法\" class=\"headerlink\" title=\"Optional类的其他方法\"></a>Optional类的其他方法</h4><pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token comment\" spellcheck=\"true\">// 1. 判断值是否为null</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 2. 如果值不为空，对值做一些特定操作</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>Consumer<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> T<span class=\"token operator\">></span> consumer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 3. 筛选符合规则的对象</span>\n    <span class=\"token keyword\">public</span> Optional<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Predicate<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> T<span class=\"token operator\">></span> predicate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">return</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 4. 改变对象的类型,然后返回</span>\n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> T<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span><span class=\"token operator\">></span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Optional<span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 5. 合并相同对象类型,然后返回</span>\n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span> Optional<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">></span> <span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> T<span class=\"token punctuation\">,</span> Optional<span class=\"token operator\">&lt;</span>U<span class=\"token operator\">>></span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>文章借鉴处</strong></p>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_28410283/article/details/80952768\">https://blog.csdn.net/qq_28410283/article/details/80952768</a></li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"JavaApi","slug":"JavaApi","permalink":"https://carefulhuo.github.io/tags/JavaApi/"}]},{"title":"java8中的Stream'sAPI","date":"2020-10-31T11:34:46.000Z","path":"posts/cbdcb8a8.html","text":"Stream’APi简介 Stream’API是Java8中的新特性，基于Lambda表达式，对Collection(集合)的各种操作有了很大的改变，极大的提升了编码效率和代码的可读性。Stream有串行和并行两种模式，并行模式会自动创建多个线程，使用fork(join)Java7特性，来拆分任务和加速处理过程。Stream是一种类似IO流的东西，但是并不相同，实质是对集合操作的一种高度抽象，而且更重要的是，Stream不是数据结构，是不存储数据的，数据存储在底层的集合中，或者根据需要产生出来(例如Stream进行终端操作的时候，生成新的集合)。 Stream抽象概念 Stream将要处理的数据看作一个流，流在管道中流动，可以在管道的节点上对流进行筛选，排序，聚合等操作，也就是数据流在管道中经过中间操作(intermediate operation),最后由终端操作(terminal operation)来得到前面处理过的数据，可以抽象的看作一种类似通过sql查询数据的方式。 Stream的特征 Stream不是数据结构，是不存储数据的； Stream的构成数据源是集合、数组，I/O channel，generate等等； Stream的中间操作会返还流对象本身，这样就形成了一个管道； Stream的中间操作类似sql语句，比如filter(筛选), map(元素映射), reduce(聚合), find(查询), match(匹配), sorted(排序)等； Stream的迭代跟for和foreach在集合外显式迭代不同，Stream是内部迭代，基于访问者模式(Visitor)实现； Stream有串行和并行两种模式； Stream用法如何创建Stream流 stream() 为集合创建串行流。 parallelStream() 为集合创建并行流。```java// 代码示例// 集合创建流 Collection接口增加了Steam方法()List listStr = Arrays.asList(“java”, “python”, “shell”, “javaScript”);Stream steamStr = listStr.stream();steamStr.forEach(str -&gt; System.out.println(str)); Set setStr = ZoneId.getAvailableZoneIds();Stream steamSetStr = setStr.stream();steamSetStr.forEach(str -&gt; System.out.println(str)); // 从数组创建流 Arrays类中增加stream(T[] array)方法String[] strs = {“java”, “python”, “shell”, “javaScript”};Stream stringStream = Arrays.stream(strs); // 从静态方法中创建Stream staticStream1 = Stream.of(“java”, “python”, “shell”, “javaScript”);staticStream1.forEach(str -&gt; System.out.println(str)); // 使用iterate静态方法(迭代器的方式)创建无限大小的流，需配合limit使用，防止内存溢出// 会一直增加数据，没有上限Stream staticStream2 = Stream.iterate(0, x -&gt; x + 1).limit(10);staticStream2.forEach(integer -&gt; System.out.println(integer)); // 使用generate静态方法创建无限大小的流，需要配合limit使用，防止内存溢出// generate方式创建的无限流最大值是Long.MAX_VALUERandom random = new Random();Stream staticStream3 = Stream.generate(() -&gt; random.nextInt()).limit(10);staticStream3.forEach(integer -&gt; System.out.println(integer)); // 其他方式java.io.BufferedReader.lines()java.util.stream.IntStream.range()java.nio.file.Files.walk()java.util.SpliteratorRandom.ints()BitSet.stream()Pattern.splitAsStream(java.lang.CharSequence)JarFile.stream() ##### Stream流的中间操作 &gt;该表的作用是Stream流中间操作方法的参数类型 |函数式接口名 | 作用| | --- | --- | |Function&lt;T, R&gt; | 接受一个参数T，返回结果R| |Predicate&lt;T&gt; | 接受一个参数T，返回boolean| |Supplier&lt;T&gt; | 不接受任何参数T，返回结果T| |Consumer&lt;T&gt; | 接受一个参数T，不返回结果| |UnaryOperator&lt;T&gt; | 继承自Function&lt;T,T&gt;，返回相同类型T的结果| |BiFunction&lt;T, U, R&gt;|接收两个参数T,U，返回结果R| |BinaryOperator&lt;T&gt;|继承自BiFunction&lt;T,T,T&gt;，返回相同类型T的结果| |Runnable|实际上不接受任何参数，也不返回结果| |Comparable&lt;T&gt;|实际上是接受两个相同类型的T，返回int| |Callable&lt;V&gt;|不接受任何参数，返回结果V| ###### 过滤操作 - filter() 将符合条件的所有元素(数据)转移到新流中。filter的参数类型是Predicate&lt;T&gt; ```java // 代码示例 List&lt;String&gt; listStr = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\"); Stream&lt;String&gt; steamStr = listStr.stream(); steamStr.filter(s -&gt; s.startsWith(\"j\")).forEach(s -&gt; System.out.println(s)); 转换操作 map() 将所有数据经过处理之后(可以改变对象类型)转移到新流中。map的参数类型是Function&lt;T,R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper) 接收一个泛型参数，另一个为Stream流参数，返回的是泛型R,作用是将两个流合并成一个流输出```java// 代码示例List listStr = Arrays.asList(“java”, “python”, “shell”, “javaScript”);Stream steamStr = listStr.stream();steamStr.map(s -&gt; s.substring(2)).forEach(s -&gt; System.out.println(s)); String[] strs = { “aaa”, “bbb”, “ccc” };Arrays.stream(strs).map(str -&gt; str.split(“”)).forEach(System.out::println);// [Ljava.lang.String;@5cc7c2a6// [Ljava.lang.String;@b97c004// [Ljava.lang.String;@4590c9c3Arrays.stream(strs).map(str -&gt; str.split(“”)).flatMap(str -&gt; Arrays.stream(str)).forEach(System.out::println);// a/a/a/b/b/b/c/c/c // map操作将strs拆分为三个数组，stream流中的元素由stream变成了stream&lt;String[]&gt;// flatMap操作将三个stream&lt;String[]&gt;流合并成一个stream流 ###### 提取操作 - skip(long n) 忽略流中的前n个元素(数据) - limit(long maxSize) 获取流中的maxSize个元素(数据) ```java // 代码示例 List&lt;String&gt; listStr = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\"); Stream&lt;String&gt; steamStr = listStr.stream(); steamStr.skip(2).forEach(s -&gt; System.out.println(s)); steamStr.limit(2).forEach(s -&gt; System.out.println(s)); 去重操作 distinct() 去除流中重复的元素// 代码示例 // 运行时记得注释其中stringStream执行语句否则会有异常 // java.lang.IllegalStateException: stream has already been operated upon or closed Stream&lt;String> stringStream = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\", \"java\").stream(); stringStream.distinct().forEach(s -> System.out.println(s)); stringStream.forEach(s -> System.out.println(s)); 排序操作 sort() 将流中的元素(数据)排序 sort(Comparator&lt;? super T&gt; comparator) 将流中元素根据属性排序```java// 代码示例public class test { public static List emps = new ArrayList&lt;&gt;(10); static { emps.add(new Emp(“1”, “xiaoHong1”, 20)); emps.add(new Emp(“1”, “xiaoHong2”, 202)); emps.add(new Emp(“1”, “xiaoHong3”, 32)); emps.add(new Emp(“1”, “xiaoHong4”, 45)); emps.add(new Emp(“1”, “xiaoHong5”, 17)); emps.add(new Emp(“1”, “xiaoHong6”, 14)); emps.add(new Emp(“1”, “xiaoHong7”, 65)); emps.add(new Emp(“1”, “xiaoHong8”, 38)); } public static class Emp { private String code; private String name; private int age; public Emp(String code, String name, int age) { this.code = code; this.name = name; this.age = age; } public String getCode() { return code; } public void setCode(String code) { this.code = code; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } /** @param empList 输出集合中的元素 */ public static void println(List empList) { empList.stream().forEach(emp -&gt; System.out.println(String.format(“编号 %S , 姓名 %s , 年龄 %s”, emp.getCode(), emp.getName(), emp.getAge()))); } /** 根据对象中年龄进行排序 */ public static List sortByAge(List empList) { return empList.stream().sorted(Comparator.comparing(emp -&gt; emp.getAge())).collect(Collectors.toList()); } /** 取出对象中姓名排序，并只返回包含姓名的集合 */ public static List sortByName(List empList) { return empList.stream().map(emp -&gt; emp.getName()).sorted().collect(Collectors.toList()); } public static void main(String[] args) { println(emps); println(sortByAge(emps)); sortByName(emps).stream().forEach(s -&gt; System.out.println(s)); } } ###### 操作对象 - peek(Consumer&lt;? super T&gt; action) ```java // 代码示例 /** * @param empList 输出集合中的元素 */ public static void println(List&lt;Emp&gt; empList) { empList.stream().forEach(emp -&gt; System.out.println(String.format(\"编号 %S , 姓名 %s , 年龄 %s\", emp.getCode(), emp.getName(), emp.getAge()))); } /** * 给年龄大于30岁增加十岁，并返回筛选后的集合 */ public static List&lt;Emp&gt; addAge(List&lt;Emp&gt; empList) { return empList.stream().filter(emp -&gt; emp.getAge() &gt; 30).peek(emp -&gt; emp.setAge(emp.getAge() + 10)).collect(Collectors.toList()); } public static void main(String[] args) { println(addAge(emps)); } 聚合操作 reduce方法```java reduce(BinaryOperator accumulator)接收一个参数，且参数类型为函数式接口的计算规则，初始值是List集合的第一个值 reduce(T identity, BinaryOperator accumulator)参数类型为函数式接口的计算规则，第一参数值是初始值，第二个参数是函数式接口的计算规则 reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator combiner)在多线程中使用的,具体不知道(https://segmentfault.com/q/1010000004944450) // 代码示例// 将流中元素归约为一个值Random random = new Random();List randomList = Stream.generate(() -&gt; random.nextInt(10)).limit(10).collect(Collectors.toList());randomList.stream().forEach(integer -&gt; System.out.println(integer));System.out.println(randomList.stream().reduce((a, b) -&gt; a + b).get());System.out.println(randomList.stream().reduce(1,(a, b) -&gt; a + b).longValue()); List iterateList = Stream.iterate(0, x -&gt; x + 1).limit(10).collect(Collectors.toList());iterateList.stream().forEach(integer -&gt; System.out.println(integer));System.out.println(iterateList.stream().reduce((a, b) -&gt; a - b).get());System.out.println(iterateList.stream().reduce(1,(a, b) -&gt; a - b).longValue()); - collect方法 ```java - collect(Supplier&lt;R&gt; supplier,BiConsumer&lt;R, ? super T&gt; accumulator,BiConsumer&lt;R, R&gt; combiner); 传入三个参数的抽象方法 - collect(Collector&lt;? super T, A, R&gt; collector); 该方法只有一个参数，这个参数先看下stream中的collect操作Collectors静态工厂类，在这个静态工厂类里面，大多都使用三个参数的collect方法实现的。 具体的实现类方法 // 代码示例 public class test { public static List&lt;Emp> emps = new ArrayList&lt;>(10); static { emps.add(new Emp(\"1\", \"xiaoHong1\", 20)); emps.add(new Emp(\"1\", \"xiaoHong2\", 202)); emps.add(new Emp(\"2\", \"xiaoHong3\", 32)); emps.add(new Emp(\"1\", \"xiaoHong4\", 45)); emps.add(new Emp(\"2\", \"xiaoHong5\", 17)); emps.add(new Emp(\"1\", \"xiaoHong6\", 14)); emps.add(new Emp(\"3\", \"xiaoHong7\", 65)); emps.add(new Emp(\"3\", \"xiaoHong8\", 38)); } public static class Emp { private String code; private String name; private int age; public Emp(String code, String name, int age) { this.code = code; this.name = name; this.age = age; } public String getCode() { return code; } public void setCode(String code) { this.code = code; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } public static void main(String[] args) { //转List List&lt;String> nameList = emps.stream().map(emp -> emp.getName()).collect(Collectors.toList()); //转Set Set&lt;String> nameSet = emps.stream().map(emp -> emp.getName()).collect(Collectors.toSet()); //转map,需指定key值，Function.identity()指的是当前对象本身 Map&lt;String, Emp> nameMap1 = emps.stream().collect(Collectors.toMap(emp -> emp.getName(), emp -> emp)); Map&lt;String, Emp> nameMap2 = emps.stream().collect(Collectors.toMap(emp -> emp.getName(), Function.identity())); //计算集合中元素个数 long count = emps.stream().collect(Collectors.counting()); //计算数据 summarizingInt summarizingDouble summarizingLong IntSummaryStatistics sum = emps.stream().collect(Collectors.summarizingInt(emp -> emp.getAge())); //平均数 System.out.println(sum.getAverage()); //总数 System.out.println(sum.getCount()); //最大值 System.out.println(sum.getMax()); //最小值 System.out.println(sum.getMin()); //求和 System.out.println(sum.getSum()); //连接字符串 前缀和后缀只会出现在整个字符串的首尾 String nameStr1 = emps.stream().map(emp -> emp.getName()).collect(Collectors.joining()); String nameStr2 = emps.stream().map(emp -> emp.getName()).collect(Collectors.joining(\"中间-\")); String nameStr3 = emps.stream().map(emp -> emp.getName()).collect(Collectors.joining(\"中间-\", \"前缀*\", \"后缀&amp;\")); System.out.println(nameStr1); System.out.println(nameStr2); System.out.println(nameStr3); //最大值 maxBy 最小值 minBy Optional&lt;Integer> maxAge = emps.stream().map(emp -> emp.getAge()).collect(Collectors.maxBy(Comparator.comparing(emp -> emp))); Optional&lt;Integer> minAge = emps.stream().map(emp -> emp.getAge()).collect(Collectors.minBy(Comparator.comparing(emp -> emp))); System.out.println(maxAge.get()); System.out.println(minAge.get()); //聚合操作 Optional&lt;Integer> ageSum1 = emps.stream().map(emp -> emp.getAge()).collect(Collectors.reducing((x, y) -> x + y)); Integer ageSum2 = emps.stream().map(emp -> emp.getAge()).collect(Collectors.reducing(1, (x, y) -> x + y)); System.out.println(ageSum1.get()); System.out.println(ageSum2); //分组操作 根据地址把原List进行分组 Map&lt;String, List&lt;Emp>> mapGroup = emps.stream().collect(Collectors.groupingBy(emp -> emp.getCode())); mapGroup.forEach((s, empList) -> mapGroup.get(s).forEach(emp -> System.out.println(s + \":\" + emp.getName()))); //分区操作 需要根据类型进行 需要根据类型指定判断分区 Map&lt;Boolean, List&lt;Emp>> mapPartitioning = emps.stream().collect(Collectors.partitioningBy(emp -> emp.getAge() > 20)); mapPartitioning.forEach((b, empList) -> mapPartitioning.get(b).forEach(emp -> System.out.println(b + \":\" + emp.getName()))); List&lt;String> listStr1 = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\"); List&lt;String> listStr2 = Arrays.asList(\"javaNew\", \"pythonNew\", \"shellNew\", \"javaScriptNew\"); Stream&lt;String> steamSt1 = listStr1.stream(); Stream&lt;String> steamSt2 = listStr2.stream(); Stream.concat(steamSt1, steamSt2).forEach(s -> System.out.println(s)); } } stream的终端操作对集合的流进行遍历 forEach(Consumer&lt;? super T&gt; action) forEachOrdered(Consumer&lt;? super T&gt; action)// 代码示例 // forEach遍历是无序的遍历 // forEach遍历是按照元素的在流中的顺序进行遍历 List&lt;String> strList = Arrays.asList(\"aaa\",\"bbb\",\"ccc\"); strList.parallelStream().forEach(str-> System.out.println(str)); System.out.println(); strList.parallelStream().forEachOrdered(str-> System.out.println(str)); 将流转换为数组 toArray(IntFunction&lt;A[]&gt; generator) toArray()// toArray()方法的底层调用的还是toArray(IntFunction&lt;A[]> generator)方法 // 代码示例 List&lt;String> strList = Arrays.asList(\"aaa\", \"bbb\", \"ccc\"); Object[] o = strList.stream().toArray(); String[] s = strList.stream().toArray(str -> new String[strList.size()]); //将集合转换为数组进行输出 Arrays.stream(o).forEach(o1 -> System.out.println(o1)); Arrays.stream(s).forEach(s1 -> System.out.println(s1)); 流的长度及流中元素(数据)比较 long count() 计算流的长度 boolean anyMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中任意一个元素符合，返回true boolean allMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中所有元素都符合，返回true boolean noneMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中任意一个元素都不符合，返回true```java// 代码示例public class test { public static List emps = new ArrayList&lt;&gt;(10); static { emps.add(new Emp(“1”, “xiaoHong1”, 20)); emps.add(new Emp(“1”, “xiaoHong2”, 202)); emps.add(new Emp(“1”, “xiaoHong3”, 32)); emps.add(new Emp(“1”, “xiaoHong4”, 45)); emps.add(new Emp(“1”, “xiaoHong5”, 17)); emps.add(new Emp(“1”, “xiaoHong6”, 14)); emps.add(new Emp(“1”, “xiaoHong7”, 65)); emps.add(new Emp(“1”, “xiaoHong8”, 38)); } public static class Emp { private String code; private String name; private int age; public Emp(String code, String name, int age) { this.code = code; this.name = name; this.age = age; } public String getCode() { return code; } public void setCode(String code) { this.code = code; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } public static void main(String[] args) { System.out.println(emps.stream().filter(emp -&gt; emp.getAge() &gt; 30).count()); // 5 System.out.println(emps.stream().allMatch(emp -&gt; emp.getAge() &gt; 30)); // false System.out.println(emps.stream().anyMatch(emp -&gt; emp.getName().startsWith(“xiao”))); // true System.out.println(emps.stream().noneMatch(emp -&gt; emp.getAge() &lt; 10)); // false } } **文章借鉴处** - https://blog.csdn.net/qq_28410283/article/details/80633710 - https://miaoxinguo.github.io/java/2016/06/02/java8.2.stream.html - https://www.exception.site/java8/java8-stream-tutorial","content":"<h4 id=\"Stream’APi简介\"><a href=\"#Stream’APi简介\" class=\"headerlink\" title=\"Stream’APi简介\"></a>Stream’APi简介</h4><p>　　Stream’API是Java8中的新特性，基于Lambda表达式，对Collection(集合)的各种操作有了很大的改变，极大的提升了编码效率和代码的可读性。Stream有串行和并行两种模式，并行模式会自动创建多个线程，使用fork(join)Java7特性，来拆分任务和加速处理过程。Stream是一种类似IO流的东西，但是并不相同，实质是对集合操作的一种高度抽象，而且更重要的是，Stream不是数据结构，是不存储数据的，数据存储在底层的集合中，或者根据需要产生出来(例如Stream进行终端操作的时候，生成新的集合)。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"Stream抽象概念\"><a href=\"#Stream抽象概念\" class=\"headerlink\" title=\"Stream抽象概念\"></a>Stream抽象概念</h4><p>　　Stream将要处理的数据看作一个流，流在管道中流动，可以在管道的节点上对流进行筛选，排序，聚合等操作，也就是数据流在管道中经过中间操作(intermediate operation),最后由终端操作(terminal operation)来得到前面处理过的数据，可以抽象的看作一种类似通过sql查询数据的方式。</p>\n<h4 id=\"Stream的特征\"><a href=\"#Stream的特征\" class=\"headerlink\" title=\"Stream的特征\"></a>Stream的特征</h4><ul>\n<li>Stream不是数据结构，是不存储数据的；</li>\n<li>Stream的构成数据源是集合、数组，I/O channel，generate等等；</li>\n<li>Stream的中间操作会返还流对象本身，这样就形成了一个管道；</li>\n<li>Stream的中间操作类似sql语句，比如filter(筛选), map(元素映射), reduce(聚合), find(查询), match(匹配), sorted(排序)等；</li>\n<li>Stream的迭代跟for和foreach在集合外显式迭代不同，Stream是内部迭代，基于访问者模式(Visitor)实现；</li>\n<li>Stream有串行和并行两种模式；</li>\n</ul>\n<h4 id=\"Stream用法\"><a href=\"#Stream用法\" class=\"headerlink\" title=\"Stream用法\"></a>Stream用法</h4><h5 id=\"如何创建Stream流\"><a href=\"#如何创建Stream流\" class=\"headerlink\" title=\"如何创建Stream流\"></a>如何创建Stream流</h5><ul>\n<li>stream() 为集合创建串行流。</li>\n<li>parallelStream() 为集合创建并行流。<br>```java<br>// 代码示例<br>// 集合创建流 Collection接口增加了Steam方法()<br>List<string> listStr = Arrays.asList(“java”, “python”, “shell”, “javaScript”);<br>Stream<string> steamStr = listStr.stream();<br>steamStr.forEach(str -&gt; System.out.println(str));</string></string></li>\n</ul>\n<p>Set<string> setStr = ZoneId.getAvailableZoneIds();<br>Stream<string> steamSetStr = setStr.stream();<br>steamSetStr.forEach(str -&gt; System.out.println(str));</string></string></p>\n<p>// 从数组创建流 Arrays类中增加stream(T[] array)方法<br>String[] strs = {“java”, “python”, “shell”, “javaScript”};<br>Stream<string> stringStream = Arrays.stream(strs);</string></p>\n<p>// 从静态方法中创建<br>Stream<string> staticStream1 = Stream.of(“java”, “python”, “shell”, “javaScript”);<br>staticStream1.forEach(str -&gt; System.out.println(str));</string></p>\n<p>// 使用iterate静态方法(迭代器的方式)创建无限大小的流，需配合limit使用，防止内存溢出<br>// 会一直增加数据，没有上限<br>Stream<integer> staticStream2 = Stream.iterate(0, x -&gt; x + 1).limit(10);<br>staticStream2.forEach(integer -&gt; System.out.println(integer));</integer></p>\n<p>// 使用generate静态方法创建无限大小的流，需要配合limit使用，防止内存溢出<br>// generate方式创建的无限流最大值是Long.MAX_VALUE<br>Random random = new Random();<br>Stream<integer> staticStream3 = Stream.generate(() -&gt; random.nextInt()).limit(10);<br>staticStream3.forEach(integer -&gt; System.out.println(integer));</integer></p>\n<p>// 其他方式<br>java.io.BufferedReader.lines()<br>java.util.stream.IntStream.range()<br>java.nio.file.Files.walk()<br>java.util.Spliterator<br>Random.ints()<br>BitSet.stream()<br>Pattern.splitAsStream(java.lang.CharSequence)<br>JarFile.stream()</p>\n<pre><code>\n##### Stream流的中间操作\n\n&gt;该表的作用是Stream流中间操作方法的参数类型\n\n|函数式接口名 | 作用|\n| --- | --- |\n|Function&lt;T, R&gt; | 接受一个参数T，返回结果R|\n|Predicate&lt;T&gt; | 接受一个参数T，返回boolean|\n|Supplier&lt;T&gt; | 不接受任何参数T，返回结果T|\n|Consumer&lt;T&gt; | 接受一个参数T，不返回结果|\n|UnaryOperator&lt;T&gt; | 继承自Function&lt;T,T&gt;，返回相同类型T的结果|\n|BiFunction&lt;T, U, R&gt;|接收两个参数T,U，返回结果R|\n|BinaryOperator&lt;T&gt;|继承自BiFunction&lt;T,T,T&gt;，返回相同类型T的结果|\n|Runnable|实际上不接受任何参数，也不返回结果|\n|Comparable&lt;T&gt;|实际上是接受两个相同类型的T，返回int|\n|Callable&lt;V&gt;|不接受任何参数，返回结果V|\n\n###### 过滤操作\n\n- filter() 将符合条件的所有元素(数据)转移到新流中。filter的参数类型是Predicate&lt;T&gt;\n```java\n// 代码示例\nList&lt;String&gt; listStr = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\");\nStream&lt;String&gt; steamStr = listStr.stream();\nsteamStr.filter(s -&gt; s.startsWith(\"j\")).forEach(s -&gt; System.out.println(s));\n</code></pre>\n<h6 id=\"转换操作\"><a href=\"#转换操作\" class=\"headerlink\" title=\"转换操作\"></a>转换操作</h6><ul>\n<li>map() 将所有数据经过<strong>处理</strong>之后(可以改变对象类型)转移到新流中。map的参数类型是Function&lt;T,R&gt;</li>\n<li>flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper) 接收一个泛型参数，另一个为Stream流参数，返回的是泛型R,作用是将两个流合并成一个流输出<br>```java<br>// 代码示例<br>List<string> listStr = Arrays.asList(“java”, “python”, “shell”, “javaScript”);<br>Stream<string> steamStr = listStr.stream();<br>steamStr.map(s -&gt; s.substring(2)).forEach(s -&gt; System.out.println(s));</string></string></li>\n</ul>\n<p>String[] strs = { “aaa”, “bbb”, “ccc” };<br>Arrays.stream(strs).map(str -&gt; str.split(“”)).forEach(System.out::println);<br>// [Ljava.lang.String;@5cc7c2a6<br>// [Ljava.lang.String;@b97c004<br>// [Ljava.lang.String;@4590c9c3<br>Arrays.stream(strs).map(str -&gt; str.split(“”)).flatMap(str -&gt; Arrays.stream(str)).forEach(System.out::println);<br>// a/a/a/b/b/b/c/c/c</p>\n<p>// map操作将strs拆分为三个数组，stream流中的元素由stream<string>变成了stream&lt;String[]&gt;<br>// flatMap操作将三个stream&lt;String[]&gt;流合并成一个stream<string>流</string></string></p>\n<pre><code>\n###### 提取操作\n- skip(long n) 忽略流中的前n个元素(数据)\n- limit(long maxSize) 获取流中的maxSize个元素(数据)\n```java\n// 代码示例\nList&lt;String&gt; listStr = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\");\nStream&lt;String&gt; steamStr = listStr.stream();\nsteamStr.skip(2).forEach(s -&gt; System.out.println(s));\nsteamStr.limit(2).forEach(s -&gt; System.out.println(s));\n</code></pre>\n<h6 id=\"去重操作\"><a href=\"#去重操作\" class=\"headerlink\" title=\"去重操作\"></a>去重操作</h6><ul>\n<li>distinct() 去除流中重复的元素<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\n<span class=\"token comment\" spellcheck=\"true\">// 运行时记得注释其中stringStream执行语句否则会有异常</span>\n<span class=\"token comment\" spellcheck=\"true\">// java.lang.IllegalStateException: stream has already been operated upon or closed</span>\nStream<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> stringStream <span class=\"token operator\">=</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"javaScript\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstringStream<span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstringStream<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ul>\n<h6 id=\"排序操作\"><a href=\"#排序操作\" class=\"headerlink\" title=\"排序操作\"></a>排序操作</h6><ul>\n<li><p>sort() 将流中的元素(数据)排序</p>\n</li>\n<li><p>sort(Comparator&lt;? super T&gt; comparator) 将流中元素根据属性排序<br>```java<br>// 代码示例<br>public class test {</p>\n<p>  public static List<emp> emps = new ArrayList&lt;&gt;(10);</emp></p>\n<p>  static {<br>  emps.add(new Emp(“1”, “xiaoHong1”, 20));<br>  emps.add(new Emp(“1”, “xiaoHong2”, 202));<br>  emps.add(new Emp(“1”, “xiaoHong3”, 32));<br>  emps.add(new Emp(“1”, “xiaoHong4”, 45));<br>  emps.add(new Emp(“1”, “xiaoHong5”, 17));<br>  emps.add(new Emp(“1”, “xiaoHong6”, 14));<br>  emps.add(new Emp(“1”, “xiaoHong7”, 65));<br>  emps.add(new Emp(“1”, “xiaoHong8”, 38));<br>  }</p>\n<p>  public static class Emp {<br>  private String code;<br>  private String name;<br>  private int age;<br><br>  public Emp(String code, String name, int age) {<br>      this.code = code;<br>      this.name = name;<br>      this.age = age;<br>  }<br><br>  public String getCode() {<br>      return code;<br>  }<br><br>  public void setCode(String code) {<br>      this.code = code;<br>  }<br><br>  public String getName() {<br>      return name;<br>  }<br><br>  public void setName(String name) {<br>      this.name = name;<br>  }<br><br>  public int getAge() {<br>      return age;<br>  }<br><br>  public void setAge(int age) {<br>      this.age = age;<br>  }<br>  }</p>\n<p>  /**</p>\n<ul>\n<li>@param empList 输出集合中的元素<br>   */<br>  public static void println(List<emp> empList) {<br> empList.stream().forEach(emp -&gt; System.out.println(String.format(“编号 %S , 姓名 %s , 年龄 %s”, emp.getCode(), emp.getName(), emp.getAge())));<br>  }</emp></li>\n</ul>\n<p>  /**</p>\n<ul>\n<li>根据对象中年龄进行排序<br>   */<br>  public static List<emp> sortByAge(List<emp> empList) {<br> return empList.stream().sorted(Comparator.comparing(emp -&gt; emp.getAge())).collect(Collectors.toList());<br>  }</emp></emp></li>\n</ul>\n<p>  /**</p>\n<ul>\n<li>取出对象中姓名排序，并只返回包含姓名的集合<br>   */<br>  public static List<string> sortByName(List<emp> empList) {<br> return empList.stream().map(emp -&gt; emp.getName()).sorted().collect(Collectors.toList());<br>  }</emp></string></li>\n</ul>\n<p>  public static void main(String[] args) {<br>      println(emps);<br>      println(sortByAge(emps));<br>      sortByName(emps).stream().forEach(s -&gt; System.out.println(s));<br>  }</p>\n</li>\n</ul>\n<p>}</p>\n<pre><code>\n###### 操作对象\n- peek(Consumer&lt;? super T&gt; action)\n```java\n// 代码示例\n    /**\n     * @param empList 输出集合中的元素\n     */\n    public static void println(List&lt;Emp&gt; empList) {\n        empList.stream().forEach(emp -&gt; System.out.println(String.format(\"编号 %S , 姓名 %s , 年龄 %s\", emp.getCode(), emp.getName(), emp.getAge())));\n    }\n    /**\n     * 给年龄大于30岁增加十岁，并返回筛选后的集合\n     */\n    public static List&lt;Emp&gt; addAge(List&lt;Emp&gt; empList) {\n        return empList.stream().filter(emp -&gt; emp.getAge() &gt; 30).peek(emp -&gt; emp.setAge(emp.getAge() + 10)).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        println(addAge(emps));\n    }\n</code></pre>\n<h6 id=\"聚合操作\"><a href=\"#聚合操作\" class=\"headerlink\" title=\"聚合操作\"></a>聚合操作</h6><ul>\n<li><p>reduce方法<br>```java</p>\n</li>\n<li><p>reduce(BinaryOperator<t> accumulator)<br>接收一个参数，且参数类型为函数式接口的计算规则，初始值是List集合的第一个值</t></p>\n</li>\n<li><p>reduce(T identity, BinaryOperator<t> accumulator)<br>参数类型为函数式接口的计算规则，第一参数值是初始值，第二个参数是函数式接口的计算规则</t></p>\n</li>\n<li><p>reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator<u> combiner)<br>在多线程中使用的,具体不知道(<a href=\"https://segmentfault.com/q/1010000004944450\">https://segmentfault.com/q/1010000004944450</a>)</u></p><u>\n</u></li><u>\n</u></ul><u>\n<p>// 代码示例<br>// 将流中元素归约为一个值<br>Random random = new Random();<br>List<integer> randomList = Stream.generate(() -&gt; random.nextInt(10)).limit(10).collect(Collectors.toList());<br>randomList.stream().forEach(integer -&gt; System.out.println(integer));<br>System.out.println(randomList.stream().reduce((a, b) -&gt; a + b).get());<br>System.out.println(randomList.stream().reduce(1,(a, b) -&gt; a + b).longValue());</integer></p>\n<p>List<integer> iterateList = Stream.iterate(0, x -&gt; x + 1).limit(10).collect(Collectors.toList());<br>iterateList.stream().forEach(integer -&gt; System.out.println(integer));<br>System.out.println(iterateList.stream().reduce((a, b) -&gt; a - b).get());<br>System.out.println(iterateList.stream().reduce(1,(a, b) -&gt; a - b).longValue());</integer></p>\n<pre><code>- collect方法\n```java\n- collect(Supplier&lt;R&gt; supplier,BiConsumer&lt;R, ? super T&gt; accumulator,BiConsumer&lt;R, R&gt; combiner);\n传入三个参数的抽象方法\n\n- collect(Collector&lt;? super T, A, R&gt; collector);\n该方法只有一个参数，这个参数先看下stream中的collect操作Collectors静态工厂类，在这个静态工厂类里面，大多都使用三个参数的collect方法实现的。\n</code></pre>\n<p>具体的实现类方法<br><br><img src=\"https://images-tomcat.oss-cn-hongkong.aliyuncs.com/20180715145937380.png\" alt=\"Collectors静态工厂类\" title=\"Collectors静态工厂类\"><br><br><br><img src=\"https://images-tomcat.oss-cn-hongkong.aliyuncs.com/2018071514595970.png\" alt=\"Collectors静态工厂类\" title=\"Collectors静态工厂类\"></p>\n<hr>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> List<span class=\"token operator\">&lt;</span>Emp<span class=\"token operator\">></span> emps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        emps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoHong1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoHong2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoHong3\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoHong4\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoHong5\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoHong6\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoHong7\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        emps<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xiaoHong8\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Emp</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> String code<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Emp</span><span class=\"token punctuation\">(</span>String code<span class=\"token punctuation\">,</span> String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> String <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCode</span><span class=\"token punctuation\">(</span>String code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> String <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//转List</span>\n        List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> nameList <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//转Set</span>\n        Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> nameSet <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//转map,需指定key值，Function.identity()指的是当前对象本身</span>\n        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Emp<span class=\"token operator\">></span> nameMap1 <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Emp<span class=\"token operator\">></span> nameMap2 <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Function<span class=\"token punctuation\">.</span><span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//计算集合中元素个数</span>\n        <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">counting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//计算数据 summarizingInt summarizingDouble summarizingLong</span>\n        IntSummaryStatistics sum <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">summarizingInt</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//平均数</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span><span class=\"token function\">getAverage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//总数</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//最大值</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span><span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//最小值</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span><span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//求和</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//连接字符串 前缀和后缀只会出现在整个字符串的首尾</span>\n        String nameStr1 <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String nameStr2 <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中间-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String nameStr3 <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中间-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"前缀*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"后缀&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameStr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameStr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameStr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//最大值 maxBy 最小值 minBy</span>\n        Optional<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> maxAge <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span>Comparator<span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Optional<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> minAge <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">minBy</span><span class=\"token punctuation\">(</span>Comparator<span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>maxAge<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minAge<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//聚合操作</span>\n        Optional<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> ageSum1 <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">reducing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Integer ageSum2 <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">reducing</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ageSum1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ageSum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//分组操作 根据地址把原List进行分组</span>\n        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> List<span class=\"token operator\">&lt;</span>Emp<span class=\"token operator\">>></span> mapGroup <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mapGroup<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> empList<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> mapGroup<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//分区操作 需要根据类型进行 需要根据类型指定判断分区</span>\n        Map<span class=\"token operator\">&lt;</span>Boolean<span class=\"token punctuation\">,</span> List<span class=\"token operator\">&lt;</span>Emp<span class=\"token operator\">>></span> mapPartitioning <span class=\"token operator\">=</span> emps<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>Collectors<span class=\"token punctuation\">.</span><span class=\"token function\">partitioningBy</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mapPartitioning<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> empList<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> mapPartitioning<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> listStr1 <span class=\"token operator\">=</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"javaScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> listStr2 <span class=\"token operator\">=</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javaNew\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pythonNew\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"shellNew\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"javaScriptNew\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Stream<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> steamSt1 <span class=\"token operator\">=</span> listStr1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Stream<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> steamSt2 <span class=\"token operator\">=</span> listStr2<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Stream<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>steamSt1<span class=\"token punctuation\">,</span> steamSt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"stream的终端操作\"><a href=\"#stream的终端操作\" class=\"headerlink\" title=\"stream的终端操作\"></a>stream的终端操作</h5><h6 id=\"对集合的流进行遍历\"><a href=\"#对集合的流进行遍历\" class=\"headerlink\" title=\"对集合的流进行遍历\"></a>对集合的流进行遍历</h6><ul>\n<li>forEach(Consumer&lt;? super T&gt; action)</li>\n<li>forEachOrdered(Consumer&lt;? super T&gt; action)<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\n<span class=\"token comment\" spellcheck=\"true\">// forEach遍历是无序的遍历</span>\n<span class=\"token comment\" spellcheck=\"true\">// forEach遍历是按照元素的在流中的顺序进行遍历</span>\nList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> strList <span class=\"token operator\">=</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstrList<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstrList<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEachOrdered</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ul>\n<h6 id=\"将流转换为数组\"><a href=\"#将流转换为数组\" class=\"headerlink\" title=\"将流转换为数组\"></a>将流转换为数组</h6><ul>\n<li>toArray(IntFunction&lt;A[]&gt; generator)</li>\n<li>toArray()<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// toArray()方法的底层调用的还是toArray(IntFunction&lt;A[]> generator)方法</span>\n<span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\nList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> strList <span class=\"token operator\">=</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> o <span class=\"token operator\">=</span> strList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s <span class=\"token operator\">=</span> strList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>strList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//将集合转换为数组进行输出</span>\nArrays<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>o1 <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nArrays<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ul>\n<h6 id=\"流的长度及流中元素-数据-比较\"><a href=\"#流的长度及流中元素-数据-比较\" class=\"headerlink\" title=\"流的长度及流中元素(数据)比较\"></a>流的长度及流中元素(数据)比较</h6><ul>\n<li><p>long count() 计算流的长度</p>\n</li>\n<li><p>boolean anyMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中任意一个元素符合，返回true</p>\n</li>\n<li><p>boolean allMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中所有元素都符合，返回true</p>\n</li>\n<li><p>boolean noneMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中任意一个元素都不符合，返回true<br>```java<br>// 代码示例<br>public class test {</p>\n<p>  public static List<emp> emps = new ArrayList&lt;&gt;(10);</emp></p>\n<p>  static {<br>  emps.add(new Emp(“1”, “xiaoHong1”, 20));<br>  emps.add(new Emp(“1”, “xiaoHong2”, 202));<br>  emps.add(new Emp(“1”, “xiaoHong3”, 32));<br>  emps.add(new Emp(“1”, “xiaoHong4”, 45));<br>  emps.add(new Emp(“1”, “xiaoHong5”, 17));<br>  emps.add(new Emp(“1”, “xiaoHong6”, 14));<br>  emps.add(new Emp(“1”, “xiaoHong7”, 65));<br>  emps.add(new Emp(“1”, “xiaoHong8”, 38));<br>  }</p>\n<p>  public static class Emp {<br>  private String code;<br>  private String name;<br>  private int age;<br><br>  public Emp(String code, String name, int age) {<br>      this.code = code;<br>      this.name = name;<br>      this.age = age;<br>  }<br><br>  public String getCode() {<br>      return code;<br>  }<br><br>  public void setCode(String code) {<br>      this.code = code;<br>  }<br><br>  public String getName() {<br>      return name;<br>  }<br><br>  public void setName(String name) {<br>      this.name = name;<br>  }<br><br>  public int getAge() {<br>      return age;<br>  }<br><br>  public void setAge(int age) {<br>      this.age = age;<br>  }<br>  }</p>\n<p>  public static void main(String[] args) {<br>  System.out.println(emps.stream().filter(emp -&gt; emp.getAge() &gt; 30).count());<br>  // 5<br>  System.out.println(emps.stream().allMatch(emp -&gt; emp.getAge() &gt; 30));<br>  // false<br>  System.out.println(emps.stream().anyMatch(emp -&gt; emp.getName().startsWith(“xiao”)));<br>  // true<br>  System.out.println(emps.stream().noneMatch(emp -&gt; emp.getAge() &lt; 10));<br>  // false<br>  }</p>\n</li>\n</ul>\n<p>}</p>\n<pre><code>\n**文章借鉴处**\n- https://blog.csdn.net/qq_28410283/article/details/80633710\n- https://miaoxinguo.github.io/java/2016/06/02/java8.2.stream.html\n- https://www.exception.site/java8/java8-stream-tutorial\n\n</code></pre>\n</u>","comments":true,"link":"","tags":[{"name":"JavaApi","slug":"JavaApi","permalink":"https://carefulhuo.github.io/tags/JavaApi/"}]},{"title":"Lambdda表达式","date":"2020-10-28T11:03:38.000Z","path":"posts/9f889f1d.html","text":"在Java的语言世界里面，除了基本的数据类型，一切都是对象，例如：String字符串、每个对象实例、数组这些都是对象。在Java中方法是不能完全独立存在的，不能将方法作为参数或者返回值给实例。注意：方法(Method),函数(Function)，在Java中是没有函数的，因为Java是一个面向对象编程的语言；函数更多的意义是用来表述面向过程的语言；又或者说”函数是大家的函数，方法是类的方法”，不过，不用这么纠结，我们可以认为在Java中方法就是函数，函数就是方法。 为什么出现Lambda表达式 从线程的构建、自定义比较器、Swing等等，这些我们都是匿名内部类的方式去书写。为了简化这些代码的书写，使得代码更加紧凑，更为了使得Java拥有函数式编程的特点。javaScript是典型的函数式编程语言，点击这里以及这里了解,函数式语言提供了一种强大的功能–闭包，闭包的特点是词法的作用域与把函数当作值来传递。虽然闭包与Lambda表达式之间存在显著差别，但是Lambda表达式至少是很好的闭包替代者。 Lambda表达式是什么 在Java中，刚开始说过，除了基本的数据类型，一切都是对象,那么Lambda表达式也是对象，所以必须依赖于一种特殊的对象类型–函数式接口(Function Interface)。Lambda表达式可以理解为刚开始说的匿名内部类函数，它没有声明方法，没有访问修饰符，没有返回值声明和名字。 Lambda表达式的特征 可选型声明：不需要声明参数类型，编译器可以统一识别参数值； 可选的参数圆括号：一个参数且类型可推导时，无需定义圆括号，但是多个参数需要定义圆括号； 可选的大括号：如果函数主体包含了一个语句，不需要大括号； 可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要显式指定表达式返回值。 Lambda表达式的用法 Lambda表达式语法：(parameters)-&gt;expression 或 (parameters)-&gt;{statements}Lambda表达式语法解析：parameters：参数 expression：表达式(一条语句) statements：陈述(多个语句) 用法 1. 替代匿名内部类 实现Runnable接口是匿名内部类的典型例子 java // 代码示例 public void runable() { new Thread(new Runnable() { @Override public void run() { System.out.println(\"the old runnable now is useing\"); } }).start(); new Thread(() -&gt; System.out.println(\"the new runnable now is useing\")).start(); } 2. 集合的迭代 使用Lambda表达式对map集合进行迭代遍历 java // 代码示例 private void listiterator() { List&lt;String&gt; languages = Arrays.asList(\"java\", \"python\", \"javaScript\"); languages.forEach(x -&gt; System.out.println(x)); } 3. 实现map 使用Lambda表达式实现map，map的作用是把一个对象换做另一个，这块涉及到Java8的新特性Stream，下一篇博客会讲。 java // 代码示例 private void mapFunction(){ List&lt;Double&gt; languages = Arrays.asList(2.0, 4.0, 6.0); languages.stream().map(x -&gt; x + x * 0.5).forEach((x) -&gt; System.out.println(x)); } 4. 实现reduce 使用Lambda表达式实现reduce，reduce是将所有的值合并为一个，这块涉及到Java8的新特性Stream，下一篇博客会讲。 java // 代码示例 private void sumFunction() { List&lt;Double&gt; cost = Arrays.asList(2.0, 4.0, 6.0); double doubleCode = cost.stream().reduce((sum, x) -&gt; sum + x).get(); System.out.println(doubleCode); } 5. 过滤操作 使用Lambda表达式实现对集合的过滤，filter过滤掉集合中的部分元素，这块涉及到Java8的新特性Stream，下一篇博客会讲。 java // 代码示例 private void filterFunction() { List&lt;Double&gt; cost = Arrays.asList(2.0, 4.0, 6.0); //方式一 cost.stream().filter(x -&gt; x &gt; 3).collect(Collectors.toList()).stream().forEach(x -&gt; System.out.println(x)); //方式二 List&lt;Double&gt; doubleCode = cost.stream().filter(x -&gt; x &gt; 3).collect(Collectors.toList()); doubleCode.stream().forEach(x -&gt; System.out.println(x)); } 6. 与工具包java.util.function配合 Java8除了在语言层面支持了函数式编程，而且增添了一个新包，包名叫java.util.function。该包包含了很多类，来支持Java的函数式编程，其中一个类是Predicate，使用java.util.function.Predicate 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。Predicate接口非常适用于做过滤。该包下的其他类放到姐妹篇里面讲解 |函数式接口名 | 作用| | — | — | |Function&lt;T, R&gt; | 接受一个参数T，返回结果R| |Predicate | 接受一个参数T，返回boolean| |Supplier | 不接受任何参数T，返回结果T| |Consumer | 接受一个参数T，不返回结果| |UnaryOperator | 继承自Function&lt;T,T&gt;，返回相同类型T的结果| |BiFunction&lt;T, U, R&gt;|接收两个参数T,U，返回结果R| |BinaryOperator|继承自BiFunction&lt;T,T,T&gt;，返回相同类型T的结果| |Runnable|实际上不接受任何参数，也不返回结果| |Comparable|实际上是接受两个相同类型的T，返回int| |Callable|不接受任何参数，返回结果V| java // 代码示例 public class test { public static void main(String[] args) { test t = new test(); List&lt;String&gt; launges = Arrays.asList(\"java\", \"shell\", \"python\"); t.functionTest.apply(launges).stream().forEach(x -&gt; System.out.println(x)); boolean flg = t.predicateTest.test(launges); System.out.println(flg); } private Function&lt;List&lt;String&gt;, List&lt;String&gt;&gt; functionTest = in -&gt; { return in.stream().filter(x -&gt; x.startsWith(\"j\")).collect(Collectors.toList()); }; private Predicate&lt;List&lt;String&gt;&gt; predicateTest = in -&gt; { return in.stream().filter(x -&gt; x.startsWith(\"j\")).count() &gt; 0; }; } Lambda表达式的优劣 优势 代码简洁 易并行计算 方便了函数式编程 改善了集合的操作(引入了Stream API) 劣势 代码可读性变差 Debug调试变得困难 不可以直接在foreach中修改外面的值 在很多非并行运算中，性能未必有传统的for性能要高 文章借鉴处 https://www.cnblogs.com/ysySelf/p/10937725.html https://www.runoob.com/java/java8-lambda-expressions.html http://blog.oneapm.com/apm-tech/226.html https://objcoding.com/2019/03/04/lambda/","content":"<p>　　在Java的语言世界里面，除了基本的数据类型，一切都是对象，例如：String字符串、每个对象实例、数组这些都是对象。在Java中方法是不能完全独立存在的，不能将方法作为参数或者返回值给实例。<strong>注意</strong>：方法(Method),函数(Function)，在Java中是没有函数的，因为Java是一个面向对象编程的语言；函数更多的意义是用来表述面向过程的语言；又或者说”函数是大家的函数，方法是类的方法”，不过，不用这么纠结，我们可以认为在Java中方法就是函数，函数就是方法。</p>\n<span id=\"more\"></span>\n<h4 id=\"为什么出现Lambda表达式\"><a href=\"#为什么出现Lambda表达式\" class=\"headerlink\" title=\"为什么出现Lambda表达式\"></a>为什么出现Lambda表达式</h4><p>　　从线程的构建、自定义比较器、<a href=\"https://zh.wikipedia.org/wiki/Swing_(Java)\">Swing</a>等等，这些我们都是匿名内部类的方式去书写。为了简化这些代码的书写，使得代码更加紧凑，更为了使得Java拥有函数式编程的特点。javaScript是典型的函数式编程语言，点击<a href=\"https://eloquentjavascript.net/1st_edition/chapter6.html\">这里</a>以及<a href=\"https://www.ibm.com/developerworks/library/wa-javascript/index.html\">这里</a>了解,函数式语言提供了一种强大的功能–闭包，闭包的特点是词法的作用域与把函数当作值来传递。虽然闭包与Lambda表达式之间存在显著差别，但是Lambda表达式至少是很好的闭包替代者。</p>\n<h4 id=\"Lambda表达式是什么\"><a href=\"#Lambda表达式是什么\" class=\"headerlink\" title=\"Lambda表达式是什么\"></a>Lambda表达式是什么</h4><p>　　在Java中，刚开始说过，除了基本的数据类型，一切都是对象,那么Lambda表达式也是对象，所以必须依赖于一种特殊的对象类型–函数式接口(Function Interface)。Lambda表达式可以理解为刚开始说的匿名内部类函数，它没有声明方法，没有访问修饰符，没有返回值声明和名字。</p>\n<h4 id=\"Lambda表达式的特征\"><a href=\"#Lambda表达式的特征\" class=\"headerlink\" title=\"Lambda表达式的特征\"></a>Lambda表达式的特征</h4><ul>\n<li>可选型声明：不需要声明参数类型，编译器可以统一识别参数值；</li>\n<li>可选的参数圆括号：一个参数且类型可推导时，无需定义圆括号，但是多个参数需要定义圆括号；</li>\n<li>可选的大括号：如果函数主体包含了一个语句，不需要大括号；</li>\n<li>可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要显式指定表达式返回值。</li>\n</ul>\n<h4 id=\"Lambda表达式的用法\"><a href=\"#Lambda表达式的用法\" class=\"headerlink\" title=\"Lambda表达式的用法\"></a>Lambda表达式的用法</h4><ul>\n<li><strong>Lambda表达式语法</strong>：(parameters)-&gt;expression 或 (parameters)-&gt;{statements}<br>Lambda表达式语法解析：parameters：参数 expression：表达式(一条语句) statements：陈述(多个语句)</li>\n<li><strong>用法</strong><br>  <strong>1. 替代匿名内部类</strong><br>  实现Runnable接口是匿名内部类的典型例子<br>  <code>java   // 代码示例   public void runable() {       new Thread(new Runnable() {           @Override           public void run() {               System.out.println(\"the old runnable now is useing\");           }       }).start();        new Thread(() -&gt; System.out.println(\"the new runnable now is useing\")).start();   }   </code><br>  <strong>2. 集合的迭代</strong><br>  使用Lambda表达式对map集合进行迭代遍历<br>  <code>java   // 代码示例   private void listiterator() {       List&lt;String&gt; languages = Arrays.asList(\"java\", \"python\", \"javaScript\");       languages.forEach(x -&gt; System.out.println(x));   }   </code><br>  <strong>3. 实现map</strong><br>  使用Lambda表达式实现map，map的作用是把一个对象换做另一个，这块涉及到Java8的新特性Stream，下一篇博客会讲。<br>  <code>java   // 代码示例   private void mapFunction(){       List&lt;Double&gt; languages = Arrays.asList(2.0, 4.0, 6.0);       languages.stream().map(x -&gt; x + x * 0.5).forEach((x) -&gt; System.out.println(x));   }   </code><br>  <strong>4. 实现reduce</strong><br>  使用Lambda表达式实现reduce，reduce是将所有的值合并为一个，这块涉及到Java8的新特性Stream，下一篇博客会讲。<br>  <code>java   // 代码示例   private void sumFunction() {       List&lt;Double&gt; cost = Arrays.asList(2.0, 4.0, 6.0);       double doubleCode = cost.stream().reduce((sum, x) -&gt; sum + x).get();       System.out.println(doubleCode);   }   </code><br>  <strong>5. 过滤操作</strong><br>  使用Lambda表达式实现对集合的过滤，filter过滤掉集合中的部分元素，这块涉及到Java8的新特性Stream，下一篇博客会讲。<br>  <code>java   // 代码示例   private void filterFunction() {       List&lt;Double&gt; cost = Arrays.asList(2.0, 4.0, 6.0);       //方式一       cost.stream().filter(x -&gt; x &gt; 3).collect(Collectors.toList()).stream().forEach(x -&gt; System.out.println(x));       //方式二       List&lt;Double&gt; doubleCode = cost.stream().filter(x -&gt; x &gt; 3).collect(Collectors.toList());       doubleCode.stream().forEach(x -&gt; System.out.println(x));   }   </code><br>  <strong>6. 与工具包java.util.function配合</strong><br>  Java8除了在语言层面支持了函数式编程，而且增添了一个新包，包名叫<strong>java.util.function</strong>。该包包含了很多类，来支持Java的函数式编程，其中一个类是Predicate，使用java.util.function.Predicate 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。Predicate接口非常适用于做过滤。该包下的其他类放到姐妹篇里面讲解<br><br>  |函数式接口名 | 作用|<br>  | — | — |<br>  |Function&lt;T, R&gt; | 接受一个参数T，返回结果R|<br>  |Predicate<t> | 接受一个参数T，返回boolean|<br>  |Supplier<t> | 不接受任何参数T，返回结果T|<br>  |Consumer<t> | 接受一个参数T，不返回结果|<br>  |UnaryOperator<t> | 继承自Function&lt;T,T&gt;，返回相同类型T的结果|<br>  |BiFunction&lt;T, U, R&gt;|接收两个参数T,U，返回结果R|<br>  |BinaryOperator<t>|继承自BiFunction&lt;T,T,T&gt;，返回相同类型T的结果|<br>  |Runnable|实际上不接受任何参数，也不返回结果|<br>  |Comparable<t>|实际上是接受两个相同类型的T，返回int|<br>  |Callable<v>|不接受任何参数，返回结果V|<br><br>  <code>java   // 代码示例   public class test {        public static void main(String[] args) {           test t = new test();            List&lt;String&gt; launges = Arrays.asList(\"java\", \"shell\", \"python\");           t.functionTest.apply(launges).stream().forEach(x -&gt; System.out.println(x));            boolean flg = t.predicateTest.test(launges);           System.out.println(flg);        }        private Function&lt;List&lt;String&gt;, List&lt;String&gt;&gt; functionTest = in -&gt; {           return in.stream().filter(x -&gt; x.startsWith(\"j\")).collect(Collectors.toList());       };        private Predicate&lt;List&lt;String&gt;&gt; predicateTest = in -&gt; {           return in.stream().filter(x -&gt; x.startsWith(\"j\")).count() &gt; 0;       };   }   </code></v></t></t></t></t></t></t></li>\n</ul>\n<h4 id=\"Lambda表达式的优劣\"><a href=\"#Lambda表达式的优劣\" class=\"headerlink\" title=\"Lambda表达式的优劣\"></a>Lambda表达式的优劣</h4><ul>\n<li>优势<ol>\n<li>代码简洁</li>\n<li>易并行计算</li>\n<li>方便了函数式编程</li>\n<li>改善了集合的操作(引入了Stream API)</li>\n</ol>\n</li>\n<li>劣势<ol>\n<li>代码可读性变差</li>\n<li>Debug调试变得困难</li>\n<li>不可以直接在foreach中修改外面的值</li>\n<li>在很多非并行运算中，性能未必有传统的for性能要高</li>\n</ol>\n</li>\n</ul>\n<hr>\n<p><strong>文章借鉴处</strong></p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/ysySelf/p/10937725.html\">https://www.cnblogs.com/ysySelf/p/10937725.html</a> </li>\n<li><a href=\"https://www.runoob.com/java/java8-lambda-expressions.html\">https://www.runoob.com/java/java8-lambda-expressions.html</a> </li>\n<li><a href=\"http://blog.oneapm.com/apm-tech/226.html\">http://blog.oneapm.com/apm-tech/226.html</a> </li>\n<li><a href=\"https://objcoding.com/2019/03/04/lambda/\">https://objcoding.com/2019/03/04/lambda/</a></li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"JavaApi","slug":"JavaApi","permalink":"https://carefulhuo.github.io/tags/JavaApi/"}]},{"title":"Java8中新的日期和时间","date":"2020-10-26T02:04:59.000Z","path":"posts/dbba2e41.html","text":"为什么我们需要新的Date和Time类！ Java8之前所有的日期类都是可变的，这就导致了线程不安全问题； java的日期和时间类的定义不一致，在java.util和java.sql中都包含日期类； java.util.Date同时包含日期和时间，但是java.sql中只包含日期，将其纳入java.sql中的是不合适的，而且更糟糕的是:这两个类中的日期类的名字都是一样的； 对于时间、时间戳、格式化及解析，没有一些明确定义的类，而且对于格式化和解析的需求，Java中有java.text.DateFormat抽象类，但是通常我们用的是SimpleDateFormate类进行格式化和解析 日期类不支持国际化，没有时区支持，即使Java引入了-java.util.Calendar和java.util.TimeZone类，但是问题依然存在。 Java8新的日期和时间API的设计原则Java8中新的日期和时间是基于JSR-310实现的,参考了绝大多数的joda-timeApi。 不变性：新的日期/时间API中，所有的类都是不可变的，实现了线程安全； 关注点分离：新的API中将人可读的日期时间和机器时间(unix timestamp)明确分离，它为日期(Date)、时间(Time)、日期时间(DateTime)、时间戳(unix timestamp)以及时区定义了不同的类； 清晰明了：新的API中，方法都被明确定义用以完成相同的行为，例如，想要拿到当前实例，可以用new()方法，在所有的类方法中都实现了formate()和parse()方法，不再是之前用单独一个类去解决，而且新的API中所有的类都使用了工厂模式和策略模式； 实用性：所有新的日期和时间API类都实现了一系列方法用以完成通用的需求，例如：加、减、格式化、解析、从日期或时间中提取单独部分等等； 可扩展性：新的日期/时间API是基于国际标准ISO 8601,其实我们也是可以将其用于非IOS的日历上 Java8中的日期和时间API包含以下包 java.time包：这是新的Java日期/时间API的基础包，所有的主要基础类都是该包的一部分，例如：LocalDate、LocalTime、LocalDateTime、Instant、Period、Duration等类。这些类都是线程安全的 java.time.chrono包：这个包为非ISO的日历标准定义了一些泛化的API，我们可以拓展AbstractChronology来创建自己的日历标准 java.time.formate包：这个包包含能够格式化和解析日期时间对象的类，在绝大数情况下，我们不应该直接使用它，因为java.time包中相应的类已经提供了格式化和解析的方法 java.time.temporal包：这个包包含一些时态对象，可以用其找出关于某个日期/时间对象的某个特定日期或时间，比如说找到某个月的第一天或最后一天，可以根据withXXX的格式进行区分 java.time.zone包：这个包支持不同的时区以及相关规则的类 Java8中引入的关于日期和时间的新类：Period和Duration类，两个类表示两个日期和时间之间的差，Period基于日期，Duration类基于时间 Period类概述：该类表示一段时间的年、月、日 使用该类中between()方法获取两个日期之间的差作为Period对像返回；// 代码示例 LocalDate startTime = LocalDate.of(2020,10,01); LocalDate endTime = LocalDate.of(2021,11,20); Period timeSub = Period.between(startTime,endTime); System.out.println(\"year:\"+timeSub.getYears()); System.out.println(\"month:\"+timeSub.getMonths()); System.out.println(\"day:\"+timeSub.getDays()); 使用该类中的isNegative()方法判断起止日期的大小(false为endTime大于startTime，否则相反)原理是根据该该方法(不需要参数)会校验Period对象中的天、月、年是否为负，为负则返回true，为正则返回false// 代码示例 LocalDate startTime = LocalDate.of(2020,10,01); LocalDate endTime = LocalDate.of(2021,11,20); Period timeSub = Period.between(startTime,endTime); System.out.println(timeSub.isNegative()); 使用该类的plusXXX()方法、minusXXX()方法可以进行日期的增加和减少// 代码示例 Period periodTime = Period.of(2020,10,26); //年 String plusYears = periodTime.plusYears(1).toString(); String minusYears = periodTime.minusYears(1).toString(); //月 String plusMonths = periodTime.plusMonths(1).toString(); String minusMonths = periodTime.minusMonths(1).toString(); //日 String plusDays = periodTime.plusDays(1).toString(); String minusDays = periodTime.minusDays(1).toString(); Duration类概述：表示秒或纳秒的时间间隔，适合处理较短的时间，且需要更高的精确性 使用该类中between()方法比较两个瞬间的差值// 代码示例 Instant start = Instant.parse(\"2020-10-12T10:12:12.00Z\"); Instant end = Instant.now(); System.out.println(end.toString()); Duration duration = Duration.between(start,end); System.out.println(duration.isNegative()); 使用该类中的isNegative()方法判断起止时间的大小(false为endTime大于startTime，否则相反)原理是根据该该方法(不需要参数)会校验Duration对象中的天、月、年是否为负，为负则返回true，为正则返回false// 代码示例(使用LocalTime也可以获取Duration对象) LocalTime startTime = LocalTime.of(1,10,30,234); LocalTime endTime = LocalTime.of(1,20,30,234); Duration duration = Duration.between(startTime,endTime); System.out.println(duration.isNegative()); 使用该类的plusXXX()方法、minusXXX()方法可以进行日期的增加和减少```java// 代码示例(使用该类中的ofDays方法也可以获取Duration对象)Duration durationDays = Duration.ofDays(1);String addDays = durationDays.plusDays(1).toString();System.out.println(durationDays.getSeconds()); Duration durationHours = Duration.ofHours(3);String minusHours = durationHours.minusHours(1).toString();System.out.println(durationHours.getSeconds()); Duration durationMinutes = Duration.ofMinutes(1);System.out.println(durationMinutes.getSeconds()); Duration durationMillis = Duration.ofMillis(1);System.out.println(durationMillis.getSeconds());System.out.println(durationMillis.getNano()); --- #### Instant类 概述：表示某个时间，不带时区的即时时间点，精确到纳秒 内部由两个Long字段组成，第一部分保存自标准Java时代到现在的秒数，第二部分保存的是纳秒数(不会超过999,999,999)。**注意：通过这种方式获取的时间戳与北京时间相差8个时区，需要修正为北京时间，通过查看源代码发现Instant.now()使用等是UTC时间Clock.systemUTC().instant()。LocalDate、LocalDateTime 的now()方法使用的是系统默认时区 不存在Instant.now()的时间问题。** 1. Instant相当于Date,以下是相互转换 ```java // 代码示例 //类方法java.time.Instant Instant instant = Instant.now(); System.out.println(instant); Instant beijingTime = Instant.now().plus(8, ChronoUnit.HOURS); System.out.println(beijingTime); //类方法java.util.Date Date date = new Date(); System.out.println(date); date = Date.from(instant); System.out.println(date); instant = date.toInstant(); System.out.println(instant); Instant类中通过固定时间转换为Instant对象的方法//根据Date转换为instant(java.util.Instant中方法) Date date = new Date(); Instant instant = Instant.ofEpochMilli(date.getTime()); System.out.println(instant); //根据毫秒转换为instant(java.util.Instant中方法) instant = Instant.ofEpochMilli(1000 * 60 * 60 * 24); System.out.println(instant); //根据秒转换为instant(java.util.Instant中方法) instant = Instant.ofEpochSecond(60 * 60 * 24 * 5); System.out.println(instant); //根据秒和纳秒转换为instant(java.util.Instant中方法)，这样得到的instant会包含纳秒的数据 1000000000纳秒（9位）=1秒 instant = Instant.ofEpochSecond(60 * 60 * 24,1000000000*60); System.out.println(instant); Instant类中的parse方法// 代码示例 //该方法的入参仅支持UTC格式的字符串，而且date结果的字符串会报出DateTimeParseException异常 Instant instant = Instant.parse(\"2020-10-26T12:10:00Z\"); System.out.println(instant); Instant类中的加减日期方法(加)plus()和(减)minus()方法// 代码示例 //ChronoUnit位于java.time.temporal,Periodjava位于Java.time //plus()方法会产生一个新的instant对象 //plus()方法给当前日期增加五天 Instant instant = Instant.now(); Instant instantAddDayOne = instant.plus(5, ChronoUnit.DAYS); Instant instantAddDayTwo = instant.plus(Period.ofDays(5)); Instant instantAddDayTwo1 = instant.plus(Duration.ofDays(5)); System.out.println(instantAddDayOne.toString()); System.out.println(instantAddDayTwo.toString()); System.out.println(instantAddDayTwo1.toString()); System.out.println(instant == instantAddDayOne); //minus()方法会产生一个新的instant对象 //minus()方法给当前日期减少五天 Instant instantSubDay = instant.minus(5, ChronoUnit.DAYS); Instant instantSubDayTwo = instant.minus(Period.ofDays(5)); Instant instantSubDayTwo1 = instant.minus(Duration.ofDays(5)); System.out.println(instantSubDay); System.out.println(instantSubDayTwo); System.out.println(instantSubDayTwo1); System.out.println(instant == instantSubDayTwo); Instant类中比较两个日期的大小// 代码示例 Instant instantNow = Instant.now(); Instant instantAddDay = instantNow.plus(Duration.ofDays(5)); //isAfter()方法判断instantAddDay是否在instantNow之后 boolean flgAfter = instantAddDay.isAfter(instantNow); System.out.println(flgAfter); //isBefore()方法判断instantAddDay是否在instantNow之前 boolean flgBefore = instantAddDay.isBefore(instantNow); System.out.println(flgBefore); //compareTo()方法比较，前者时间纳秒值大于后者返回1，小于返回-1，等于返回0 int result1 = instantAddDay.compareTo(instantNow); System.out.println(result1); int result2 = instantNow.compareTo(instantAddDay); System.out.println(result2); int result3 = instantNow.compareTo(instantNow); System.out.println(result3); Instant类计算两个日期的差值// 代码示例 Instant instantNow = Instant.now(); Instant instantAddDay = instantNow.plus(Duration.ofDays(5)); //between()方法后者比前者大，返回正数，比前者小返回负数，相等返回0(ChronoUnit.DAYS位于java.time.temporal) long result1 = ChronoUnit.DAYS.between(instantNow, instantAddDay); System.out.println(result1); long result2 = ChronoUnit.DAYS.between(instantAddDay, instantNow); System.out.println(result2); long result3 = ChronoUnit.DAYS.between(instantNow, instantNow); System.out.println(result3); LocalDateTime类概述：表示不带时区的日期及时间，替换之前的Calendar **注意:**看上去，LocalDateTime和Instant很象，但记得的是“Instant中是不带时区的即时时间点。可能有人说，即时的时间点 不就是日期＋时间么？看上去是这样的，但还是有所区别，比如LocalDateTime对于用户来说，可能就只是一个简单的日期和时间的概念，考虑如下的 例子：两个人都在2013年7月2日11点出生，第一个人是在英国出生，而第二个是在加尼福利亚，如果我们问他们是在什么时候出生的话，则他们看上去都是 在同样的时间出生（就是LocalDateTime所表达的），但如果我们根据时间线（如格林威治时间线）去仔细考察，则会发现在出生的人会比在英国出生的人稍微晚几个小时（这就是Instant所表达的概念，并且要将其转换为UTC格式的时间）。 LocalDateTime获取当前时间(系统自带默认时间)// 代码示例 LocalDateTime localDateTime = LocalDateTime.now(); System.out.println(localDateTime); LoclaDateTime类中时间加减计算(加)plusXXX()和(减)minusXXX()方法// 代码示例 // plus()和minus()方法与Instant类中相同 LocalDateTime localDateTime1 = localDateTime.plusHours(5); System.out.println(localDateTime1); System.out.println(localDateTime1 == localDateTime); LocalDateTime localDateTime2 = localDateTime.minusHours(5); System.out.println(localDateTime2); System.out.println(localDateTime2 == localDateTime); LocalDateTime显示年月日，不显示时间;显示时间，不显示年月// 代码示例 LocalDateTime localDateTime = LocalDateTime.now(); //显示年月日，且增加两个月 LocalDate localDate = localDateTime.toLocalDate().plusMonths(2); System.out.println(localDate); //显示时分秒毫秒，且减少两个小时 LocalTime localTime = localDateTime.toLocalTime().minusHours(2); System.out.println(localTime); LocalDateTime类中格式化日期的两种方式// 代码示例 //通过Instant类获取当前系统时间，ZoneId.systemDefault设置为系统默认时区 //ZoneId位于java.time LocalDateTime localDateTime1 = LocalDateTime.ofInstant(Instant.now(), ZoneId.systemDefault()); System.out.println(localDateTime1); //通过DateTimeFormatter类中的ofPattern方法获取自定义格式的系统时间，位于java.time.format String localDateTimeStr = localDateTime1.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")); System.out.println(localDateTimeStr); 文章借鉴处 https://blog.csdn.net/fragrant_no1/article/details/83988042 https://blog.csdn.net/neweastsun/article/details/88770592 https://blog.csdn.net/liubenlong007/article/details/62039628","content":"<h4 id=\"为什么我们需要新的Date和Time类！\"><a href=\"#为什么我们需要新的Date和Time类！\" class=\"headerlink\" title=\"为什么我们需要新的Date和Time类！\"></a>为什么我们需要新的Date和Time类！</h4><span id=\"more\"></span>\n<ul>\n<li>Java8之前所有的日期类都是可变的，这就导致了线程不安全问题；</li>\n<li>java的日期和时间类的定义不一致，在java.util和java.sql中都包含日期类；</li>\n<li>java.util.Date同时包含日期和时间，但是java.sql中只包含日期，将其纳入java.sql中的是不合适的，而且更糟糕的是:这两个类中的日期类的名字都是一样的；</li>\n<li>对于时间、时间戳、格式化及解析，没有一些明确定义的类，而且对于格式化和解析的需求，Java中有java.text.DateFormat抽象类，但是通常我们用的是SimpleDateFormate类进行格式化和解析</li>\n<li>日期类不支持国际化，没有时区支持，即使Java引入了-java.util.Calendar和java.util.TimeZone类，但是问题依然存在。<!-- more --></li>\n</ul>\n<h4 id=\"Java8新的日期和时间API的设计原则\"><a href=\"#Java8新的日期和时间API的设计原则\" class=\"headerlink\" title=\"Java8新的日期和时间API的设计原则\"></a>Java8新的日期和时间API的设计原则</h4><p>Java8中新的日期和时间是基于JSR-310实现的,参考了绝大多数的<a href=\"https://www.joda.org/joda-time/\">joda-time</a>Api。</p>\n<ul>\n<li>不变性：新的日期/时间API中，所有的类都是不可变的，实现了线程安全；</li>\n<li>关注点分离：新的API中将人可读的日期时间和机器时间(unix timestamp)明确分离，它为日期(Date)、时间(Time)、日期时间(DateTime)、时间戳(unix timestamp)以及时区定义了不同的类；</li>\n<li>清晰明了：新的API中，方法都被<strong>明确定义</strong>用以完成<strong>相同的行为</strong>，例如，想要拿到当前实例，可以用new()方法，在所有的类方法中都实现了formate()和parse()方法，不再是之前用单独一个类去解决，而且新的API中所有的类都使用了工厂模式和策略模式；</li>\n<li>实用性：所有新的日期和时间API类都实现了一系列方法用以完成通用的需求，例如：加、减、格式化、解析、从日期或时间中提取单独部分等等；</li>\n<li>可扩展性：新的日期/时间API是基于<a href=\"https://baike.baidu.com/item/ISO%208601\">国际标准ISO 8601</a>,其实我们也是可以将其用于非IOS的日历上</li>\n</ul>\n<h4 id=\"Java8中的日期和时间API包含以下包\"><a href=\"#Java8中的日期和时间API包含以下包\" class=\"headerlink\" title=\"Java8中的日期和时间API包含以下包\"></a>Java8中的日期和时间API包含以下包</h4><ul>\n<li>java.time包：这是新的Java日期/时间API的基础包，所有的主要基础类都是该包的一部分，例如：LocalDate、LocalTime、LocalDateTime、Instant、Period、Duration等类。这些类都是线程安全的</li>\n<li>java.time.chrono包：这个包为非ISO的日历标准定义了一些泛化的API，我们可以拓展AbstractChronology来创建自己的日历标准</li>\n<li>java.time.formate包：这个包包含能够格式化和解析日期时间对象的类，<strong>在绝大数情况下，我们不应该直接使用它</strong>，因为java.time包中相应的类已经提供了格式化和解析的方法</li>\n<li>java.time.temporal包：这个包包含一些时态对象，可以用其找出关于某个日期/时间对象的某个特定日期或时间，比如说找到某个月的第一天或最后一天，可以根据withXXX的格式进行区分</li>\n<li>java.time.zone包：这个包支持不同的时区以及相关规则的类</li>\n</ul>\n<hr>\n<p>Java8中引入的关于日期和时间的新类：Period和Duration类，两个类表示两个日期和时间之间的差，Period基于日期，Duration类基于时间</p>\n<h4 id=\"Period类\"><a href=\"#Period类\" class=\"headerlink\" title=\"Period类\"></a>Period类</h4><p>概述：该类表示一段时间的年、月、日</p>\n<ol>\n<li>使用该类中between()方法获取两个日期之间的差作为Period对像返回；<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\nLocalDate startTime <span class=\"token operator\">=</span> LocalDate<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLocalDate endTime <span class=\"token operator\">=</span> LocalDate<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPeriod timeSub <span class=\"token operator\">=</span> Period<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">,</span>endTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"year:\"</span><span class=\"token operator\">+</span>timeSub<span class=\"token punctuation\">.</span><span class=\"token function\">getYears</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"month:\"</span><span class=\"token operator\">+</span>timeSub<span class=\"token punctuation\">.</span><span class=\"token function\">getMonths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"day:\"</span><span class=\"token operator\">+</span>timeSub<span class=\"token punctuation\">.</span><span class=\"token function\">getDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>使用该类中的isNegative()方法判断起止日期的大小<br>(false为endTime大于startTime，否则相反)原理是根据该该方法(不需要参数)会校验Period对象中的天、月、年是否为负，为负则返回true，为正则返回false<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\nLocalDate startTime <span class=\"token operator\">=</span> LocalDate<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLocalDate endTime <span class=\"token operator\">=</span> LocalDate<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPeriod timeSub <span class=\"token operator\">=</span> Period<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">,</span>endTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>timeSub<span class=\"token punctuation\">.</span><span class=\"token function\">isNegative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>使用该类的plusXXX()方法、minusXXX()方法可以进行日期的增加和减少<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\nPeriod periodTime <span class=\"token operator\">=</span> Period<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//年</span>\nString plusYears <span class=\"token operator\">=</span> periodTime<span class=\"token punctuation\">.</span><span class=\"token function\">plusYears</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString minusYears <span class=\"token operator\">=</span> periodTime<span class=\"token punctuation\">.</span><span class=\"token function\">minusYears</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//月</span>\nString plusMonths <span class=\"token operator\">=</span> periodTime<span class=\"token punctuation\">.</span><span class=\"token function\">plusMonths</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString minusMonths <span class=\"token operator\">=</span> periodTime<span class=\"token punctuation\">.</span><span class=\"token function\">minusMonths</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//日</span>\nString plusDays <span class=\"token operator\">=</span> periodTime<span class=\"token punctuation\">.</span><span class=\"token function\">plusDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString minusDays <span class=\"token operator\">=</span> periodTime<span class=\"token punctuation\">.</span><span class=\"token function\">minusDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<hr>\n<h4 id=\"Duration类\"><a href=\"#Duration类\" class=\"headerlink\" title=\"Duration类\"></a>Duration类</h4><p>概述：表示秒或纳秒的时间间隔，适合处理较短的时间，且需要更高的精确性</p>\n<ol>\n<li>使用该类中between()方法比较两个瞬间的差值<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\nInstant start <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-10-12T10:12:12.00Z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInstant end <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDuration duration <span class=\"token operator\">=</span> Duration<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">.</span><span class=\"token function\">isNegative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>使用该类中的isNegative()方法判断起止时间的大小<br>(false为endTime大于startTime，否则相反)原理是根据该该方法(不需要参数)会校验Duration对象中的天、月、年是否为负，为负则返回true，为正则返回false<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例(使用LocalTime也可以获取Duration对象)</span>\nLocalTime startTime <span class=\"token operator\">=</span> LocalTime<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLocalTime endTime  <span class=\"token operator\">=</span> LocalTime<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDuration duration <span class=\"token operator\">=</span> Duration<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">,</span>endTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">.</span><span class=\"token function\">isNegative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>使用该类的plusXXX()方法、minusXXX()方法可以进行日期的增加和减少<br>```java<br>// 代码示例(使用该类中的ofDays方法也可以获取Duration对象)<br>Duration durationDays = Duration.ofDays(1);<br>String addDays = durationDays.plusDays(1).toString();<br>System.out.println(durationDays.getSeconds());</li>\n</ol>\n<p>Duration durationHours = Duration.ofHours(3);<br>String minusHours = durationHours.minusHours(1).toString();<br>System.out.println(durationHours.getSeconds());</p>\n<p>Duration durationMinutes = Duration.ofMinutes(1);<br>System.out.println(durationMinutes.getSeconds());</p>\n<p>Duration durationMillis = Duration.ofMillis(1);<br>System.out.println(durationMillis.getSeconds());<br>System.out.println(durationMillis.getNano());</p>\n<pre><code>\n---\n#### Instant类\n概述：表示某个时间，不带时区的即时时间点，精确到纳秒\n\n内部由两个Long字段组成，第一部分保存自标准Java时代到现在的秒数，第二部分保存的是纳秒数(不会超过999,999,999)。**注意：通过这种方式获取的时间戳与北京时间相差8个时区，需要修正为北京时间，通过查看源代码发现Instant.now()使用等是UTC时间Clock.systemUTC().instant()。LocalDate、LocalDateTime 的now()方法使用的是系统默认时区 不存在Instant.now()的时间问题。**\n1. Instant相当于Date,以下是相互转换\n```java\n// 代码示例\n//类方法java.time.Instant\nInstant instant = Instant.now();\nSystem.out.println(instant);\nInstant beijingTime = Instant.now().plus(8, ChronoUnit.HOURS);\nSystem.out.println(beijingTime);\n\n//类方法java.util.Date\nDate date = new Date();\nSystem.out.println(date);\n\ndate = Date.from(instant);\nSystem.out.println(date);\n\ninstant = date.toInstant();\nSystem.out.println(instant);\n</code></pre>\n<ol start=\"2\">\n<li>Instant类中通过固定时间转换为Instant对象的方法<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//根据Date转换为instant(java.util.Instant中方法)</span>\nDate date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInstant instant <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span><span class=\"token function\">ofEpochMilli</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//根据毫秒转换为instant(java.util.Instant中方法)</span>\ninstant <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span><span class=\"token function\">ofEpochMilli</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//根据秒转换为instant(java.util.Instant中方法)</span>\ninstant <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span><span class=\"token function\">ofEpochSecond</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//根据秒和纳秒转换为instant(java.util.Instant中方法)，这样得到的instant会包含纳秒的数据 1000000000纳秒（9位）=1秒</span>\ninstant <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span><span class=\"token function\">ofEpochSecond</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000000000</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>Instant类中的parse方法<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\n<span class=\"token comment\" spellcheck=\"true\">//该方法的入参仅支持UTC格式的字符串，而且date结果的字符串会报出DateTimeParseException异常</span>\nInstant instant <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-10-26T12:10:00Z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>Instant类中的加减日期方法(加)plus()和(减)minus()方法<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\n<span class=\"token comment\" spellcheck=\"true\">//ChronoUnit位于java.time.temporal,Periodjava位于Java.time</span>\n<span class=\"token comment\" spellcheck=\"true\">//plus()方法会产生一个新的instant对象</span>\n<span class=\"token comment\" spellcheck=\"true\">//plus()方法给当前日期增加五天</span>\nInstant instant <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInstant instantAddDayOne <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> ChronoUnit<span class=\"token punctuation\">.</span>DAYS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInstant instantAddDayTwo <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>Period<span class=\"token punctuation\">.</span><span class=\"token function\">ofDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInstant instantAddDayTwo1 <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instantAddDayOne<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instantAddDayTwo<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instantAddDayTwo1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instant <span class=\"token operator\">==</span> instantAddDayOne<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//minus()方法会产生一个新的instant对象</span>\n<span class=\"token comment\" spellcheck=\"true\">//minus()方法给当前日期减少五天</span>\nInstant instantSubDay <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> ChronoUnit<span class=\"token punctuation\">.</span>DAYS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInstant instantSubDayTwo <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>Period<span class=\"token punctuation\">.</span><span class=\"token function\">ofDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInstant instantSubDayTwo1 <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instantSubDay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instantSubDayTwo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instantSubDayTwo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instant <span class=\"token operator\">==</span> instantSubDayTwo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>Instant类中比较两个日期的大小<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\nInstant instantNow <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInstant instantAddDay <span class=\"token operator\">=</span> instantNow<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//isAfter()方法判断instantAddDay是否在instantNow之后</span>\n<span class=\"token keyword\">boolean</span> flgAfter <span class=\"token operator\">=</span> instantAddDay<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>instantNow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flgAfter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//isBefore()方法判断instantAddDay是否在instantNow之前</span>\n<span class=\"token keyword\">boolean</span> flgBefore <span class=\"token operator\">=</span> instantAddDay<span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span>instantNow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flgBefore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//compareTo()方法比较，前者时间纳秒值大于后者返回1，小于返回-1，等于返回0</span>\n<span class=\"token keyword\">int</span> result1 <span class=\"token operator\">=</span> instantAddDay<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>instantNow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> result2 <span class=\"token operator\">=</span> instantNow<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>instantAddDay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> result3 <span class=\"token operator\">=</span> instantNow<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>instantNow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>Instant类计算两个日期的差值<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\nInstant instantNow <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInstant instantAddDay <span class=\"token operator\">=</span> instantNow<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//between()方法后者比前者大，返回正数，比前者小返回负数，相等返回0(ChronoUnit.DAYS位于java.time.temporal)</span>\n<span class=\"token keyword\">long</span> result1 <span class=\"token operator\">=</span> ChronoUnit<span class=\"token punctuation\">.</span>DAYS<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>instantNow<span class=\"token punctuation\">,</span> instantAddDay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> result2 <span class=\"token operator\">=</span> ChronoUnit<span class=\"token punctuation\">.</span>DAYS<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>instantAddDay<span class=\"token punctuation\">,</span> instantNow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> result3 <span class=\"token operator\">=</span> ChronoUnit<span class=\"token punctuation\">.</span>DAYS<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>instantNow<span class=\"token punctuation\">,</span> instantNow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<hr>\n<h4 id=\"LocalDateTime类\"><a href=\"#LocalDateTime类\" class=\"headerlink\" title=\"LocalDateTime类\"></a>LocalDateTime类</h4><p>概述：表示不带时区的日期及时间，替换之前的Calendar</p>\n<p>**注意:**看上去，LocalDateTime和Instant很象，但记得的是“Instant中是不带时区的即时时间点。可能有人说，即时的时间点 不就是日期＋时间么？看上去是这样的，但还是有所区别，比如LocalDateTime对于用户来说，可能就只是一个简单的日期和时间的概念，考虑如下的 例子：两个人都在2013年7月2日11点出生，第一个人是在英国出生，而第二个是在加尼福利亚，如果我们问他们是在什么时候出生的话，则他们看上去都是 在同样的时间出生（就是LocalDateTime所表达的），但如果我们根据时间线（如格林威治时间线）去仔细考察，则会发现在出生的人会比在英国出生的人稍微晚几个小时（这就是Instant所表达的概念，并且要将其转换为UTC格式的时间）。</p>\n<ol>\n<li>LocalDateTime获取当前时间(系统自带默认时间)<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\nLocalDateTime localDateTime <span class=\"token operator\">=</span> LocalDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>LoclaDateTime类中时间加减计算(加)plusXXX()和(减)minusXXX()方法<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\n<span class=\"token comment\" spellcheck=\"true\">// plus()和minus()方法与Instant类中相同</span>\nLocalDateTime localDateTime1 <span class=\"token operator\">=</span> localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">plusHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime1 <span class=\"token operator\">==</span> localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLocalDateTime localDateTime2 <span class=\"token operator\">=</span> localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">minusHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime2 <span class=\"token operator\">==</span> localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>LocalDateTime显示年月日，不显示时间;显示时间，不显示年月<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\nLocalDateTime localDateTime <span class=\"token operator\">=</span> LocalDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//显示年月日，且增加两个月</span>\nLocalDate localDate <span class=\"token operator\">=</span> localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">plusMonths</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//显示时分秒毫秒，且减少两个小时</span>\nLocalTime localTime <span class=\"token operator\">=</span> localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">minusHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>LocalDateTime类中格式化日期的两种方式<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代码示例</span>\n<span class=\"token comment\" spellcheck=\"true\">//通过Instant类获取当前系统时间，ZoneId.systemDefault设置为系统默认时区</span>\n<span class=\"token comment\" spellcheck=\"true\">//ZoneId位于java.time</span>\nLocalDateTime localDateTime1 <span class=\"token operator\">=</span> LocalDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">ofInstant</span><span class=\"token punctuation\">(</span>Instant<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ZoneId<span class=\"token punctuation\">.</span><span class=\"token function\">systemDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//通过DateTimeFormatter类中的ofPattern方法获取自定义格式的系统时间，位于java.time.format</span>\nString localDateTimeStr <span class=\"token operator\">=</span> localDateTime1<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>DateTimeFormatter<span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTimeStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<hr>\n<p><strong>文章借鉴处</strong></p>\n<ul>\n<li><a href=\"https://blog.csdn.net/fragrant_no1/article/details/83988042\">https://blog.csdn.net/fragrant_no1/article/details/83988042</a></li>\n<li><a href=\"https://blog.csdn.net/neweastsun/article/details/88770592\">https://blog.csdn.net/neweastsun/article/details/88770592</a></li>\n<li><a href=\"https://blog.csdn.net/liubenlong007/article/details/62039628\">https://blog.csdn.net/liubenlong007/article/details/62039628</a></li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"JavaApi","slug":"JavaApi","permalink":"https://carefulhuo.github.io/tags/JavaApi/"}]},{"title":"服务器性能问题排查","date":"2020-09-22T07:57:28.000Z","path":"posts/acb0bcb4.html","text":"服务器性能问题一般有两种： 高内存占用、高CPU占用，比如应用程序高内存占用，可能是因为文件读写、频繁的IO、内存频繁GC，进一步占用了内存和CPU；比如应用程序高CPU占用，可能是因为大任务计算、死循环、卡死、不断超时或者重试。所以需要具体问题具体分析。 高内存占用现象是应用响应慢、内存溢出、应用进程直接死掉。体现到代码里面可能是死锁和饥饿，因为资源不释放;需要关注，空闲可用内存还有多少，buff[(Page Cache)是一种高速缓存，用于CPU和内存之间的缓冲 ,是文件系统的cache。]和cache还有多少； 高CPU占用现象是应用进程还活着，但是页面出不来，不响应。体现到代码里面可能是存在活锁。在CPU占用高的情况下，需要知道是用户（user）还是系统（sys）的占用率高，如果是user的CPU占用高，说明应用在做消耗CPU过高的操作；如果是sys的CPU占用高，说明系统在做大量的IO的操作；如果占用率高的线程频繁变动，则可能是CPU时间片不断调度，线程唤醒一下而后换另一个线程跑，需要看多线程任务是否存在大计算问题，以及线程池设置是否合适！ 注释：死锁：由于执行顺序的原因，互相持有对方正在等待的锁；多个线程在相同的资源上发生等待饥饿：高优先级线程一直占用CPU，导致低优先级线程一直处于一个等待进入同步块的状态活锁：并未产生线程阻塞，但是由于某种问题的存在，导致无法继续执行的情况","content":"<p>服务器性能问题一般有两种：<br>　　高内存占用、高CPU占用，比如应用程序高内存占用，可能是因为文件读写、频繁的IO、内存频繁GC，进一步占用了内存和CPU；比如应用程序高CPU占用，可能是因为大任务计算、死循环、卡死、不断超时或者重试。所以需要具体问题具体分析。</p>\n<span id=\"more\"></span>\n\n<p>　　高内存占用现象是应用响应慢、内存溢出、应用进程直接死掉。体现到代码里面可能是<strong>死锁</strong>和<strong>饥饿</strong>，因为资源不释放;需要关注，空闲可用内存还有多少，buff[(Page Cache)是一种高速缓存，用于CPU和内存之间的缓冲 ,是文件系统的cache。]和cache还有多少；</p>\n<p>　　高CPU占用现象是应用进程还活着，但是页面出不来，不响应。体现到代码里面可能是存在<strong>活锁</strong>。在CPU占用高的情况下，需要知道是用户（user）还是系统（sys）的占用率高，如果是user的CPU占用高，说明应用在做消耗CPU过高的操作；如果是sys的CPU占用高，说明系统在做大量的IO的操作；如果占用率高的线程频繁变动，则可能是CPU时间片不断调度，线程唤醒一下而后换另一个线程跑，需要看多线程任务是否存在大计算问题，以及线程池设置是否合适！</p>\n<p><strong>注释</strong>：<br>死锁：由于执行顺序的原因，互相持有对方正在等待的锁；多个线程在相同的资源上发生等待<br>饥饿：高优先级线程一直占用CPU，导致低优先级线程一直处于一个等待进入同步块的状态<br>活锁：并未产生线程阻塞，但是由于某种问题的存在，导致无法继续执行的情况</p>\n","comments":true,"link":"","tags":[{"name":"Server","slug":"Server","permalink":"https://carefulhuo.github.io/tags/Server/"}]},{"title":"https基础概念","date":"2020-07-05T07:32:59.000Z","path":"posts/8ac28a0d.html","text":"Http协议 什么是HTTP协议？ HTTP协议是一种超文本传输协议，是一种请求，响应式协议。 HTTP协议的特点 支持浏览器(客户端)/服务器模式 简单快速，浏览器向服务器发起请求时，只需要传送请求方式和路径 灵活，可以发送任意类型的数据 无状态，Http是无状态协议，无状态是指对事物处理没有记忆能力 HTTP消息 HTTP消息有几种？ 两种，一个请求消息，一个响应消息。 请求和响应的定义 当浏览器向服务器发送请求数据的时候，即http请求消息 当服务器向浏览器发送响应数据的时候，即http响应消息 HTTP请求消息 http请求包含几个部分？ 三个部分，请求方式，资源路径，http版本 http常用的请求方式 请求方式 含义 GET 请求获取请求行URL所标识的资源 POST 向指定资源提交数据，请求服务器进行处理 HEAD 请求获取由URL所标识资源的响应消息头 PUT 将网页放到指定的URL位置上(上传/移动) DELETE 请求服务器删除URL所标识的资源 TRACE 请求服务器回送收到的请求消息，主要用于测试和诊断 CONNECT 保留将来使用 OPTIONS 请求查询服务器的性能，或查询与资源相关的选项和需求 注意：浏览器表单默认的是GET请求 请求方式 区别 GET 请求方式的参数信息都会在URL地址栏显示，而且通过请求参数传递数据，所以最多不超过1KB大小 POST 请求内容隐藏在实体内容中，通过实体内容进行数据传递，所以没有数据大小限制 请求头字段 含义 Accept:text/html 客户端希望接收HTML文本 Accept:image/gif 客户端希望接收GIF格式的图像资源 Accept:image/* 客户端可以接收所有image格式的子类型 Accept:&amp;#42;/&amp;#42; 客户端可以接收任意类型的数据 Accept-Charset 告知服务端，客户端所用的字符集 Accept-Encoding 用于指定客户端能够进行解码的数据编码方式 Accept-Language 客户端期望服务端返回那个国家的语言文档 Host 指定资源所在的主机和端口号 Max-Forward 指当前请求可以经过的代理服务器数量,每经过一个，数量减一 Referer 单击超链接向服务器发送GET请求时，浏览器会在发送的请求中加上该字段(防止盗链) User-Agent 指定浏览器或者其他客户端程序所使用的操作系统及版本，浏览器及版本，浏览器渲染引擎，浏览器语言 HTTP响应消息 HTTP响应消息包含几个部分 三个部分，响应状态行、响应消息头实体内容 响应状态行 HTTP版本 1.0、1.1 状态码及描述信息 状态码 描述信息 1xx 请求已经接受，需要继续处理 2xx 请求已经被服务器成功理解并接受 3xx 为完成请求，客户端需进一步细化请求 4xx 客户端的请求有错误 5xx 服务端出现错误 常用的状态码 状态码 状态信息 描述信息 200 正常 客户端请求成功，响应消息返回正常的请求结果 400 请求无效 客户端不正确的语法格式 403 禁止 服务端理解客户端的请求，但是拒绝处理 404 找不到 表示服务器不存在客户端存在的资源 500 内部服务器错误 大部分情况下是服务器端的CGI，jsp, ASP出现错误 响应消息头 说明 服务器端向客户端传递附加信息，包括服务程序名，被请求资源需要的认证方式，重定向地址，客户端请求资源的最后修改时间。 常见的响应消息头 响应消息头 描述内容 Accept-Range 说明服务器是否接收客户端使用Range请求头字段请求资源 Age 指出当前网页文档可以在客户端或代理服务器中缓存的有效时间 Etag 用于向客户端传送代表实体内容特征的标记信息，这些标记信息也称为实体标签，每个版本资源的实体标签是不同的，通过这个标签可以判断不同时间下，同一资源路径下的实体内容是否相同 Location 用于通知客户端获取请求文档的新地址 Retry-After 该字段可以与503状态码配合使用，告诉客户端什么时候可以重新发送请求，也可以与任何一个3xx状态码配合使用，告诉客户端处理重定向的最小延时时间 Server 用于指定服务器软件产品的名称 Vary 用于指定影响了服务器所生成的响应内容的那些请求头字段名 Refresh 用于告诉浏览器自动刷新页面的时间，是以秒为基本单位 Content-Disposition 用于服务器希望浏览器直接处理响应的实体内容，而是让用户选择将实体内容保存到一个文件中 实体内容 服务器根据客户端的请求所做出的处理结果 HTTP(请求或响应)消息中的其他字段 通用字段 字段名 字段描述 Cache-Control 用于通知位于客户端与服务器之间的代理服务器如何使用已缓存的页面 Connection 用于指定处理完本次请求/响应后，客户端与服务器是否还要保持连接 Date 用于表示HTTP消息产生的当前时间 Pragma 通知代理服务器和客户端如何使用缓存页面- Transfer-Encoding 通过该字段通知客户端响应数据的长度，因为HTTP1.1协议是持久化协议 Via 用于指定HTTP消息所途径的代理服务器所使用的协议与主机名 Warning 用于说明其他头字段和状态码不能说明的一些警告信息 实体头字段 字段名 字段描述 Allow 指定请求资源所支持的请求方式 Content-Language 用于指定返回网页文档的国家语言类型 Content-Length 用于表示实体内容的长度 Content-Location 用于指定响应消息中实体内容的实际位置路径(当一个请求资源有多个国家语言版本的时候，每个国家语言版本都有自己的位置，这时，请求资源路径和响应的实体内容的实际位置路径可能是不同的) Content-Type Content-Encoding 用于指定实体内容的压缩编码格式，服务器端对实体内容的压缩不影响实体内容的MIME类型，被压缩的实体内容在客户端被解压的时候，MIME类型与Content-Type头字段指定的类型一致","content":"<h4 id=\"Http协议\"><a href=\"#Http协议\" class=\"headerlink\" title=\"Http协议\"></a>Http协议</h4><ol>\n<li><strong>什么是HTTP协议？</strong><br> HTTP协议是一种超文本传输协议，是一种请求，响应式协议。<span id=\"more\"></span></li>\n<li><strong>HTTP协议的特点</strong><ol>\n<li>支持浏览器(客户端)/服务器模式</li>\n<li>简单快速，浏览器向服务器发起请求时，只需要传送请求方式和路径</li>\n<li>灵活，可以发送任意类型的数据</li>\n<li>无状态，Http是无状态协议，无状态是指对事物处理没有记忆能力</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h4 id=\"HTTP消息\"><a href=\"#HTTP消息\" class=\"headerlink\" title=\"HTTP消息\"></a>HTTP消息</h4><ol>\n<li><p><strong>HTTP消息有几种？</strong></p>\n<p> 两种，一个请求消息，一个响应消息。</p>\n</li>\n<li><p><strong>请求和响应的定义</strong></p>\n<ol>\n<li>当浏览器向服务器发送请求数据的时候，即http请求消息</li>\n<li>当服务器向浏览器发送响应数据的时候，即http响应消息</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h4 id=\"HTTP请求消息\"><a href=\"#HTTP请求消息\" class=\"headerlink\" title=\"HTTP请求消息\"></a>HTTP请求消息</h4><ol>\n<li><p><strong>http请求包含几个部分？</strong></p>\n<p> 三个部分，请求方式，资源路径，http版本</p>\n</li>\n<li><p><strong>http常用的请求方式</strong></p>\n<table>\n<thead>\n<tr>\n<th>请求方式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>请求获取请求行URL所标识的资源</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>向指定资源提交数据，请求服务器进行处理</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>请求获取由URL所标识资源的响应消息头</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>将网页放到指定的URL位置上(上传/移动)</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>请求服务器删除URL所标识的资源</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>请求服务器回送收到的请求消息，主要用于测试和诊断</td>\n</tr>\n<tr>\n<td>CONNECT</td>\n<td>保留将来使用</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>请求查询服务器的性能，或查询与资源相关的选项和需求</td>\n</tr>\n</tbody></table>\n<p> <em>注意：浏览器表单默认的是GET请求</em></p>\n<table>\n<thead>\n<tr>\n<th>请求方式</th>\n<th>区别</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>请求方式的参数信息都会在URL地址栏显示，而且通过请求参数传递数据，所以最多不超过1KB大小</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>请求内容隐藏在实体内容中，通过实体内容进行数据传递，所以没有数据大小限制</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>请求头字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept:text/html</td>\n<td>客户端希望接收HTML文本</td>\n</tr>\n<tr>\n<td>Accept:image/gif</td>\n<td>客户端希望接收GIF格式的图像资源</td>\n</tr>\n<tr>\n<td>Accept:image/*</td>\n<td>客户端可以接收所有image格式的子类型</td>\n</tr>\n<tr>\n<td>Accept:&amp;#42;/&amp;#42;</td>\n<td>客户端可以接收任意类型的数据</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>告知服务端，客户端所用的字符集</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>用于指定客户端能够进行解码的数据编码方式</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>客户端期望服务端返回那个国家的语言文档</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>指定资源所在的主机和端口号</td>\n</tr>\n<tr>\n<td>Max-Forward</td>\n<td>指当前请求可以经过的代理服务器数量,每经过一个，数量减一</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>单击超链接向服务器发送GET请求时，浏览器会在发送的请求中加上该字段(防止盗链)</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>指定浏览器或者其他客户端程序所使用的操作系统及版本，浏览器及版本，浏览器渲染引擎，浏览器语言</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<h4 id=\"HTTP响应消息\"><a href=\"#HTTP响应消息\" class=\"headerlink\" title=\"HTTP响应消息\"></a>HTTP响应消息</h4><ol>\n<li><p><strong>HTTP响应消息包含几个部分</strong></p>\n<p> 三个部分，响应状态行、响应消息头实体内容</p>\n</li>\n<li><p><strong>响应状态行</strong></p>\n<ol>\n<li><p><em>HTTP版本</em><br> 1.0、1.1</p>\n</li>\n<li><p><em>状态码及描述信息</em></p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>描述信息</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1xx</td>\n<td>请求已经接受，需要继续处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>请求已经被服务器成功理解并接受</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>为完成请求，客户端需进一步细化请求</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>客户端的请求有错误</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务端出现错误</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><em>常用的状态码</em></p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>状态信息</th>\n<th>描述信息</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>200</td>\n<td>正常</td>\n<td>客户端请求成功，响应消息返回正常的请求结果</td>\n</tr>\n<tr>\n<td>400</td>\n<td>请求无效</td>\n<td>客户端不正确的语法格式</td>\n</tr>\n<tr>\n<td>403</td>\n<td>禁止</td>\n<td>服务端理解客户端的请求，但是拒绝处理</td>\n</tr>\n<tr>\n<td>404</td>\n<td>找不到</td>\n<td>表示服务器不存在客户端存在的资源</td>\n</tr>\n<tr>\n<td>500</td>\n<td>内部服务器错误</td>\n<td>大部分情况下是服务器端的CGI，jsp, ASP出现错误</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><p><strong>响应消息头</strong></p>\n<ol>\n<li><p><em>说明</em></p>\n<p> 服务器端向客户端传递附加信息，包括服务程序名，被请求资源需要的认证方式，重定向地址，客户端请求资源的最后修改时间。</p>\n</li>\n<li><p><em>常见的响应消息头</em></p>\n<table>\n<thead>\n<tr>\n<th>响应消息头</th>\n<th>描述内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept-Range</td>\n<td>说明服务器是否接收客户端使用Range请求头字段请求资源</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>指出当前网页文档可以在客户端或代理服务器中缓存的有效时间</td>\n</tr>\n<tr>\n<td>Etag</td>\n<td>用于向客户端传送代表实体内容特征的标记信息，这些标记信息也称为实体标签，每个版本资源的实体标签是不同的，通过这个标签可以判断不同时间下，同一资源路径下的实体内容是否相同</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>用于通知客户端获取请求文档的新地址</td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>该字段可以与503状态码配合使用，告诉客户端什么时候可以重新发送请求，也可以与任何一个3xx状态码配合使用，告诉客户端处理重定向的最小延时时间</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>用于指定服务器软件产品的名称</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>用于指定影响了服务器所生成的响应内容的那些请求头字段名</td>\n</tr>\n<tr>\n<td>Refresh</td>\n<td>用于告诉浏览器自动刷新页面的时间，是以秒为基本单位</td>\n</tr>\n<tr>\n<td>Content-Disposition</td>\n<td>用于服务器希望浏览器直接处理响应的实体内容，而是让用户选择将实体内容保存到一个文件中</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><p><strong>实体内容</strong><br> 服务器根据客户端的请求所做出的处理结果</p>\n</li>\n</ol>\n<h4 id=\"HTTP-请求或响应-消息中的其他字段\"><a href=\"#HTTP-请求或响应-消息中的其他字段\" class=\"headerlink\" title=\"HTTP(请求或响应)消息中的其他字段\"></a>HTTP(请求或响应)消息中的其他字段</h4><ol>\n<li><p><strong>通用字段</strong></p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Cache-Control</td>\n<td>用于通知位于客户端与服务器之间的代理服务器如何使用已缓存的页面</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>用于指定处理完本次请求/响应后，客户端与服务器是否还要保持连接</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>用于表示HTTP消息产生的当前时间</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>通知代理服务器和客户端如何使用缓存页面-</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>通过该字段通知客户端响应数据的长度，因为HTTP1.1协议是持久化协议</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>用于指定HTTP消息所途径的代理服务器所使用的协议与主机名</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>用于说明其他头字段和状态码不能说明的一些警告信息</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>实体头字段</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Allow</td>\n<td>指定请求资源所支持的请求方式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>用于指定返回网页文档的国家语言类型</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>用于表示实体内容的长度</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>用于指定响应消息中实体内容的实际位置路径(当一个请求资源有多个国家语言版本的时候，每个国家语言版本都有自己的位置，这时，请求资源路径和响应的实体内容的实际位置路径可能是不同的)</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td></td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>用于指定实体内容的压缩编码格式，服务器端对实体内容的压缩不影响实体内容的MIME类型，被压缩的实体内容在客户端被解压的时候，MIME类型与Content-Type头字段指定的类型一致</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n","comments":true,"link":"","tags":[{"name":"网络","slug":"网络","permalink":"https://carefulhuo.github.io/tags/%E7%BD%91%E7%BB%9C/"}]}]