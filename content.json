[{"title":"deploy插件的使用","date":"2020-12-16T13:16:24.000Z","path":"posts/d4eda90d/","text":"deploy插件的使用第一种方式 项目引用maven之后，通过idea的侧边栏直接使用，具体位置如图所示： 此时项目中的pom文件配置如下图所示： 此时就可以上传jar包到指定的仓库 注意：使用该种方式如果出现下面的报错，可以使用第二种方式 1Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy (default-deploy) on project mdb-board: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in -DaltDeploymentRepository=id::layout::url parameter -&gt; [Help 1] 第二种方式 打开cmd(命令提示符)(本人是win10，搞不起高大上的mbp)，进入到需上传jar的所在位置，一般位于项目的target目录下 然后执行如下代码所示的maven命令即可，12345678mvn deploy:deploy-file -DgroupId=com.ai.chinapost.crm.mdb -DartifactId=mdb-board-facade -Dversion=1.0.0-SNAPSHOT -Dpacckaging=jar -Dfile=mdb-board-facade-1.0.0-SNAPSHOT.jar -DrepositoryId=nexus-snapshots-level-1 -Durl=http://IP地址/nexus/content/repositories/bj-crm-snapshots/ DgroupId、DartifactId、Dversion、Dpacckaging要跟项目的pom文件保持一致，否则会有问题； Dfile直接写文件名即可，如果不在同一个目录下，需要在file后面写上文件的绝对路径。 DrepositoryId写仓库标识id， Durl写私服的仓库地址，一般可以通过maven的setting.xml或者打开nexus-&gt;repositories菜单，可以看到该路径。 注意 使用第二种方式有如下报错的解决方案： 第一个问题1Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy-file (default-cli) on project standalone-pom: Failed to deploy artifacts: Could not transfer artifact com.zhenai.dakehu:dakehu-commons:jar:1.0.0-20171212.105921-1 from/to maven-snapshots (http://112.124.33.150:8081/repository/maven-snapshots/): Failed to transfer file: http://112.124.33.150:8081/repository/maven-snapshots/com/zhenai/dakehu/dakehu-commons/1.0.0-SNAPSHOT/dakehu-commons-1.0.0-20171212.105921-1.jar. neuxs 帐号密码是否正确 maven setting.xml 中仓库认证的 id 不对 maven-snapshots // ===》这个必须和 nexus DrepositoryId 对应的仓库标识(id)一致 第二个问题1Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy-file (default-cli) on project standalone-pom: Cannot deploy artifact from the local repository: D:\\Program Files\\maven\\apache-maven-3.5.2-bin\\repository\\com\\ai\\chinapost\\crm\\mdb\\mdb-board-facade\\1.0.0-SNAPSHOT\\mdb-board-facade-1.0.0-SNAPSHOT.jar -&gt; [Help 1] jar包的位置不对，不能在本地仓库直接上传jar包到仓库，需要修改jar包到项目的target目录下 小知识： maven package：打包到本项目，一般是在项目target目录下。 maven install：打包会安装到本地仓库。","content":"<h4 id=\"deploy插件的使用\"><a href=\"#deploy插件的使用\" class=\"headerlink\" title=\"deploy插件的使用\"></a>deploy插件的使用</h4><h5 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h5><a id=\"more\"></a>\n<ol>\n<li>项目引用maven之后，通过idea的侧边栏直接使用，具体位置如图所示：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/deploy_01.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li>此时项目中的pom文件配置如下图所示：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/deploy_02.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li>此时就可以上传jar包到指定的仓库</li>\n</ol>\n<hr>\n<p><strong>注意</strong>：使用该种方式如果出现下面的报错，可以使用第二种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:<span class=\"number\">2.8</span><span class=\"number\">.2</span>:deploy (<span class=\"keyword\">default</span>-deploy) on project mdb-board: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in -DaltDeploymentRepository=id::layout::url parameter -&gt; [Help <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h5><ol>\n<li>打开cmd(命令提示符)(本人是win10，搞不起高大上的mbp)，进入到需上传jar的所在位置，一般位于项目的target目录下</li>\n<li>然后执行如下代码所示的maven命令即可，<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy:deploy-file </span><br><span class=\"line\">-DgroupId=com.ai.chinapost.crm.mdb </span><br><span class=\"line\">-DartifactId=mdb-board-facade </span><br><span class=\"line\">-Dversion=<span class=\"number\">1.0</span><span class=\"number\">.0</span>-SNAPSHOT </span><br><span class=\"line\">-Dpacckaging=jar </span><br><span class=\"line\">-Dfile=mdb-board-facade-<span class=\"number\">1.0</span><span class=\"number\">.0</span>-SNAPSHOT.jar </span><br><span class=\"line\">-DrepositoryId=nexus-snapshots-level-<span class=\"number\">1</span> </span><br><span class=\"line\">-Durl=http:<span class=\"comment\">//IP地址/nexus/content/repositories/bj-crm-snapshots/</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>DgroupId、DartifactId、Dversion、Dpacckaging要跟项目的pom文件保持一致，否则会有问题；</li>\n<li>Dfile直接写文件名即可，如果不在同一个目录下，需要在file后面写上文件的绝对路径。</li>\n<li>DrepositoryId写仓库标识id，</li>\n<li>Durl写私服的仓库地址，一般可以通过maven的setting.xml或者打开nexus-&gt;repositories菜单，可以看到该路径。</li>\n</ul>\n<p><strong>注意</strong> 使用第二种方式有如下报错的解决方案：</p>\n<ol>\n<li>第一个问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:<span class=\"number\">2.7</span>:deploy-file (<span class=\"keyword\">default</span>-cli) on project standalone-pom: Failed to deploy artifacts: Could not transfer artifact com.zhenai.dakehu:dakehu-commons:jar:<span class=\"number\">1.0</span><span class=\"number\">.0</span>-<span class=\"number\">20171212.105921</span>-<span class=\"number\">1</span> from/to maven-snapshots (http:<span class=\"comment\">//112.124.33.150:8081/repository/maven-snapshots/): Failed to transfer file: http://112.124.33.150:8081/repository/maven-snapshots/com/zhenai/dakehu/dakehu-commons/1.0.0-SNAPSHOT/dakehu-commons-1.0.0-20171212.105921-1.jar.</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><p>neuxs 帐号密码是否正确</p>\n</li>\n<li><p>maven setting.xml 中仓库认证的 id 不对</p>\n</li>\n<li><p><id>maven-snapshots</id> // ===》这个必须和 nexus DrepositoryId 对应的仓库标识(id)一致</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>第二个问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:<span class=\"number\">2.7</span>:deploy-file (<span class=\"keyword\">default</span>-cli) on project standalone-pom: Cannot deploy artifact from the local repository: D:\\Program Files\\maven\\apache-maven-<span class=\"number\">3.5</span><span class=\"number\">.2</span>-bin\\repository\\com\\ai\\chinapost\\crm\\mdb\\mdb-board-facade\\<span class=\"number\">1.0</span><span class=\"number\">.0</span>-SNAPSHOT\\mdb-board-facade-<span class=\"number\">1.0</span><span class=\"number\">.0</span>-SNAPSHOT.jar -&gt; [Help <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>jar包的位置不对，不能在本地仓库直接上传jar包到仓库，需要修改jar包到项目的target目录下</li>\n</ul>\n<hr>\n<p><strong>小知识</strong>：</p>\n<ul>\n<li>maven package：打包到本项目，一般是在项目target目录下。</li>\n<li>maven install：打包会安装到本地仓库。</li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"Maven","slug":"Maven","permalink":"https://carefulhuo.github.io/tags/Maven/"}]},{"title":"AES加密及解密","date":"2020-12-08T08:52:35.000Z","path":"posts/5498b849/","text":"AES加密及解密(请注意方法说明和方法使用) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677public class AesUtil &#123; static &#123; Security.addProvider(new BouncyCastleProvider()); &#125; private static final String ALGORITHM = \"AES/ECB/PKCS7Padding\"; /** * AES加密 * * @param content 需加密的字符串 * @param key 密钥 * @return */ public static byte[] encrypt(String content, String key) &#123; try &#123; Cipher cipher = Cipher.getInstance(ALGORITHM); byte[] byteContent = content.getBytes(\"utf-8\"); cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(Base64Utils.decodeFromString(key), \"AES\")); byte[] result = cipher.doFinal(byteContent); return result; &#125; catch (NoSuchPaddingException e) &#123; e.printStackTrace(); &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); &#125; catch (UnsupportedEncodingException e) &#123; e.printStackTrace(); &#125; catch (InvalidKeyException e) &#123; e.printStackTrace(); &#125; catch (IllegalBlockSizeException e) &#123; e.printStackTrace(); &#125; catch (BadPaddingException e) &#123; e.printStackTrace(); &#125; return null; &#125; /** * AES解密 * * @param content 加密后的字节数组 * @param key * @return */ public static byte[] decrypt(byte[] content, String key) &#123; try &#123; SecretKeySpec secretKey = new SecretKeySpec(Base64Utils.decodeFromString(key), \"AES\"); Cipher cipher = Cipher.getInstance(ALGORITHM); cipher.init(Cipher.DECRYPT_MODE, secretKey); byte[] result = cipher.doFinal(content); return result; &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); &#125; catch (NoSuchPaddingException e) &#123; e.printStackTrace(); &#125; catch (InvalidKeyException e) &#123; e.printStackTrace(); &#125; catch (IllegalBlockSizeException e) &#123; e.printStackTrace(); &#125; catch (BadPaddingException e) &#123; e.printStackTrace(); &#125; return null; &#125; public static void main(String[] args) &#123; // AES加密 String crm20190608 = Base64Utils.encodeToString(AesUtil.encrypt(\"Crm20190608\", \"lRJKZnfee/7jJbuqGY0U8w==\")); // AES解密 String decryptres = new String(decrypt AesUtil.decrypt(Base64Utils.decodeFromString(crm20190608), \"lRJKZnfee/7jJbuqGY0U8w==\")); &#125;&#125;","content":"<p>AES加密及解密(请注意方法说明和方法使用)</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AesUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        Security.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ALGORITHM = <span class=\"string\">\"AES/ECB/PKCS7Padding\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * AES加密</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content 需加密的字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key     密钥</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] encrypt(String content, String key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] byteContent = content.getBytes(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">            cipher.init(Cipher.ENCRYPT_MODE, <span class=\"keyword\">new</span> SecretKeySpec(Base64Utils.decodeFromString(key), <span class=\"string\">\"AES\"</span>));</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] result = cipher.doFinal(byteContent);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BadPaddingException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * AES解密</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content 加密后的字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] decrypt(<span class=\"keyword\">byte</span>[] content, String key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            SecretKeySpec secretKey = <span class=\"keyword\">new</span> SecretKeySpec(Base64Utils.decodeFromString(key), <span class=\"string\">\"AES\"</span>);</span><br><span class=\"line\">            Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class=\"line\">            cipher.init(Cipher.DECRYPT_MODE, secretKey);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] result = cipher.doFinal(content);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BadPaddingException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// AES加密</span></span><br><span class=\"line\">        String crm20190608 = Base64Utils.encodeToString(AesUtil.encrypt(<span class=\"string\">\"Crm20190608\"</span>, <span class=\"string\">\"lRJKZnfee/7jJbuqGY0U8w==\"</span>));</span><br><span class=\"line\">        <span class=\"comment\">// AES解密</span></span><br><span class=\"line\">        String decryptres = <span class=\"keyword\">new</span> String(decrypt AesUtil.decrypt(Base64Utils.decodeFromString(crm20190608), <span class=\"string\">\"lRJKZnfee/7jJbuqGY0U8w==\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","comments":true,"link":"","tags":[{"name":"Tools","slug":"Tools","permalink":"https://carefulhuo.github.io/tags/Tools/"}]},{"title":"生成哈希值","date":"2020-12-08T08:38:57.000Z","path":"posts/b2a9e1a0/","text":"生成哈希值 123456789101112131415161718192021222324252627282930313233// 哈希函数/散列算法// 根据某个值进行hash值计算，确保唯一性public class HashUtils &#123; private static final String ALGORITHM = \"SHA-256\"; public static String sha256Hex(byte[] bytes)&#123; MessageDigest messageDigest; String encodeStr = \"\"; try &#123; messageDigest = MessageDigest.getInstance(ALGORITHM); messageDigest.update(bytes); encodeStr = byte2Hex(messageDigest.digest()); &#125; catch (NoSuchAlgorithmException e) &#123; log.error(\"未知的hash算法&#123;&#125;\", ALGORITHM); &#125; return encodeStr; &#125; private static String byte2Hex(byte[] bytes)&#123; StringBuffer stringBuffer = new StringBuffer(); String temp = null; for (int i=0;i&lt;bytes.length;i++)&#123; temp = Integer.toHexString(bytes[i] &amp; 0xFF); if (temp.length()==1)&#123; //1得到一位的进行补0操作 stringBuffer.append(\"0\"); &#125; stringBuffer.append(temp); &#125; return stringBuffer.toString(); &#125;&#125;","content":"<p>生成哈希值</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 哈希函数/散列算法</span></span><br><span class=\"line\"><span class=\"comment\">// 根据某个值进行hash值计算，确保唯一性</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ALGORITHM = <span class=\"string\">\"SHA-256\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">sha256Hex</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span></span>&#123;</span><br><span class=\"line\">        MessageDigest messageDigest;</span><br><span class=\"line\">        String encodeStr = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            messageDigest = MessageDigest.getInstance(ALGORITHM);</span><br><span class=\"line\">            messageDigest.update(bytes);</span><br><span class=\"line\">            encodeStr = byte2Hex(messageDigest.digest());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"未知的hash算法&#123;&#125;\"</span>, ALGORITHM);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> encodeStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">byte2Hex</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span></span>&#123;</span><br><span class=\"line\">        StringBuffer stringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        String temp = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;bytes.length;i++)&#123;</span><br><span class=\"line\">            temp = Integer.toHexString(bytes[i] &amp; <span class=\"number\">0xFF</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.length()==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//1得到一位的进行补0操作</span></span><br><span class=\"line\">                stringBuffer.append(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stringBuffer.append(temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stringBuffer.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","comments":true,"link":"","tags":[{"name":"Tools","slug":"Tools","permalink":"https://carefulhuo.github.io/tags/Tools/"}]},{"title":"Mysql中的索引","date":"2020-12-08T08:07:12.000Z","path":"posts/dedbcdc9/","text":"为什么会出现索引索引的出现是为了提高数据查询的效率，就像书的目录一样 索引的常见模型哈希表哈希表是一种以键-值(key-value)存储数据的结构，我们只需要输入待查找的键即key，就可以找到对应的value值。哈希的思路很简单，把值放到数组里面，用一个哈希函数把key换算成一个确定的位置，然后把value值放入数组的这个位置。但是，多个key经过哈希函数计算会出现同一个值的情况，处理这种情况的方法其中一种是拉出一个链表，跟Java中的ArrayList集合有点类似。 哈希示意图 图上的user_id都不是递增的，这样做的好处是增加数据的时候很快，但是缺点是不是有序的，通过哈希查询区间数据的时候，是很慢的，因为你需要把全表都扫描一遍，所以哈希表适用等值查询的场景，比如一些适用NOSQL引擎的数据库(Memcached) 有序数组 有序数组示意图 有序数组在等值查询和范围查询场景中的能力是非常优秀的，假设图中的user_id都是不重复，那么数据在表内存储的时候都是有序的，按照身份证号进行递增排序，此时根据user_id查询对应的名字，通过二分法可以快速找到，时间复杂度为O(log(N))；而且对于范围查询也是支持的，对于查询[user_id_x,user_id_y]区间的user，通过二分法找到第一个大于id_card_x的id，然后向右遍历，找到第一个大于user_id_y的id,退出循环即可。仅仅看查询效率的话，有序数组是最好的数据结构，但是更新数据的时候，往中间插入一个数据，需要移动的数据太多，效率很差。所以有序数组只适用于静态数据引擎，所谓静态数据，也就是不会再修改的数据。 二叉搜索树 二叉搜索树示意图 二叉搜索树的特点是父子节点左边的值小于父子节点，右边的值大于父子节点，如图所示，如果要查询id_card_2的值，按照顺序就是UserA -&gt; UserC -&gt; UserF -&gt; User2 这个路径得到。这个时间复杂度是 O(log(N))。为了维持这个时间复杂度，就必须是平衡二叉树，为了这个平衡二叉树，更新的时间复杂度也是O(log(N))。那么树可以有二叉，就可以有多叉。多叉树表示一个父节点有多个子节点，子节点的大小从左到右依次是递增的。二叉树的搜索效率是最高的，但是实际上大多数数据库引擎却不用它，是因为索引不光存储在内存中,还存储在硬盘上，如果数据越来越多，则意味着二叉树的树高也就越来越大，一次查询就可能访问磁盘中很多个数据块，为了减少磁盘中数据块的访问次数，可以使用N叉树 注意N叉树的这个N取决于数据块的大小，在Innodb模型中，一个整数字段索引的N大约是1200(MySql默认一个节点的长度为16K，一个整数（bigint）字段索引的长度为 8B,另外每个索引还跟着6B的指向其子树的指针；所以16K/14B ≈ 1170),那么树高为4的时候，可以存储1200的3次方个值，而且树根的值总是存储在内存中，那么最多需要查询三次数据块就行了。N叉树因为读写性能的优势和适配磁盘的访问模式，被广泛应用于数据库的引擎设计 Innodb索引模型在Mysql中，索引和事务一样都是在存储引擎层实现的，所以没有统一的索引标准，即不同存储引擎的索引的工作方式是不一样的，而且即使多个存储引擎使用同一个类型的索引，那么索引的底层实现也可能是不一样的。那么Innodb的索引模型是B+树，为什么上面在说N叉树的时候，已经说了，下面专门说Innodb的索引模型","content":"<h4 id=\"为什么会出现索引\"><a href=\"#为什么会出现索引\" class=\"headerlink\" title=\"为什么会出现索引\"></a>为什么会出现索引</h4><p>索引的出现是为了提高数据查询的效率，就像书的目录一样</p>\n<a id=\"more\"></a>\n<h4 id=\"索引的常见模型\"><a href=\"#索引的常见模型\" class=\"headerlink\" title=\"索引的常见模型\"></a>索引的常见模型</h4><h5 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h5><p>哈希表是一种以键-值(key-value)存储数据的结构，我们只需要输入待查找的键即key，就可以找到对应的value值。哈希的思路很简单，把值放到数组里面，用一个哈希函数把key换算成一个确定的位置，然后把value值放入数组的这个位置。但是，多个key经过哈希函数计算会出现同一个值的情况，处理这种情况的方法其中一种是拉出一个链表，跟Java中的ArrayList集合有点类似。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/mysqlOfIndex_01.png\" alt=\"哈希示意图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">哈希示意图</div>\n            </figure>\n<p>图上的user_id都不是递增的，这样做的好处是增加数据的时候很快，但是缺点是不是有序的，通过哈希查询区间数据的时候，是很慢的，因为你需要把全表都扫描一遍，所以<strong>哈希表适用等值查询</strong>的场景，比如一些适用NOSQL引擎的数据库(Memcached)</p>\n<h5 id=\"有序数组\"><a href=\"#有序数组\" class=\"headerlink\" title=\"有序数组\"></a>有序数组</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/mysqlOfindex_02.png\" alt=\"有序数组示意图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">有序数组示意图</div>\n            </figure>\n<p>有序数组在等值查询和范围查询场景中的能力是非常优秀的，<br>假设图中的user_id都是不重复，那么数据在表内存储的时候都是有序的，按照身份证号进行递增排序，此时根据user_id查询对应的名字，通过二分法可以快速找到，时间复杂度为O(log(N))；而且对于范围查询也是支持的，对于查询[user_id_x,user_id_y]区间的user，通过二分法找到第一个大于id_card_x的id，然后向右遍历，找到第一个大于user_id_y的id,退出循环即可。<br>仅仅看查询效率的话，有序数组是最好的数据结构，但是更新数据的时候，往中间插入一个数据，需要移动的数据太多，效率很差。所以<strong>有序数组只适用于静态数据引擎</strong>，所谓静态数据，也就是不会再修改的数据。</p>\n<h5 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://littleloveblog.oss-cn-beijing.aliyuncs.com/img/mysqlOfIndex_03.png\" alt=\"二叉搜索树示意图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">二叉搜索树示意图</div>\n            </figure>\n<p>二叉搜索树的特点是父子节点左边的值小于父子节点，右边的值大于父子节点，<br>如图所示，如果要查询id_card_2的值，按照顺序就是UserA -&gt; UserC -&gt; UserF -&gt; User2 这个路径得到。这个时间复杂度是 O(log(N))。为了维持这个时间复杂度，就必须是平衡二叉树，为了这个平衡二叉树，更新的时间复杂度也是O(log(N))。那么树可以有二叉，就可以有多叉。多叉树表示一个父节点有多个子节点，子节点的大小从左到右依次是递增的。<strong>二叉树的搜索效率是最高的，但是实际上大多数数据库引擎却不用它，是因为索引不光存储在内存中,还存储在硬盘上，如果数据越来越多，则意味着二叉树的树高也就越来越大，一次查询就可能访问磁盘中很多个数据块，为了减少磁盘中数据块的访问次数，可以使用N叉树</strong></p>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>N叉树的这个N取决于数据块的大小，在Innodb模型中，一个整数字段索引的N大约是1200(MySql默认一个节点的长度为16K，一个整数（bigint）字段索引的长度为 8B,另外每个索引还跟着6B的指向其子树的指针；所以16K/14B ≈ 1170),那么树高为4的时候，可以存储1200的3次方个值，而且树根的值总是存储在内存中，那么最多需要查询三次数据块就行了。N叉树因为读写性能的优势和适配磁盘的访问模式，被广泛应用于数据库的引擎设计</p>\n<h4 id=\"Innodb索引模型\"><a href=\"#Innodb索引模型\" class=\"headerlink\" title=\"Innodb索引模型\"></a>Innodb索引模型</h4><p>在Mysql中，索引和事务一样都是在存储引擎层实现的，所以没有统一的索引标准，即不同存储引擎的索引的工作方式是不一样的，而且即使多个存储引擎使用同一个类型的索引，那么索引的底层实现也可能是不一样的。那么Innodb的索引模型是B+树，为什么上面在说N叉树的时候，已经说了，下面专门说Innodb的索引模型</p>\n","comments":true,"link":"","tags":[{"name":"Mysql","slug":"Mysql","permalink":"https://carefulhuo.github.io/tags/Mysql/"}]},{"title":"java8中Optional静态类","date":"2020-11-01T09:31:08.000Z","path":"posts/bb929634/","text":"Optional简介 在Java8中的StreamAPI有很多操作都返回了Optional对象，那么这个对象是用来干嘛的，用来解决空指针问题，产生的一个类。也可以认为这是一个容器对象，因为它可以保存类型为T的对象，也可以保存null Optional类源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116import java.util.NoSuchElementException;import java.util.Objects;import java.util.function.Consumer;import java.util.function.Function;import java.util.function.Predicate;import java.util.function.Supplier; public final class Optional&lt;T&gt; &#123; private static final Optional&lt;?&gt; EMPTY = new Optional&lt;&gt;(); private final T value; private Optional() &#123; this.value = null; &#125; public static &lt;T&gt; Optional&lt;T&gt; empty() &#123; @SuppressWarnings(\"unchecked\") Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY; return t; &#125; private Optional(T value) &#123; this.value = Objects.requireNonNull(value); &#125; public static &lt;T&gt; Optional&lt;T&gt; of(T value) &#123; return new Optional&lt;&gt;(value); &#125; public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value) &#123; return value == null ? empty() : of(value); &#125; public T get() &#123; if (value == null) &#123; throw new NoSuchElementException(\"No value present\"); &#125; return value; &#125; public boolean isPresent() &#123; return value != null; &#125; public void ifPresent(Consumer&lt;? super T&gt; consumer) &#123; if (value != null) consumer.accept(value); &#125; public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate) &#123; Objects.requireNonNull(predicate); if (!isPresent()) return this; else return predicate.test(value) ? this : empty(); &#125; public &lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper) &#123; Objects.requireNonNull(mapper); if (!isPresent()) return empty(); else &#123; return Optional.ofNullable(mapper.apply(value)); &#125; &#125; public &lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper) &#123; Objects.requireNonNull(mapper); if (!isPresent()) return empty(); else &#123; return Objects.requireNonNull(mapper.apply(value)); &#125; &#125; public T orElse(T other) &#123; return value != null ? value : other; &#125; public T orElseGet(Supplier&lt;? extends T&gt; other) &#123; return value != null ? value : other.get(); &#125; public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) throws X &#123; if (value != null) &#123; return value; &#125; else &#123; throw exceptionSupplier.get(); &#125; &#125; @Override public boolean equals(Object obj) &#123; if (this == obj) &#123; return true; &#125; if (!(obj instanceof Optional)) &#123; return false; &#125; Optional&lt;?&gt; other = (Optional&lt;?&gt;) obj; return Objects.equals(value, other.value); &#125; @Override public int hashCode() &#123; return Objects.hashCode(value); &#125; @Override public String toString() &#123; return value != null ? String.format(\"Optional[%s]\", value) : \"Optional.empty\"; &#125;&#125; 创建Optional类该类创建对象的方法被私有化了，所以不能直接创建该对象，提供了三个静态方法创建实例对象 1234567891011121314151617181920private Optional() &#123; this.value = null;&#125; private Optional(T value) &#123; this.value = Objects.requireNonNull(value);&#125;// 1.直接返回类加载后，就创建的空对象public static &lt;T&gt; Optional&lt;T&gt; empty() &#123; @SuppressWarnings(\"unchecked\") Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY; return t;&#125;// 2.直接new一个Optional对象public static &lt;T&gt; Optional&lt;T&gt; of(T value) &#123; return new Optional&lt;&gt;(value);&#125;// 3.判断是否为null，是直接返回类加载后，就创建的空对象，否则直接new一个对象public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value) &#123; return value == null ? empty() : of(value); 获取泛型对象的方法1234567891011121314151617181920212223// 1. 直接获取，如果为null，则抛出异常public T get() &#123; if (value == null) &#123; throw new NoSuchElementException(\"No value present\"); &#125; return value;&#125;// 2. 获取对象时，设置一个默认值进行获取，如果为null，则返回默认值public T orElse(T other) &#123; return value != null ? value : other;&#125;// 3. 与第2个方式相同，只是该方法的参数是函数式参数public T orElseGet(Supplier&lt;? extends T&gt; other) &#123; return value != null ? value : other.get();&#125;// 4. 与第1个方式相同，但可以返回特定的异常public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) throws X &#123; if (value != null) &#123; return value; &#125; else &#123; throw exceptionSupplier.get(); &#125;&#125; Optional类的其他方法1234567891011121314151617181920212223242526272829303132333435// 1. 判断值是否为nullpublic boolean isPresent() &#123; return value != null;&#125;// 2. 如果值不为空，对值做一些特定操作public void ifPresent(Consumer&lt;? super T&gt; consumer) &#123; if (value != null) consumer.accept(value);&#125;// 3. 筛选符合规则的对象public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate) &#123; Objects.requireNonNull(predicate); if (!isPresent()) return this; else return predicate.test(value) ? this : empty();&#125;// 4. 改变对象的类型,然后返回public &lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper) &#123; Objects.requireNonNull(mapper); if (!isPresent()) return empty(); else &#123; return Optional.ofNullable(mapper.apply(value)); &#125;&#125;// 5. 合并相同对象类型,然后返回public &lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper) &#123; Objects.requireNonNull(mapper); if (!isPresent()) return empty(); else &#123; return Objects.requireNonNull(mapper.apply(value)); &#125;&#125; 文章借鉴处 https://blog.csdn.net/qq_28410283/article/details/80952768","content":"<h4 id=\"Optional简介\"><a href=\"#Optional简介\" class=\"headerlink\" title=\"Optional简介\"></a>Optional简介</h4><p>  在Java8中的StreamAPI有很多操作都返回了Optional<T>对象，那么这个对象是用来干嘛的，用来解决空指针问题，产生的一个类。也可以认为这是一个容器对象，因为它可以保存类型为T的对象，也可以保存null</p>\n<a id=\"more\"></a>\n\n<h4 id=\"Optional类源码\"><a href=\"#Optional类源码\" class=\"headerlink\" title=\"Optional类源码\"></a>Optional类源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Optional&lt;?&gt; EMPTY = <span class=\"keyword\">new</span> Optional&lt;&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> T value;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Optional</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">        Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Optional</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = Objects.requireNonNull(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">of</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Optional&lt;&gt;(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">ofNullable</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value == <span class=\"keyword\">null</span> ? empty() : of(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">\"No value present\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPresent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ifPresent</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; consumer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            consumer.accept(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Optional&lt;T&gt; <span class=\"title\">filter</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; predicate)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(predicate);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isPresent())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> predicate.test(value) ? <span class=\"keyword\">this</span> : empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;U&gt; <span class=\"function\">Optional&lt;U&gt; <span class=\"title\">map</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; mapper)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(mapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isPresent())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> empty();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;U&gt; <span class=\"function\">Optional&lt;U&gt; <span class=\"title\">flatMap</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, Optional&lt;U&gt;&gt; mapper)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(mapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isPresent())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> empty();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Objects.requireNonNull(mapper.apply(value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">orElse</span><span class=\"params\">(T other)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value != <span class=\"keyword\">null</span> ? value : other;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">orElseGet</span><span class=\"params\">(Supplier&lt;? extends T&gt; other)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value != <span class=\"keyword\">null</span> ? value : other.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;X extends Throwable&gt; <span class=\"function\">T <span class=\"title\">orElseThrow</span><span class=\"params\">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class=\"keyword\">throws</span> X </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> exceptionSupplier.get();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(obj <span class=\"keyword\">instanceof</span> Optional)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        Optional&lt;?&gt; other = (Optional&lt;?&gt;) obj;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.equals(value, other.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.hashCode(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value != <span class=\"keyword\">null</span> ? String.format(<span class=\"string\">\"Optional[%s]\"</span>, value) : <span class=\"string\">\"Optional.empty\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建Optional类\"><a href=\"#创建Optional类\" class=\"headerlink\" title=\"创建Optional类\"></a>创建Optional类</h4><p>该类创建对象的方法被私有化了，所以不能直接创建该对象，提供了三个静态方法创建实例对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Optional</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Optional</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = Objects.requireNonNull(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1.直接返回类加载后，就创建的空对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2.直接new一个Optional对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">of</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Optional&lt;&gt;(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3.判断是否为null，是直接返回类加载后，就创建的空对象，否则直接new一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">ofNullable</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value == <span class=\"keyword\">null</span> ? empty() : of(value);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取泛型对象的方法\"><a href=\"#获取泛型对象的方法\" class=\"headerlink\" title=\"获取泛型对象的方法\"></a>获取泛型对象的方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 直接获取，如果为null，则抛出异常</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">\"No value present\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2. 获取对象时，设置一个默认值进行获取，如果为null，则返回默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">orElse</span><span class=\"params\">(T other)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value != <span class=\"keyword\">null</span> ? value : other;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3. 与第2个方式相同，只是该方法的参数是函数式参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">orElseGet</span><span class=\"params\">(Supplier&lt;? extends T&gt; other)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value != <span class=\"keyword\">null</span> ? value : other.get();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 4. 与第1个方式相同，但可以返回特定的异常</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;X extends Throwable&gt; <span class=\"function\">T <span class=\"title\">orElseThrow</span><span class=\"params\">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class=\"keyword\">throws</span> X </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> exceptionSupplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Optional类的其他方法\"><a href=\"#Optional类的其他方法\" class=\"headerlink\" title=\"Optional类的其他方法\"></a>Optional类的其他方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 判断值是否为null</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPresent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2. 如果值不为空，对值做一些特定操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ifPresent</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; consumer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        consumer.accept(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3. 筛选符合规则的对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Optional&lt;T&gt; <span class=\"title\">filter</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; predicate)</span> </span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(predicate);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPresent())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> predicate.test(value) ? <span class=\"keyword\">this</span> : empty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 4. 改变对象的类型,然后返回</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; <span class=\"function\">Optional&lt;U&gt; <span class=\"title\">map</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; mapper)</span> </span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(mapper);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPresent())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> empty();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 5. 合并相同对象类型,然后返回</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; <span class=\"function\">Optional&lt;U&gt; <span class=\"title\">flatMap</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, Optional&lt;U&gt;&gt; mapper)</span> </span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(mapper);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPresent())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> empty();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.requireNonNull(mapper.apply(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>文章借鉴处</strong></p>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_28410283/article/details/80952768\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_28410283/article/details/80952768</a></li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"JavaApi","slug":"JavaApi","permalink":"https://carefulhuo.github.io/tags/JavaApi/"}]},{"title":"java8中的Stream'sAPI","date":"2020-10-31T11:34:46.000Z","path":"posts/cbdcb8a8/","text":"Stream’APi简介 Stream’API是Java8中的新特性，基于Lambda表达式，对Collection(集合)的各种操作有了很大的改变，极大的提升了编码效率和代码的可读性。Stream有串行和并行两种模式，并行模式会自动创建多个线程，使用fork(join)Java7特性，来拆分任务和加速处理过程。Stream是一种类似IO流的东西，但是并不相同，实质是对集合操作的一种高度抽象，而且更重要的是，Stream不是数据结构，是不存储数据的，数据存储在底层的集合中，或者根据需要产生出来(例如Stream进行终端操作的时候，生成新的集合)。 Stream抽象概念 Stream将要处理的数据看作一个流，流在管道中流动，可以在管道的节点上对流进行筛选，排序，聚合等操作，也就是数据流在管道中经过中间操作(intermediate operation),最后由终端操作(terminal operation)来得到前面处理过的数据，可以抽象的看作一种类似通过sql查询数据的方式。 Stream的特征 Stream不是数据结构，是不存储数据的； Stream的构成数据源是集合、数组，I/O channel，generate等等； Stream的中间操作会返还流对象本身，这样就形成了一个管道； Stream的中间操作类似sql语句，比如filter(筛选), map(元素映射), reduce(聚合), find(查询), match(匹配), sorted(排序)等； Stream的迭代跟for和foreach在集合外显式迭代不同，Stream是内部迭代，基于访问者模式(Visitor)实现； Stream有串行和并行两种模式； Stream用法如何创建Stream流 stream() − 为集合创建串行流。 parallelStream() − 为集合创建并行流。1234567891011121314151617181920212223242526272829303132333435363738// 代码示例// 集合创建流 Collection接口增加了Steam方法()List&lt;String&gt; listStr = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\");Stream&lt;String&gt; steamStr = listStr.stream();steamStr.forEach(str -&gt; System.out.println(str));Set&lt;String&gt; setStr = ZoneId.getAvailableZoneIds();Stream&lt;String&gt; steamSetStr = setStr.stream();steamSetStr.forEach(str -&gt; System.out.println(str));// 从数组创建流 Arrays类中增加stream(T[] array)方法String[] strs = &#123;\"java\", \"python\", \"shell\", \"javaScript\"&#125;;Stream&lt;String&gt; stringStream = Arrays.stream(strs);// 从静态方法中创建Stream&lt;String&gt; staticStream1 = Stream.of(\"java\", \"python\", \"shell\", \"javaScript\");staticStream1.forEach(str -&gt; System.out.println(str));// 使用iterate静态方法(迭代器的方式)创建无限大小的流，需配合limit使用，防止内存溢出// 会一直增加数据，没有上限Stream&lt;Integer&gt; staticStream2 = Stream.iterate(0, x -&gt; x + 1).limit(10);staticStream2.forEach(integer -&gt; System.out.println(integer));// 使用generate静态方法创建无限大小的流，需要配合limit使用，防止内存溢出// generate方式创建的无限流最大值是Long.MAX_VALUERandom random = new Random();Stream&lt;Integer&gt; staticStream3 = Stream.generate(() -&gt; random.nextInt()).limit(10);staticStream3.forEach(integer -&gt; System.out.println(integer));// 其他方式java.io.BufferedReader.lines()java.util.stream.IntStream.range()java.nio.file.Files.walk()java.util.SpliteratorRandom.ints()BitSet.stream()Pattern.splitAsStream(java.lang.CharSequence)JarFile.stream() Stream流的中间操作 该表的作用是Stream流中间操作方法的参数类型 函数式接口名 作用 Function&lt;T, R&gt; 接受一个参数T，返回结果R Predicate 接受一个参数T，返回boolean Supplier 不接受任何参数T，返回结果T Consumer 接受一个参数T，不返回结果 UnaryOperator 继承自Function&lt;T,T&gt;，返回相同类型T的结果 BiFunction&lt;T, U, R&gt; 接收两个参数T,U，返回结果R BinaryOperator 继承自BiFunction&lt;T,T,T&gt;，返回相同类型T的结果 Runnable 实际上不接受任何参数，也不返回结果 Comparable 实际上是接受两个相同类型的T，返回int Callable 不接受任何参数，返回结果V 过滤操作 filter()将符合条件的所有元素(数据)转移到新流中。filter的参数类型是Predicate1234// 代码示例List&lt;String&gt; listStr = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\");Stream&lt;String&gt; steamStr = listStr.stream();steamStr.filter(s -&gt; s.startsWith(\"j\")).forEach(s -&gt; System.out.println(s)); 转换操作 map()将所有数据经过处理之后(可以改变对象类型)转移到新流中。map的参数类型是Function&lt;T,R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)接收一个泛型参数，另一个为Stream流参数，返回的是泛型R,作用是将两个流合并成一个流输出123456789101112131415// 代码示例List&lt;String&gt; listStr = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\");Stream&lt;String&gt; steamStr = listStr.stream();steamStr.map(s -&gt; s.substring(2)).forEach(s -&gt; System.out.println(s));String[] strs = &#123; \"aaa\", \"bbb\", \"ccc\" &#125;;Arrays.stream(strs).map(str -&gt; str.split(\"\")).forEach(System.out::println);// [Ljava.lang.String;@5cc7c2a6// [Ljava.lang.String;@b97c004// [Ljava.lang.String;@4590c9c3Arrays.stream(strs).map(str -&gt; str.split(\"\")).flatMap(str -&gt; Arrays.stream(str)).forEach(System.out::println);// a/a/a/b/b/b/c/c/c// map操作将strs拆分为三个数组，stream流中的元素由stream&lt;String&gt;变成了stream&lt;String[]&gt;// flatMap操作将三个stream&lt;String[]&gt;流合并成一个stream&lt;String&gt;流 提取操作 skip(long n)忽略流中的前n个元素(数据) limit(long maxSize)获取流中的maxSize个元素(数据)12345// 代码示例List&lt;String&gt; listStr = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\");Stream&lt;String&gt; steamStr = listStr.stream();steamStr.skip(2).forEach(s -&gt; System.out.println(s));steamStr.limit(2).forEach(s -&gt; System.out.println(s)); 去重操作 distinct()去除流中重复的元素123456// 代码示例// 运行时记得注释其中stringStream执行语句否则会有异常// java.lang.IllegalStateException: stream has already been operated upon or closedStream&lt;String&gt; stringStream = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\", \"java\").stream();stringStream.distinct().forEach(s -&gt; System.out.println(s));stringStream.forEach(s -&gt; System.out.println(s)); 排序操作 sort()将流中的元素(数据)排序 sort(Comparator&lt;? super T&gt; comparator) 将流中元素根据属性排序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879// 代码示例public class test &#123; public static List&lt;Emp&gt; emps = new ArrayList&lt;&gt;(10); static &#123; emps.add(new Emp(\"1\", \"xiaoHong1\", 20)); emps.add(new Emp(\"1\", \"xiaoHong2\", 202)); emps.add(new Emp(\"1\", \"xiaoHong3\", 32)); emps.add(new Emp(\"1\", \"xiaoHong4\", 45)); emps.add(new Emp(\"1\", \"xiaoHong5\", 17)); emps.add(new Emp(\"1\", \"xiaoHong6\", 14)); emps.add(new Emp(\"1\", \"xiaoHong7\", 65)); emps.add(new Emp(\"1\", \"xiaoHong8\", 38)); &#125; public static class Emp &#123; private String code; private String name; private int age; public Emp(String code, String name, int age) &#123; this.code = code; this.name = name; this.age = age; &#125; public String getCode() &#123; return code; &#125; public void setCode(String code) &#123; this.code = code; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; &#125; /** * @param empList 输出集合中的元素 */ public static void println(List&lt;Emp&gt; empList) &#123; empList.stream().forEach(emp -&gt; System.out.println(String.format(\"编号 %S , 姓名 %s , 年龄 %s\", emp.getCode(), emp.getName(), emp.getAge()))); &#125; /** * 根据对象中年龄进行排序 */ public static List&lt;Emp&gt; sortByAge(List&lt;Emp&gt; empList) &#123; return empList.stream().sorted(Comparator.comparing(emp -&gt; emp.getAge())).collect(Collectors.toList()); &#125; /** * 取出对象中姓名排序，并只返回包含姓名的集合 */ public static List&lt;String&gt; sortByName(List&lt;Emp&gt; empList) &#123; return empList.stream().map(emp -&gt; emp.getName()).sorted().collect(Collectors.toList()); &#125; public static void main(String[] args) &#123; println(emps); println(sortByAge(emps)); sortByName(emps).stream().forEach(s -&gt; System.out.println(s)); &#125;&#125; 操作对象 peek(Consumer&lt;? super T&gt; action)1234567891011121314151617// 代码示例 /** * @param empList 输出集合中的元素 */ public static void println(List&lt;Emp&gt; empList) &#123; empList.stream().forEach(emp -&gt; System.out.println(String.format(\"编号 %S , 姓名 %s , 年龄 %s\", emp.getCode(), emp.getName(), emp.getAge()))); &#125; /** * 给年龄大于30岁增加十岁，并返回筛选后的集合 */ public static List&lt;Emp&gt; addAge(List&lt;Emp&gt; empList) &#123; return empList.stream().filter(emp -&gt; emp.getAge() &gt; 30).peek(emp -&gt; emp.setAge(emp.getAge() + 10)).collect(Collectors.toList()); &#125; public static void main(String[] args) &#123; println(addAge(emps)); &#125; 聚合操作 reduce方法123456789101112131415161718192021- reduce(BinaryOperator&lt;T&gt; accumulator)接收一个参数，且参数类型为函数式接口的计算规则，初始值是List集合的第一个值- reduce(T identity, BinaryOperator&lt;T&gt; accumulator)参数类型为函数式接口的计算规则，第一参数值是初始值，第二个参数是函数式接口的计算规则- reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner) 在多线程中使用的,具体不知道(https://segmentfault.com/q/1010000004944450)// 代码示例// 将流中元素归约为一个值Random random = new Random();List&lt;Integer&gt; randomList = Stream.generate(() -&gt; random.nextInt(10)).limit(10).collect(Collectors.toList());randomList.stream().forEach(integer -&gt; System.out.println(integer));System.out.println(randomList.stream().reduce((a, b) -&gt; a + b).get());System.out.println(randomList.stream().reduce(1,(a, b) -&gt; a + b).longValue());List&lt;Integer&gt; iterateList = Stream.iterate(0, x -&gt; x + 1).limit(10).collect(Collectors.toList());iterateList.stream().forEach(integer -&gt; System.out.println(integer));System.out.println(iterateList.stream().reduce((a, b) -&gt; a - b).get());System.out.println(iterateList.stream().reduce(1,(a, b) -&gt; a - b).longValue()); collect方法12345- collect(Supplier&lt;R&gt; supplier,BiConsumer&lt;R, ? super T&gt; accumulator,BiConsumer&lt;R, R&gt; combiner);传入三个参数的抽象方法- collect(Collector&lt;? super T, A, R&gt; collector);该方法只有一个参数，这个参数先看下stream中的collect操作Collectors静态工厂类，在这个静态工厂类里面，大多都使用三个参数的collect方法实现的。 具体的实现类方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113// 代码示例public class test &#123; public static List&lt;Emp&gt; emps = new ArrayList&lt;&gt;(10); static &#123; emps.add(new Emp(\"1\", \"xiaoHong1\", 20)); emps.add(new Emp(\"1\", \"xiaoHong2\", 202)); emps.add(new Emp(\"2\", \"xiaoHong3\", 32)); emps.add(new Emp(\"1\", \"xiaoHong4\", 45)); emps.add(new Emp(\"2\", \"xiaoHong5\", 17)); emps.add(new Emp(\"1\", \"xiaoHong6\", 14)); emps.add(new Emp(\"3\", \"xiaoHong7\", 65)); emps.add(new Emp(\"3\", \"xiaoHong8\", 38)); &#125; public static class Emp &#123; private String code; private String name; private int age; public Emp(String code, String name, int age) &#123; this.code = code; this.name = name; this.age = age; &#125; public String getCode() &#123; return code; &#125; public void setCode(String code) &#123; this.code = code; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; &#125; public static void main(String[] args) &#123; //转List List&lt;String&gt; nameList = emps.stream().map(emp -&gt; emp.getName()).collect(Collectors.toList()); //转Set Set&lt;String&gt; nameSet = emps.stream().map(emp -&gt; emp.getName()).collect(Collectors.toSet()); //转map,需指定key值，Function.identity()指的是当前对象本身 Map&lt;String, Emp&gt; nameMap1 = emps.stream().collect(Collectors.toMap(emp -&gt; emp.getName(), emp -&gt; emp)); Map&lt;String, Emp&gt; nameMap2 = emps.stream().collect(Collectors.toMap(emp -&gt; emp.getName(), Function.identity())); //计算集合中元素个数 long count = emps.stream().collect(Collectors.counting()); //计算数据 summarizingInt summarizingDouble summarizingLong IntSummaryStatistics sum = emps.stream().collect(Collectors.summarizingInt(emp -&gt; emp.getAge())); //平均数 System.out.println(sum.getAverage()); //总数 System.out.println(sum.getCount()); //最大值 System.out.println(sum.getMax()); //最小值 System.out.println(sum.getMin()); //求和 System.out.println(sum.getSum()); //连接字符串 前缀和后缀只会出现在整个字符串的首尾 String nameStr1 = emps.stream().map(emp -&gt; emp.getName()).collect(Collectors.joining()); String nameStr2 = emps.stream().map(emp -&gt; emp.getName()).collect(Collectors.joining(\"中间-\")); String nameStr3 = emps.stream().map(emp -&gt; emp.getName()).collect(Collectors.joining(\"中间-\", \"前缀*\", \"后缀&amp;\")); System.out.println(nameStr1); System.out.println(nameStr2); System.out.println(nameStr3); //最大值 maxBy 最小值 minBy Optional&lt;Integer&gt; maxAge = emps.stream().map(emp -&gt; emp.getAge()).collect(Collectors.maxBy(Comparator.comparing(emp -&gt; emp))); Optional&lt;Integer&gt; minAge = emps.stream().map(emp -&gt; emp.getAge()).collect(Collectors.minBy(Comparator.comparing(emp -&gt; emp))); System.out.println(maxAge.get()); System.out.println(minAge.get()); //聚合操作 Optional&lt;Integer&gt; ageSum1 = emps.stream().map(emp -&gt; emp.getAge()).collect(Collectors.reducing((x, y) -&gt; x + y)); Integer ageSum2 = emps.stream().map(emp -&gt; emp.getAge()).collect(Collectors.reducing(1, (x, y) -&gt; x + y)); System.out.println(ageSum1.get()); System.out.println(ageSum2); //分组操作 根据地址把原List进行分组 Map&lt;String, List&lt;Emp&gt;&gt; mapGroup = emps.stream().collect(Collectors.groupingBy(emp -&gt; emp.getCode())); mapGroup.forEach((s, empList) -&gt; mapGroup.get(s).forEach(emp -&gt; System.out.println(s + \":\" + emp.getName()))); //分区操作 需要根据类型进行 需要根据类型指定判断分区 Map&lt;Boolean, List&lt;Emp&gt;&gt; mapPartitioning = emps.stream().collect(Collectors.partitioningBy(emp -&gt; emp.getAge() &gt; 20)); mapPartitioning.forEach((b, empList) -&gt; mapPartitioning.get(b).forEach(emp -&gt; System.out.println(b + \":\" + emp.getName()))); List&lt;String&gt; listStr1 = Arrays.asList(\"java\", \"python\", \"shell\", \"javaScript\"); List&lt;String&gt; listStr2 = Arrays.asList(\"javaNew\", \"pythonNew\", \"shellNew\", \"javaScriptNew\"); Stream&lt;String&gt; steamSt1 = listStr1.stream(); Stream&lt;String&gt; steamSt2 = listStr2.stream(); Stream.concat(steamSt1, steamSt2).forEach(s -&gt; System.out.println(s)); &#125;&#125; stream的终端操作对集合的流进行遍历 forEach(Consumer&lt;? super T&gt; action) forEachOrdered(Consumer&lt;? super T&gt; action)1234567// 代码示例// forEach遍历是无序的遍历// forEach遍历是按照元素的在流中的顺序进行遍历List&lt;String&gt; strList = Arrays.asList(\"aaa\",\"bbb\",\"ccc\");strList.parallelStream().forEach(str-&gt; System.out.println(str));System.out.println();strList.parallelStream().forEachOrdered(str-&gt; System.out.println(str)); 将流转换为数组 toArray(IntFunction&lt;A[]&gt; generator) toArray()12345678// toArray()方法的底层调用的还是toArray(IntFunction&lt;A[]&gt; generator)方法// 代码示例List&lt;String&gt; strList = Arrays.asList(\"aaa\", \"bbb\", \"ccc\");Object[] o = strList.stream().toArray();String[] s = strList.stream().toArray(str -&gt; new String[strList.size()]);//将集合转换为数组进行输出Arrays.stream(o).forEach(o1 -&gt; System.out.println(o1));Arrays.stream(s).forEach(s1 -&gt; System.out.println(s1)); 流的长度及流中元素(数据)比较 long count() 计算流的长度 boolean anyMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中任意一个元素符合，返回true boolean allMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中所有元素都符合，返回true boolean noneMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中任意一个元素都不符合，返回true123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// 代码示例public class test &#123; public static List&lt;Emp&gt; emps = new ArrayList&lt;&gt;(10); static &#123; emps.add(new Emp(\"1\", \"xiaoHong1\", 20)); emps.add(new Emp(\"1\", \"xiaoHong2\", 202)); emps.add(new Emp(\"1\", \"xiaoHong3\", 32)); emps.add(new Emp(\"1\", \"xiaoHong4\", 45)); emps.add(new Emp(\"1\", \"xiaoHong5\", 17)); emps.add(new Emp(\"1\", \"xiaoHong6\", 14)); emps.add(new Emp(\"1\", \"xiaoHong7\", 65)); emps.add(new Emp(\"1\", \"xiaoHong8\", 38)); &#125; public static class Emp &#123; private String code; private String name; private int age; public Emp(String code, String name, int age) &#123; this.code = code; this.name = name; this.age = age; &#125; public String getCode() &#123; return code; &#125; public void setCode(String code) &#123; this.code = code; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; &#125; public static void main(String[] args) &#123; System.out.println(emps.stream().filter(emp -&gt; emp.getAge() &gt; 30).count()); // 5 System.out.println(emps.stream().allMatch(emp -&gt; emp.getAge() &gt; 30)); // false System.out.println(emps.stream().anyMatch(emp -&gt; emp.getName().startsWith(\"xiao\"))); // true System.out.println(emps.stream().noneMatch(emp -&gt; emp.getAge() &lt; 10)); // false &#125;&#125; 文章借鉴处 https://blog.csdn.net/qq_28410283/article/details/80633710 https://miaoxinguo.github.io/java/2016/06/02/java8.2.stream.html https://www.exception.site/java8/java8-stream-tutorial","content":"<h4 id=\"Stream’APi简介\"><a href=\"#Stream’APi简介\" class=\"headerlink\" title=\"Stream’APi简介\"></a>Stream’APi简介</h4><p>　　Stream’API是Java8中的新特性，基于Lambda表达式，对Collection(集合)的各种操作有了很大的改变，极大的提升了编码效率和代码的可读性。Stream有串行和并行两种模式，并行模式会自动创建多个线程，使用fork(join)Java7特性，来拆分任务和加速处理过程。Stream是一种类似IO流的东西，但是并不相同，实质是对集合操作的一种高度抽象，而且更重要的是，Stream不是数据结构，是不存储数据的，数据存储在底层的集合中，或者根据需要产生出来(例如Stream进行终端操作的时候，生成新的集合)。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"Stream抽象概念\"><a href=\"#Stream抽象概念\" class=\"headerlink\" title=\"Stream抽象概念\"></a>Stream抽象概念</h4><p>　　Stream将要处理的数据看作一个流，流在管道中流动，可以在管道的节点上对流进行筛选，排序，聚合等操作，也就是数据流在管道中经过中间操作(intermediate operation),最后由终端操作(terminal operation)来得到前面处理过的数据，可以抽象的看作一种类似通过sql查询数据的方式。</p>\n<h4 id=\"Stream的特征\"><a href=\"#Stream的特征\" class=\"headerlink\" title=\"Stream的特征\"></a>Stream的特征</h4><ul>\n<li>Stream不是数据结构，是不存储数据的；</li>\n<li>Stream的构成数据源是集合、数组，I/O channel，generate等等；</li>\n<li>Stream的中间操作会返还流对象本身，这样就形成了一个管道；</li>\n<li>Stream的中间操作类似sql语句，比如filter(筛选), map(元素映射), reduce(聚合), find(查询), match(匹配), sorted(排序)等；</li>\n<li>Stream的迭代跟for和foreach在集合外显式迭代不同，Stream是内部迭代，基于访问者模式(Visitor)实现；</li>\n<li>Stream有串行和并行两种模式；</li>\n</ul>\n<h4 id=\"Stream用法\"><a href=\"#Stream用法\" class=\"headerlink\" title=\"Stream用法\"></a>Stream用法</h4><h5 id=\"如何创建Stream流\"><a href=\"#如何创建Stream流\" class=\"headerlink\" title=\"如何创建Stream流\"></a>如何创建Stream流</h5><ul>\n<li>stream() − 为集合创建串行流。</li>\n<li>parallelStream() − 为集合创建并行流。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"comment\">// 集合创建流 Collection接口增加了Steam方法()</span></span><br><span class=\"line\">List&lt;String&gt; listStr = Arrays.asList(<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>, <span class=\"string\">\"shell\"</span>, <span class=\"string\">\"javaScript\"</span>);</span><br><span class=\"line\">Stream&lt;String&gt; steamStr = listStr.stream();</span><br><span class=\"line\">steamStr.forEach(str -&gt; System.out.println(str));</span><br><span class=\"line\"></span><br><span class=\"line\">Set&lt;String&gt; setStr = ZoneId.getAvailableZoneIds();</span><br><span class=\"line\">Stream&lt;String&gt; steamSetStr = setStr.stream();</span><br><span class=\"line\">steamSetStr.forEach(str -&gt; System.out.println(str));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从数组创建流 Arrays类中增加stream(T[] array)方法</span></span><br><span class=\"line\">String[] strs = &#123;<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>, <span class=\"string\">\"shell\"</span>, <span class=\"string\">\"javaScript\"</span>&#125;;</span><br><span class=\"line\">Stream&lt;String&gt; stringStream = Arrays.stream(strs);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从静态方法中创建</span></span><br><span class=\"line\">Stream&lt;String&gt; staticStream1 = Stream.of(<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>, <span class=\"string\">\"shell\"</span>, <span class=\"string\">\"javaScript\"</span>);</span><br><span class=\"line\">staticStream1.forEach(str -&gt; System.out.println(str));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用iterate静态方法(迭代器的方式)创建无限大小的流，需配合limit使用，防止内存溢出</span></span><br><span class=\"line\"><span class=\"comment\">// 会一直增加数据，没有上限</span></span><br><span class=\"line\">Stream&lt;Integer&gt; staticStream2 = Stream.iterate(<span class=\"number\">0</span>, x -&gt; x + <span class=\"number\">1</span>).limit(<span class=\"number\">10</span>);</span><br><span class=\"line\">staticStream2.forEach(integer -&gt; System.out.println(integer));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用generate静态方法创建无限大小的流，需要配合limit使用，防止内存溢出</span></span><br><span class=\"line\"><span class=\"comment\">// generate方式创建的无限流最大值是Long.MAX_VALUE</span></span><br><span class=\"line\">Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">Stream&lt;Integer&gt; staticStream3 = Stream.generate(() -&gt; random.nextInt()).limit(<span class=\"number\">10</span>);</span><br><span class=\"line\">staticStream3.forEach(integer -&gt; System.out.println(integer));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他方式</span></span><br><span class=\"line\">java.io.BufferedReader.lines()</span><br><span class=\"line\">java.util.stream.IntStream.range()</span><br><span class=\"line\">java.nio.file.Files.walk()</span><br><span class=\"line\">java.util.Spliterator</span><br><span class=\"line\">Random.ints()</span><br><span class=\"line\">BitSet.stream()</span><br><span class=\"line\">Pattern.splitAsStream(java.lang.CharSequence)</span><br><span class=\"line\">JarFile.stream()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"Stream流的中间操作\"><a href=\"#Stream流的中间操作\" class=\"headerlink\" title=\"Stream流的中间操作\"></a>Stream流的中间操作</h5><blockquote>\n<p>该表的作用是Stream流中间操作方法的参数类型</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>函数式接口名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Function&lt;T, R&gt;</td>\n<td>接受一个参数T，返回结果R</td>\n</tr>\n<tr>\n<td>Predicate<T></td>\n<td>接受一个参数T，返回boolean</td>\n</tr>\n<tr>\n<td>Supplier<T></td>\n<td>不接受任何参数T，返回结果T</td>\n</tr>\n<tr>\n<td>Consumer<T></td>\n<td>接受一个参数T，不返回结果</td>\n</tr>\n<tr>\n<td>UnaryOperator<T></td>\n<td>继承自Function&lt;T,T&gt;，返回相同类型T的结果</td>\n</tr>\n<tr>\n<td>BiFunction&lt;T, U, R&gt;</td>\n<td>接收两个参数T,U，返回结果R</td>\n</tr>\n<tr>\n<td>BinaryOperator<T></td>\n<td>继承自BiFunction&lt;T,T,T&gt;，返回相同类型T的结果</td>\n</tr>\n<tr>\n<td>Runnable</td>\n<td>实际上不接受任何参数，也不返回结果</td>\n</tr>\n<tr>\n<td>Comparable<T></td>\n<td>实际上是接受两个相同类型的T，返回int</td>\n</tr>\n<tr>\n<td>Callable<V></td>\n<td>不接受任何参数，返回结果V</td>\n</tr>\n</tbody></table>\n<h6 id=\"过滤操作\"><a href=\"#过滤操作\" class=\"headerlink\" title=\"过滤操作\"></a>过滤操作</h6><ul>\n<li>filter()将符合条件的所有元素(数据)转移到新流中。filter的参数类型是Predicate<T><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">List&lt;String&gt; listStr = Arrays.asList(<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>, <span class=\"string\">\"shell\"</span>, <span class=\"string\">\"javaScript\"</span>);</span><br><span class=\"line\">Stream&lt;String&gt; steamStr = listStr.stream();</span><br><span class=\"line\">steamStr.filter(s -&gt; s.startsWith(<span class=\"string\">\"j\"</span>)).forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"转换操作\"><a href=\"#转换操作\" class=\"headerlink\" title=\"转换操作\"></a>转换操作</h6><ul>\n<li>map()将所有数据经过<strong>处理</strong>之后(可以改变对象类型)转移到新流中。map的参数类型是Function&lt;T,R&gt;</li>\n<li>flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)接收一个泛型参数，另一个为Stream流参数，返回的是泛型R,作用是将两个流合并成一个流输出<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">List&lt;String&gt; listStr = Arrays.asList(<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>, <span class=\"string\">\"shell\"</span>, <span class=\"string\">\"javaScript\"</span>);</span><br><span class=\"line\">Stream&lt;String&gt; steamStr = listStr.stream();</span><br><span class=\"line\">steamStr.map(s -&gt; s.substring(<span class=\"number\">2</span>)).forEach(s -&gt; System.out.println(s));</span><br><span class=\"line\"></span><br><span class=\"line\">String[] strs = &#123; <span class=\"string\">\"aaa\"</span>, <span class=\"string\">\"bbb\"</span>, <span class=\"string\">\"ccc\"</span> &#125;;</span><br><span class=\"line\">Arrays.stream(strs).map(str -&gt; str.split(<span class=\"string\">\"\"</span>)).forEach(System.out::println);</span><br><span class=\"line\"><span class=\"comment\">// [Ljava.lang.String;@5cc7c2a6</span></span><br><span class=\"line\"><span class=\"comment\">// [Ljava.lang.String;@b97c004</span></span><br><span class=\"line\"><span class=\"comment\">// [Ljava.lang.String;@4590c9c3</span></span><br><span class=\"line\">Arrays.stream(strs).map(str -&gt; str.split(<span class=\"string\">\"\"</span>)).flatMap(str -&gt; Arrays.stream(str)).forEach(System.out::println);</span><br><span class=\"line\"><span class=\"comment\">// a/a/a/b/b/b/c/c/c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map操作将strs拆分为三个数组，stream流中的元素由stream&lt;String&gt;变成了stream&lt;String[]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// flatMap操作将三个stream&lt;String[]&gt;流合并成一个stream&lt;String&gt;流</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"提取操作\"><a href=\"#提取操作\" class=\"headerlink\" title=\"提取操作\"></a>提取操作</h6><ul>\n<li>skip(long n)忽略流中的前n个元素(数据)</li>\n<li>limit(long maxSize)获取流中的maxSize个元素(数据)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">List&lt;String&gt; listStr = Arrays.asList(<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>, <span class=\"string\">\"shell\"</span>, <span class=\"string\">\"javaScript\"</span>);</span><br><span class=\"line\">Stream&lt;String&gt; steamStr = listStr.stream();</span><br><span class=\"line\">steamStr.skip(<span class=\"number\">2</span>).forEach(s -&gt; System.out.println(s));</span><br><span class=\"line\">steamStr.limit(<span class=\"number\">2</span>).forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"去重操作\"><a href=\"#去重操作\" class=\"headerlink\" title=\"去重操作\"></a>去重操作</h6><ul>\n<li>distinct()去除流中重复的元素<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"comment\">// 运行时记得注释其中stringStream执行语句否则会有异常</span></span><br><span class=\"line\"><span class=\"comment\">// java.lang.IllegalStateException: stream has already been operated upon or closed</span></span><br><span class=\"line\">Stream&lt;String&gt; stringStream = Arrays.asList(<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>, <span class=\"string\">\"shell\"</span>, <span class=\"string\">\"javaScript\"</span>, <span class=\"string\">\"java\"</span>).stream();</span><br><span class=\"line\">stringStream.distinct().forEach(s -&gt; System.out.println(s));</span><br><span class=\"line\">stringStream.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"排序操作\"><a href=\"#排序操作\" class=\"headerlink\" title=\"排序操作\"></a>排序操作</h6><ul>\n<li>sort()将流中的元素(数据)排序</li>\n<li>sort(Comparator&lt;? super T&gt; comparator) 将流中元素根据属性排序<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Emp&gt; emps = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong1\"</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong2\"</span>, <span class=\"number\">202</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong3\"</span>, <span class=\"number\">32</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong4\"</span>, <span class=\"number\">45</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong5\"</span>, <span class=\"number\">17</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong6\"</span>, <span class=\"number\">14</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong7\"</span>, <span class=\"number\">65</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong8\"</span>, <span class=\"number\">38</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emp</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String code;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Emp</span><span class=\"params\">(String code, String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCode</span><span class=\"params\">(String code)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> empList 输出集合中的元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(List&lt;Emp&gt; empList)</span> </span>&#123;</span><br><span class=\"line\">        empList.stream().forEach(emp -&gt; System.out.println(String.format(<span class=\"string\">\"编号 %S , 姓名 %s , 年龄 %s\"</span>, emp.getCode(), emp.getName(), emp.getAge())));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据对象中年龄进行排序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Emp&gt; <span class=\"title\">sortByAge</span><span class=\"params\">(List&lt;Emp&gt; empList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> empList.stream().sorted(Comparator.comparing(emp -&gt; emp.getAge())).collect(Collectors.toList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取出对象中姓名排序，并只返回包含姓名的集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">sortByName</span><span class=\"params\">(List&lt;Emp&gt; empList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> empList.stream().map(emp -&gt; emp.getName()).sorted().collect(Collectors.toList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        println(emps);</span><br><span class=\"line\">        println(sortByAge(emps));</span><br><span class=\"line\">        sortByName(emps).stream().forEach(s -&gt; System.out.println(s));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"操作对象\"><a href=\"#操作对象\" class=\"headerlink\" title=\"操作对象\"></a>操作对象</h6><ul>\n<li>peek(Consumer&lt;? super T&gt; action)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> empList 输出集合中的元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(List&lt;Emp&gt; empList)</span> </span>&#123;</span><br><span class=\"line\">        empList.stream().forEach(emp -&gt; System.out.println(String.format(<span class=\"string\">\"编号 %S , 姓名 %s , 年龄 %s\"</span>, emp.getCode(), emp.getName(), emp.getAge())));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给年龄大于30岁增加十岁，并返回筛选后的集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Emp&gt; <span class=\"title\">addAge</span><span class=\"params\">(List&lt;Emp&gt; empList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> empList.stream().filter(emp -&gt; emp.getAge() &gt; <span class=\"number\">30</span>).peek(emp -&gt; emp.setAge(emp.getAge() + <span class=\"number\">10</span>)).collect(Collectors.toList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        println(addAge(emps));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"聚合操作\"><a href=\"#聚合操作\" class=\"headerlink\" title=\"聚合操作\"></a>聚合操作</h6><ul>\n<li>reduce方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- reduce(BinaryOperator&lt;T&gt; accumulator)</span><br><span class=\"line\">接收一个参数，且参数类型为函数式接口的计算规则，初始值是List集合的第一个值</span><br><span class=\"line\"></span><br><span class=\"line\">- reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</span><br><span class=\"line\">参数类型为函数式接口的计算规则，第一参数值是初始值，第二个参数是函数式接口的计算规则</span><br><span class=\"line\"></span><br><span class=\"line\">- reduce(U identity, BiFunction&lt;U, ? <span class=\"keyword\">super</span> T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner) </span><br><span class=\"line\">在多线程中使用的,具体不知道(https:<span class=\"comment\">//segmentfault.com/q/1010000004944450)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"comment\">// 将流中元素归约为一个值</span></span><br><span class=\"line\">Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">List&lt;Integer&gt; randomList = Stream.generate(() -&gt; random.nextInt(<span class=\"number\">10</span>)).limit(<span class=\"number\">10</span>).collect(Collectors.toList());</span><br><span class=\"line\">randomList.stream().forEach(integer -&gt; System.out.println(integer));</span><br><span class=\"line\">System.out.println(randomList.stream().reduce((a, b) -&gt; a + b).get());</span><br><span class=\"line\">System.out.println(randomList.stream().reduce(<span class=\"number\">1</span>,(a, b) -&gt; a + b).longValue());</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;Integer&gt; iterateList = Stream.iterate(<span class=\"number\">0</span>, x -&gt; x + <span class=\"number\">1</span>).limit(<span class=\"number\">10</span>).collect(Collectors.toList());</span><br><span class=\"line\">iterateList.stream().forEach(integer -&gt; System.out.println(integer));</span><br><span class=\"line\">System.out.println(iterateList.stream().reduce((a, b) -&gt; a - b).get());</span><br><span class=\"line\">System.out.println(iterateList.stream().reduce(<span class=\"number\">1</span>,(a, b) -&gt; a - b).longValue());</span><br></pre></td></tr></table></figure></li>\n<li>collect方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- collect(Supplier&lt;R&gt; supplier,BiConsumer&lt;R, ? <span class=\"keyword\">super</span> T&gt; accumulator,BiConsumer&lt;R, R&gt; combiner);</span><br><span class=\"line\">传入三个参数的抽象方法</span><br><span class=\"line\"></span><br><span class=\"line\">- collect(Collector&lt;? <span class=\"keyword\">super</span> T, A, R&gt; collector);</span><br><span class=\"line\">该方法只有一个参数，这个参数先看下stream中的collect操作Collectors静态工厂类，在这个静态工厂类里面，大多都使用三个参数的collect方法实现的。</span><br></pre></td></tr></table></figure>\n具体的实现类方法<br><img src=\"https://images-tomcat.oss-cn-hongkong.aliyuncs.com/20180715145937380.png\" alt=\"Collectors静态工厂类\" title=\"Collectors静态工厂类\">\n<br>\n<img src=\"https://images-tomcat.oss-cn-hongkong.aliyuncs.com/2018071514595970.png\" alt=\"Collectors静态工厂类\" title=\"Collectors静态工厂类\">\n\n</li>\n</ul>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Emp&gt; emps = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong1\"</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong2\"</span>, <span class=\"number\">202</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"2\"</span>, <span class=\"string\">\"xiaoHong3\"</span>, <span class=\"number\">32</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong4\"</span>, <span class=\"number\">45</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"2\"</span>, <span class=\"string\">\"xiaoHong5\"</span>, <span class=\"number\">17</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong6\"</span>, <span class=\"number\">14</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"3\"</span>, <span class=\"string\">\"xiaoHong7\"</span>, <span class=\"number\">65</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"3\"</span>, <span class=\"string\">\"xiaoHong8\"</span>, <span class=\"number\">38</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emp</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String code;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Emp</span><span class=\"params\">(String code, String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCode</span><span class=\"params\">(String code)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//转List</span></span><br><span class=\"line\">        List&lt;String&gt; nameList = emps.stream().map(emp -&gt; emp.getName()).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">//转Set</span></span><br><span class=\"line\">        Set&lt;String&gt; nameSet = emps.stream().map(emp -&gt; emp.getName()).collect(Collectors.toSet());</span><br><span class=\"line\">        <span class=\"comment\">//转map,需指定key值，Function.identity()指的是当前对象本身</span></span><br><span class=\"line\">        Map&lt;String, Emp&gt; nameMap1 = emps.stream().collect(Collectors.toMap(emp -&gt; emp.getName(), emp -&gt; emp));</span><br><span class=\"line\">        Map&lt;String, Emp&gt; nameMap2 = emps.stream().collect(Collectors.toMap(emp -&gt; emp.getName(), Function.identity()));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//计算集合中元素个数</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> count = emps.stream().collect(Collectors.counting());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//计算数据 summarizingInt summarizingDouble summarizingLong</span></span><br><span class=\"line\">        IntSummaryStatistics sum = emps.stream().collect(Collectors.summarizingInt(emp -&gt; emp.getAge()));</span><br><span class=\"line\">        <span class=\"comment\">//平均数</span></span><br><span class=\"line\">        System.out.println(sum.getAverage());</span><br><span class=\"line\">        <span class=\"comment\">//总数</span></span><br><span class=\"line\">        System.out.println(sum.getCount());</span><br><span class=\"line\">        <span class=\"comment\">//最大值</span></span><br><span class=\"line\">        System.out.println(sum.getMax());</span><br><span class=\"line\">        <span class=\"comment\">//最小值</span></span><br><span class=\"line\">        System.out.println(sum.getMin());</span><br><span class=\"line\">        <span class=\"comment\">//求和</span></span><br><span class=\"line\">        System.out.println(sum.getSum());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//连接字符串 前缀和后缀只会出现在整个字符串的首尾</span></span><br><span class=\"line\">        String nameStr1 = emps.stream().map(emp -&gt; emp.getName()).collect(Collectors.joining());</span><br><span class=\"line\">        String nameStr2 = emps.stream().map(emp -&gt; emp.getName()).collect(Collectors.joining(<span class=\"string\">\"中间-\"</span>));</span><br><span class=\"line\">        String nameStr3 = emps.stream().map(emp -&gt; emp.getName()).collect(Collectors.joining(<span class=\"string\">\"中间-\"</span>, <span class=\"string\">\"前缀*\"</span>, <span class=\"string\">\"后缀&amp;\"</span>));</span><br><span class=\"line\">        System.out.println(nameStr1);</span><br><span class=\"line\">        System.out.println(nameStr2);</span><br><span class=\"line\">        System.out.println(nameStr3);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//最大值 maxBy 最小值 minBy</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; maxAge = emps.stream().map(emp -&gt; emp.getAge()).collect(Collectors.maxBy(Comparator.comparing(emp -&gt; emp)));</span><br><span class=\"line\">        Optional&lt;Integer&gt; minAge = emps.stream().map(emp -&gt; emp.getAge()).collect(Collectors.minBy(Comparator.comparing(emp -&gt; emp)));</span><br><span class=\"line\">        System.out.println(maxAge.get());</span><br><span class=\"line\">        System.out.println(minAge.get());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//聚合操作</span></span><br><span class=\"line\">        Optional&lt;Integer&gt; ageSum1 = emps.stream().map(emp -&gt; emp.getAge()).collect(Collectors.reducing((x, y) -&gt; x + y));</span><br><span class=\"line\">        Integer ageSum2 = emps.stream().map(emp -&gt; emp.getAge()).collect(Collectors.reducing(<span class=\"number\">1</span>, (x, y) -&gt; x + y));</span><br><span class=\"line\">        System.out.println(ageSum1.get());</span><br><span class=\"line\">        System.out.println(ageSum2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//分组操作 根据地址把原List进行分组</span></span><br><span class=\"line\">        Map&lt;String, List&lt;Emp&gt;&gt; mapGroup = emps.stream().collect(Collectors.groupingBy(emp -&gt; emp.getCode()));</span><br><span class=\"line\">        mapGroup.forEach((s, empList) -&gt; mapGroup.get(s).forEach(emp -&gt; System.out.println(s + <span class=\"string\">\":\"</span> + emp.getName())));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//分区操作 需要根据类型进行 需要根据类型指定判断分区</span></span><br><span class=\"line\">        Map&lt;Boolean, List&lt;Emp&gt;&gt; mapPartitioning = emps.stream().collect(Collectors.partitioningBy(emp -&gt; emp.getAge() &gt; <span class=\"number\">20</span>));</span><br><span class=\"line\">        mapPartitioning.forEach((b, empList) -&gt; mapPartitioning.get(b).forEach(emp -&gt; System.out.println(b + <span class=\"string\">\":\"</span> + emp.getName())));</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; listStr1 = Arrays.asList(<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>, <span class=\"string\">\"shell\"</span>, <span class=\"string\">\"javaScript\"</span>);</span><br><span class=\"line\">        List&lt;String&gt; listStr2 = Arrays.asList(<span class=\"string\">\"javaNew\"</span>, <span class=\"string\">\"pythonNew\"</span>, <span class=\"string\">\"shellNew\"</span>, <span class=\"string\">\"javaScriptNew\"</span>);</span><br><span class=\"line\">        Stream&lt;String&gt; steamSt1 = listStr1.stream();</span><br><span class=\"line\">        Stream&lt;String&gt; steamSt2 = listStr2.stream();</span><br><span class=\"line\">        Stream.concat(steamSt1, steamSt2).forEach(s -&gt; System.out.println(s));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"stream的终端操作\"><a href=\"#stream的终端操作\" class=\"headerlink\" title=\"stream的终端操作\"></a>stream的终端操作</h5><h6 id=\"对集合的流进行遍历\"><a href=\"#对集合的流进行遍历\" class=\"headerlink\" title=\"对集合的流进行遍历\"></a>对集合的流进行遍历</h6><ul>\n<li>forEach(Consumer&lt;? super T&gt; action)</li>\n<li>forEachOrdered(Consumer&lt;? super T&gt; action)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"comment\">// forEach遍历是无序的遍历</span></span><br><span class=\"line\"><span class=\"comment\">// forEach遍历是按照元素的在流中的顺序进行遍历</span></span><br><span class=\"line\">List&lt;String&gt; strList = Arrays.asList(<span class=\"string\">\"aaa\"</span>,<span class=\"string\">\"bbb\"</span>,<span class=\"string\">\"ccc\"</span>);</span><br><span class=\"line\">strList.parallelStream().forEach(str-&gt; System.out.println(str));</span><br><span class=\"line\">System.out.println();</span><br><span class=\"line\">strList.parallelStream().forEachOrdered(str-&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"将流转换为数组\"><a href=\"#将流转换为数组\" class=\"headerlink\" title=\"将流转换为数组\"></a>将流转换为数组</h6><ul>\n<li>toArray(IntFunction&lt;A[]&gt; generator)</li>\n<li>toArray()<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// toArray()方法的底层调用的还是toArray(IntFunction&lt;A[]&gt; generator)方法</span></span><br><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">List&lt;String&gt; strList = Arrays.asList(<span class=\"string\">\"aaa\"</span>, <span class=\"string\">\"bbb\"</span>, <span class=\"string\">\"ccc\"</span>);</span><br><span class=\"line\">Object[] o = strList.stream().toArray();</span><br><span class=\"line\">String[] s = strList.stream().toArray(str -&gt; <span class=\"keyword\">new</span> String[strList.size()]);</span><br><span class=\"line\"><span class=\"comment\">//将集合转换为数组进行输出</span></span><br><span class=\"line\">Arrays.stream(o).forEach(o1 -&gt; System.out.println(o1));</span><br><span class=\"line\">Arrays.stream(s).forEach(s1 -&gt; System.out.println(s1));</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"流的长度及流中元素-数据-比较\"><a href=\"#流的长度及流中元素-数据-比较\" class=\"headerlink\" title=\"流的长度及流中元素(数据)比较\"></a>流的长度及流中元素(数据)比较</h6><ul>\n<li>long count() 计算流的长度</li>\n<li>boolean anyMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中任意一个元素符合，返回true</li>\n<li>boolean allMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中所有元素都符合，返回true</li>\n<li>boolean noneMatch(Predicate&lt;? super T&gt; predicate) 判断条件中，流中任意一个元素都不符合，返回true<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Emp&gt; emps = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong1\"</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong2\"</span>, <span class=\"number\">202</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong3\"</span>, <span class=\"number\">32</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong4\"</span>, <span class=\"number\">45</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong5\"</span>, <span class=\"number\">17</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong6\"</span>, <span class=\"number\">14</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong7\"</span>, <span class=\"number\">65</span>));</span><br><span class=\"line\">        emps.add(<span class=\"keyword\">new</span> Emp(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"xiaoHong8\"</span>, <span class=\"number\">38</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emp</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String code;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Emp</span><span class=\"params\">(String code, String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCode</span><span class=\"params\">(String code)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(emps.stream().filter(emp -&gt; emp.getAge() &gt; <span class=\"number\">30</span>).count());</span><br><span class=\"line\">        <span class=\"comment\">// 5</span></span><br><span class=\"line\">        System.out.println(emps.stream().allMatch(emp -&gt; emp.getAge() &gt; <span class=\"number\">30</span>));</span><br><span class=\"line\">        <span class=\"comment\">// false</span></span><br><span class=\"line\">        System.out.println(emps.stream().anyMatch(emp -&gt; emp.getName().startsWith(<span class=\"string\">\"xiao\"</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(emps.stream().noneMatch(emp -&gt; emp.getAge() &lt; <span class=\"number\">10</span>));</span><br><span class=\"line\">        <span class=\"comment\">// false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>文章借鉴处</strong></p>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_28410283/article/details/80633710\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_28410283/article/details/80633710</a></li>\n<li><a href=\"https://miaoxinguo.github.io/java/2016/06/02/java8.2.stream.html\" target=\"_blank\" rel=\"noopener\">https://miaoxinguo.github.io/java/2016/06/02/java8.2.stream.html</a></li>\n<li><a href=\"https://www.exception.site/java8/java8-stream-tutorial\" target=\"_blank\" rel=\"noopener\">https://www.exception.site/java8/java8-stream-tutorial</a></li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"JavaApi","slug":"JavaApi","permalink":"https://carefulhuo.github.io/tags/JavaApi/"}]},{"title":"Lambdda表达式","date":"2020-10-28T11:03:38.000Z","path":"posts/9f889f1d/","text":"在Java的语言世界里面，除了基本的数据类型，一切都是对象，例如：String字符串、每个对象实例、数组这些都是对象。在Java中方法是不能完全独立存在的，不能将方法作为参数或者返回值给实例。注意：方法(Method),函数(Function)，在Java中是没有函数的，因为Java是一个面向对象编程的语言；函数更多的意义是用来表述面向过程的语言；又或者说”函数是大家的函数，方法是类的方法”，不过，不用这么纠结，我们可以认为在Java中方法就是函数，函数就是方法。 为什么出现Lambda表达式 从线程的构建、自定义比较器、Swing等等，这些我们都是匿名内部类的方式去书写。为了简化这些代码的书写，使得代码更加紧凑，更为了使得Java拥有函数式编程的特点。javaScript是典型的函数式编程语言，点击这里以及这里了解,函数式语言提供了一种强大的功能–闭包，闭包的特点是词法的作用域与把函数当作值来传递。虽然闭包与Lambda表达式之间存在显著差别，但是Lambda表达式至少是很好的闭包替代者。 Lambda表达式是什么 在Java中，刚开始说过，除了基本的数据类型，一切都是对象,那么Lambda表达式也是对象，所以必须依赖于一种特殊的对象类型–函数式接口(Function Interface)。Lambda表达式可以理解为刚开始说的匿名内部类函数，它没有声明方法，没有访问修饰符，没有返回值声明和名字。 Lambda表达式的特征 可选型声明：不需要声明参数类型，编译器可以统一识别参数值； 可选的参数圆括号：一个参数且类型可推导时，无需定义圆括号，但是多个参数需要定义圆括号； 可选的大括号：如果函数主体包含了一个语句，不需要大括号； 可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要显式指定表达式返回值。 Lambda表达式的用法 Lambda表达式语法：(parameters)-&gt;expression 或 (parameters)-&gt;{statements}Lambda表达式语法解析：parameters：参数 expression：表达式(一条语句) statements：陈述(多个语句) 用法 1. 替代匿名内部类 实现Runnable接口是匿名内部类的典型例子 1234567891011// 代码示例public void runable() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println(\"the old runnable now is useing\"); &#125; &#125;).start(); new Thread(() -&gt; System.out.println(\"the new runnable now is useing\")).start();&#125; 2. 集合的迭代 使用Lambda表达式对map集合进行迭代遍历 12345// 代码示例private void listiterator() &#123; List&lt;String&gt; languages = Arrays.asList(\"java\", \"python\", \"javaScript\"); languages.forEach(x -&gt; System.out.println(x));&#125; 3. 实现map 使用Lambda表达式实现map，map的作用是把一个对象换做另一个，这块涉及到Java8的新特性Stream，下一篇博客会讲。 12345// 代码示例private void mapFunction()&#123; List&lt;Double&gt; languages = Arrays.asList(2.0, 4.0, 6.0); languages.stream().map(x -&gt; x + x * 0.5).forEach((x) -&gt; System.out.println(x));&#125; 4. 实现reduce 使用Lambda表达式实现reduce，reduce是将所有的值合并为一个，这块涉及到Java8的新特性Stream，下一篇博客会讲。 123456// 代码示例private void sumFunction() &#123; List&lt;Double&gt; cost = Arrays.asList(2.0, 4.0, 6.0); double doubleCode = cost.stream().reduce((sum, x) -&gt; sum + x).get(); System.out.println(doubleCode);&#125; 5. 过滤操作 使用Lambda表达式实现对集合的过滤，filter过滤掉集合中的部分元素，这块涉及到Java8的新特性Stream，下一篇博客会讲。 123456789// 代码示例private void filterFunction() &#123; List&lt;Double&gt; cost = Arrays.asList(2.0, 4.0, 6.0); //方式一 cost.stream().filter(x -&gt; x &gt; 3).collect(Collectors.toList()).stream().forEach(x -&gt; System.out.println(x)); //方式二 List&lt;Double&gt; doubleCode = cost.stream().filter(x -&gt; x &gt; 3).collect(Collectors.toList()); doubleCode.stream().forEach(x -&gt; System.out.println(x));&#125; 6. 与工具包java.util.function配合 Java8除了在语言层面支持了函数式编程，而且增添了一个新包，包名叫**java.util.function**。该包包含了很多类，来支持Java的函数式编程，其中一个类是Predicate，使用java.util.function.Predicate 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。Predicate接口非常适用于做过滤。该包下的其他类放到姐妹篇里面讲解 |函数式接口名 | 作用| | --- | --- | |Function&lt;T, R&gt; | 接受一个参数T，返回结果R| |Predicate&lt;T&gt; | 接受一个参数T，返回boolean| |Supplier&lt;T&gt; | 不接受任何参数T，返回结果T| |Consumer&lt;T&gt; | 接受一个参数T，不返回结果| |UnaryOperator&lt;T&gt; | 继承自Function&lt;T,T&gt;，返回相同类型T的结果| |BiFunction&lt;T, U, R&gt;|接收两个参数T,U，返回结果R| |BinaryOperator&lt;T&gt;|继承自BiFunction&lt;T,T,T&gt;，返回相同类型T的结果| |Runnable|实际上不接受任何参数，也不返回结果| |Comparable&lt;T&gt;|实际上是接受两个相同类型的T，返回int| |Callable&lt;V&gt;|不接受任何参数，返回结果V| 12345678910111213141516171819202122// 代码示例public class test &#123; public static void main(String[] args) &#123; test t = new test(); List&lt;String&gt; launges = Arrays.asList(\"java\", \"shell\", \"python\"); t.functionTest.apply(launges).stream().forEach(x -&gt; System.out.println(x)); boolean flg = t.predicateTest.test(launges); System.out.println(flg); &#125; private Function&lt;List&lt;String&gt;, List&lt;String&gt;&gt; functionTest = in -&gt; &#123; return in.stream().filter(x -&gt; x.startsWith(\"j\")).collect(Collectors.toList()); &#125;; private Predicate&lt;List&lt;String&gt;&gt; predicateTest = in -&gt; &#123; return in.stream().filter(x -&gt; x.startsWith(\"j\")).count() &gt; 0; &#125;;&#125; Lambda表达式的优劣 优势 代码简洁 易并行计算 方便了函数式编程 改善了集合的操作(引入了Stream API) 劣势 代码可读性变差 Debug调试变得困难 不可以直接在foreach中修改外面的值 在很多非并行运算中，性能未必有传统的for性能要高 文章借鉴处 https://www.cnblogs.com/ysySelf/p/10937725.html https://www.runoob.com/java/java8-lambda-expressions.html http://blog.oneapm.com/apm-tech/226.html https://objcoding.com/2019/03/04/lambda/","content":"<p>　　在Java的语言世界里面，除了基本的数据类型，一切都是对象，例如：String字符串、每个对象实例、数组这些都是对象。在Java中方法是不能完全独立存在的，不能将方法作为参数或者返回值给实例。<strong>注意</strong>：方法(Method),函数(Function)，在Java中是没有函数的，因为Java是一个面向对象编程的语言；函数更多的意义是用来表述面向过程的语言；又或者说”函数是大家的函数，方法是类的方法”，不过，不用这么纠结，我们可以认为在Java中方法就是函数，函数就是方法。</p>\n<a id=\"more\"></a>\n<h4 id=\"为什么出现Lambda表达式\"><a href=\"#为什么出现Lambda表达式\" class=\"headerlink\" title=\"为什么出现Lambda表达式\"></a>为什么出现Lambda表达式</h4><p>　　从线程的构建、自定义比较器、<a href=\"https://zh.wikipedia.org/wiki/Swing_(Java)\" target=\"_blank\" rel=\"noopener\">Swing</a>等等，这些我们都是匿名内部类的方式去书写。为了简化这些代码的书写，使得代码更加紧凑，更为了使得Java拥有函数式编程的特点。javaScript是典型的函数式编程语言，点击<a href=\"https://eloquentjavascript.net/1st_edition/chapter6.html\" target=\"_blank\" rel=\"noopener\">这里</a>以及<a href=\"https://www.ibm.com/developerworks/library/wa-javascript/index.html\" target=\"_blank\" rel=\"noopener\">这里</a>了解,函数式语言提供了一种强大的功能–闭包，闭包的特点是词法的作用域与把函数当作值来传递。虽然闭包与Lambda表达式之间存在显著差别，但是Lambda表达式至少是很好的闭包替代者。</p>\n<h4 id=\"Lambda表达式是什么\"><a href=\"#Lambda表达式是什么\" class=\"headerlink\" title=\"Lambda表达式是什么\"></a>Lambda表达式是什么</h4><p>　　在Java中，刚开始说过，除了基本的数据类型，一切都是对象,那么Lambda表达式也是对象，所以必须依赖于一种特殊的对象类型–函数式接口(Function Interface)。Lambda表达式可以理解为刚开始说的匿名内部类函数，它没有声明方法，没有访问修饰符，没有返回值声明和名字。</p>\n<h4 id=\"Lambda表达式的特征\"><a href=\"#Lambda表达式的特征\" class=\"headerlink\" title=\"Lambda表达式的特征\"></a>Lambda表达式的特征</h4><ul>\n<li>可选型声明：不需要声明参数类型，编译器可以统一识别参数值；</li>\n<li>可选的参数圆括号：一个参数且类型可推导时，无需定义圆括号，但是多个参数需要定义圆括号；</li>\n<li>可选的大括号：如果函数主体包含了一个语句，不需要大括号；</li>\n<li>可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要显式指定表达式返回值。</li>\n</ul>\n<h4 id=\"Lambda表达式的用法\"><a href=\"#Lambda表达式的用法\" class=\"headerlink\" title=\"Lambda表达式的用法\"></a>Lambda表达式的用法</h4><ul>\n<li><p><strong>Lambda表达式语法</strong>：(parameters)-&gt;expression 或 (parameters)-&gt;{statements}<br>Lambda表达式语法解析：parameters：参数 expression：表达式(一条语句) statements：陈述(多个语句)</p>\n</li>\n<li><p><strong>用法</strong><br>  <strong>1. 替代匿名内部类</strong></p>\n<pre><code>实现Runnable接口是匿名内部类的典型例子\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"the old runnable now is useing\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"the new runnable now is useing\"</span>)).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  <strong>2. 集合的迭代</strong></p>\n<pre><code>使用Lambda表达式对map集合进行迭代遍历\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">listiterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; languages = Arrays.asList(<span class=\"string\">\"java\"</span>, <span class=\"string\">\"python\"</span>, <span class=\"string\">\"javaScript\"</span>);</span><br><span class=\"line\">    languages.forEach(x -&gt; System.out.println(x));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  <strong>3. 实现map</strong></p>\n<pre><code>使用Lambda表达式实现map，map的作用是把一个对象换做另一个，这块涉及到Java8的新特性Stream，下一篇博客会讲。\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mapFunction</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    List&lt;Double&gt; languages = Arrays.asList(<span class=\"number\">2.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">6.0</span>);</span><br><span class=\"line\">    languages.stream().map(x -&gt; x + x * <span class=\"number\">0.5</span>).forEach((x) -&gt; System.out.println(x));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  <strong>4. 实现reduce</strong></p>\n<pre><code>使用Lambda表达式实现reduce，reduce是将所有的值合并为一个，这块涉及到Java8的新特性Stream，下一篇博客会讲。\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sumFunction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Double&gt; cost = Arrays.asList(<span class=\"number\">2.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">6.0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> doubleCode = cost.stream().reduce((sum, x) -&gt; sum + x).get();</span><br><span class=\"line\">    System.out.println(doubleCode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  <strong>5. 过滤操作</strong></p>\n<pre><code>使用Lambda表达式实现对集合的过滤，filter过滤掉集合中的部分元素，这块涉及到Java8的新特性Stream，下一篇博客会讲。\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">filterFunction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Double&gt; cost = Arrays.asList(<span class=\"number\">2.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">6.0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//方式一</span></span><br><span class=\"line\">    cost.stream().filter(x -&gt; x &gt; <span class=\"number\">3</span>).collect(Collectors.toList()).stream().forEach(x -&gt; System.out.println(x));</span><br><span class=\"line\">    <span class=\"comment\">//方式二</span></span><br><span class=\"line\">    List&lt;Double&gt; doubleCode = cost.stream().filter(x -&gt; x &gt; <span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    doubleCode.stream().forEach(x -&gt; System.out.println(x));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>  <strong>6. 与工具包java.util.function配合</strong></p>\n<pre><code>Java8除了在语言层面支持了函数式编程，而且增添了一个新包，包名叫**java.util.function**。该包包含了很多类，来支持Java的函数式编程，其中一个类是Predicate，使用java.util.function.Predicate 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。Predicate接口非常适用于做过滤。该包下的其他类放到姐妹篇里面讲解\n\n|函数式接口名 | 作用|\n| --- | --- |\n|Function&lt;T, R&gt; | 接受一个参数T，返回结果R|\n|Predicate&lt;T&gt; | 接受一个参数T，返回boolean|\n|Supplier&lt;T&gt; | 不接受任何参数T，返回结果T|\n|Consumer&lt;T&gt; | 接受一个参数T，不返回结果|\n|UnaryOperator&lt;T&gt; | 继承自Function&lt;T,T&gt;，返回相同类型T的结果|\n|BiFunction&lt;T, U, R&gt;|接收两个参数T,U，返回结果R|\n|BinaryOperator&lt;T&gt;|继承自BiFunction&lt;T,T,T&gt;，返回相同类型T的结果|\n|Runnable|实际上不接受任何参数，也不返回结果|\n|Comparable&lt;T&gt;|实际上是接受两个相同类型的T，返回int|\n|Callable&lt;V&gt;|不接受任何参数，返回结果V|\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        test t = <span class=\"keyword\">new</span> test();</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; launges = Arrays.asList(<span class=\"string\">\"java\"</span>, <span class=\"string\">\"shell\"</span>, <span class=\"string\">\"python\"</span>);</span><br><span class=\"line\">        t.functionTest.apply(launges).stream().forEach(x -&gt; System.out.println(x));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flg = t.predicateTest.test(launges);</span><br><span class=\"line\">        System.out.println(flg);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Function&lt;List&lt;String&gt;, List&lt;String&gt;&gt; functionTest = in -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> in.stream().filter(x -&gt; x.startsWith(<span class=\"string\">\"j\"</span>)).collect(Collectors.toList());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Predicate&lt;List&lt;String&gt;&gt; predicateTest = in -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> in.stream().filter(x -&gt; x.startsWith(<span class=\"string\">\"j\"</span>)).count() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre></li>\n</ul>\n<h4 id=\"Lambda表达式的优劣\"><a href=\"#Lambda表达式的优劣\" class=\"headerlink\" title=\"Lambda表达式的优劣\"></a>Lambda表达式的优劣</h4><ul>\n<li>优势<ol>\n<li>代码简洁</li>\n<li>易并行计算</li>\n<li>方便了函数式编程</li>\n<li>改善了集合的操作(引入了Stream API)</li>\n</ol>\n</li>\n<li>劣势<ol>\n<li>代码可读性变差</li>\n<li>Debug调试变得困难</li>\n<li>不可以直接在foreach中修改外面的值</li>\n<li>在很多非并行运算中，性能未必有传统的for性能要高</li>\n</ol>\n</li>\n</ul>\n<hr>\n<p><strong>文章借鉴处</strong></p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/ysySelf/p/10937725.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ysySelf/p/10937725.html</a> </li>\n<li><a href=\"https://www.runoob.com/java/java8-lambda-expressions.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/java/java8-lambda-expressions.html</a> </li>\n<li><a href=\"http://blog.oneapm.com/apm-tech/226.html\" target=\"_blank\" rel=\"noopener\">http://blog.oneapm.com/apm-tech/226.html</a> </li>\n<li><a href=\"https://objcoding.com/2019/03/04/lambda/\" target=\"_blank\" rel=\"noopener\">https://objcoding.com/2019/03/04/lambda/</a></li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"JavaApi","slug":"JavaApi","permalink":"https://carefulhuo.github.io/tags/JavaApi/"}]},{"title":"Java8中新的日期和时间","date":"2020-10-26T02:04:59.000Z","path":"posts/dbba2e41/","text":"为什么我们需要新的Date和Time类！ Java8之前所有的日期类都是可变的，这就导致了线程不安全问题； java的日期和时间类的定义不一致，在java.util和java.sql中都包含日期类； java.util.Date同时包含日期和时间，但是java.sql中只包含日期，将其纳入java.sql中的是不合适的，而且更糟糕的是:这两个类中的日期类的名字都是一样的； 对于时间、时间戳、格式化及解析，没有一些明确定义的类，而且对于格式化和解析的需求，Java中有java.text.DateFormat抽象类，但是通常我们用的是SimpleDateFormate类进行格式化和解析 日期类不支持国际化，没有时区支持，即使Java引入了-java.util.Calendar和java.util.TimeZone类，但是问题依然存在。 Java8新的日期和时间API的设计原则Java8中新的日期和时间是基于JSR-310实现的,参考了绝大多数的joda-timeApi。 不变性：新的日期/时间API中，所有的类都是不可变的，实现了线程安全； 关注点分离：新的API中将人可读的日期时间和机器时间(unix timestamp)明确分离，它为日期(Date)、时间(Time)、日期时间(DateTime)、时间戳(unix timestamp)以及时区定义了不同的类； 清晰明了：新的API中，方法都被明确定义用以完成相同的行为，例如，想要拿到当前实例，可以用new()方法，在所有的类方法中都实现了formate()和parse()方法，不再是之前用单独一个类去解决，而且新的API中所有的类都使用了工厂模式和策略模式； 实用性：所有新的日期和时间API类都实现了一系列方法用以完成通用的需求，例如：加、减、格式化、解析、从日期或时间中提取单独部分等等； 可扩展性：新的日期/时间API是基于国际标准ISO 8601,其实我们也是可以将其用于非IOS的日历上 Java8中的日期和时间API包含以下包 java.time包：这是新的Java日期/时间API的基础包，所有的主要基础类都是该包的一部分，例如：LocalDate、LocalTime、LocalDateTime、Instant、Period、Duration等类。这些类都是线程安全的 java.time.chrono包：这个包为非ISO的日历标准定义了一些泛化的API，我们可以拓展AbstractChronology来创建自己的日历标准 java.time.formate包：这个包包含能够格式化和解析日期时间对象的类，在绝大数情况下，我们不应该直接使用它，因为java.time包中相应的类已经提供了格式化和解析的方法 java.time.temporal包：这个包包含一些时态对象，可以用其找出关于某个日期/时间对象的某个特定日期或时间，比如说找到某个月的第一天或最后一天，可以根据withXXX的格式进行区分 java.time.zone包：这个包支持不同的时区以及相关规则的类 Java8中引入的关于日期和时间的新类：Period和Duration类，两个类表示两个日期和时间之间的差，Period基于日期，Duration类基于时间 Period类概述：该类表示一段时间的年、月、日 使用该类中between()方法获取两个日期之间的差作为Period对像返回；1234567// 代码示例LocalDate startTime = LocalDate.of(2020,10,01);LocalDate endTime = LocalDate.of(2021,11,20);Period timeSub = Period.between(startTime,endTime);System.out.println(\"year:\"+timeSub.getYears());System.out.println(\"month:\"+timeSub.getMonths());System.out.println(\"day:\"+timeSub.getDays()); 使用该类中的isNegative()方法判断起止日期的大小(false为endTime大于startTime，否则相反)原理是根据该该方法(不需要参数)会校验Period对象中的天、月、年是否为负，为负则返回true，为正则返回false12345// 代码示例LocalDate startTime = LocalDate.of(2020,10,01);LocalDate endTime = LocalDate.of(2021,11,20);Period timeSub = Period.between(startTime,endTime);System.out.println(timeSub.isNegative()); 使用该类的plusXXX()方法、minusXXX()方法可以进行日期的增加和减少1234567891011// 代码示例Period periodTime = Period.of(2020,10,26);//年String plusYears = periodTime.plusYears(1).toString();String minusYears = periodTime.minusYears(1).toString();//月String plusMonths = periodTime.plusMonths(1).toString();String minusMonths = periodTime.minusMonths(1).toString();//日String plusDays = periodTime.plusDays(1).toString();String minusDays = periodTime.minusDays(1).toString(); Duration类概述：表示秒或纳秒的时间间隔，适合处理较短的时间，且需要更高的精确性 使用该类中between()方法比较两个瞬间的差值123456// 代码示例Instant start = Instant.parse(\"2020-10-12T10:12:12.00Z\");Instant end = Instant.now();System.out.println(end.toString());Duration duration = Duration.between(start,end);System.out.println(duration.isNegative()); 使用该类中的isNegative()方法判断起止时间的大小(false为endTime大于startTime，否则相反)原理是根据该该方法(不需要参数)会校验Duration对象中的天、月、年是否为负，为负则返回true，为正则返回false12345// 代码示例(使用LocalTime也可以获取Duration对象)LocalTime startTime = LocalTime.of(1,10,30,234);LocalTime endTime = LocalTime.of(1,20,30,234);Duration duration = Duration.between(startTime,endTime);System.out.println(duration.isNegative()); 使用该类的plusXXX()方法、minusXXX()方法可以进行日期的增加和减少123456789101112131415// 代码示例(使用该类中的ofDays方法也可以获取Duration对象)Duration durationDays = Duration.ofDays(1);String addDays = durationDays.plusDays(1).toString();System.out.println(durationDays.getSeconds());Duration durationHours = Duration.ofHours(3);String minusHours = durationHours.minusHours(1).toString();System.out.println(durationHours.getSeconds());Duration durationMinutes = Duration.ofMinutes(1);System.out.println(durationMinutes.getSeconds());Duration durationMillis = Duration.ofMillis(1);System.out.println(durationMillis.getSeconds());System.out.println(durationMillis.getNano()); Instant类概述：表示某个时间，不带时区的即时时间点，精确到纳秒 内部由两个Long字段组成，第一部分保存自标准Java时代到现在的秒数，第二部分保存的是纳秒数(不会超过999,999,999)。注意：通过这种方式获取的时间戳与北京时间相差8个时区，需要修正为北京时间，通过查看源代码发现Instant.now()使用等是UTC时间Clock.systemUTC().instant()。LocalDate、LocalDateTime 的now()方法使用的是系统默认时区 不存在Instant.now()的时间问题。 Instant相当于Date,以下是相互转换12345678910111213141516// 代码示例//类方法java.time.InstantInstant instant = Instant.now();System.out.println(instant);Instant beijingTime = Instant.now().plus(8, ChronoUnit.HOURS);System.out.println(beijingTime);//类方法java.util.DateDate date = new Date();System.out.println(date);date = Date.from(instant);System.out.println(date);instant = date.toInstant();System.out.println(instant); Instant类中通过固定时间转换为Instant对象的方法12345678910111213//根据Date转换为instant(java.util.Instant中方法)Date date = new Date();Instant instant = Instant.ofEpochMilli(date.getTime());System.out.println(instant);//根据毫秒转换为instant(java.util.Instant中方法)instant = Instant.ofEpochMilli(1000 * 60 * 60 * 24);System.out.println(instant);//根据秒转换为instant(java.util.Instant中方法)instant = Instant.ofEpochSecond(60 * 60 * 24 * 5);System.out.println(instant);//根据秒和纳秒转换为instant(java.util.Instant中方法)，这样得到的instant会包含纳秒的数据 1000000000纳秒（9位）=1秒instant = Instant.ofEpochSecond(60 * 60 * 24,1000000000*60);System.out.println(instant); Instant类中的parse方法1234// 代码示例//该方法的入参仅支持UTC格式的字符串，而且date结果的字符串会报出DateTimeParseException异常Instant instant = Instant.parse(\"2020-10-26T12:10:00Z\");System.out.println(instant); Instant类中的加减日期方法(加)plus()和(减)minus()方法123456789101112131415161718192021// 代码示例//ChronoUnit位于java.time.temporal,Periodjava位于Java.time//plus()方法会产生一个新的instant对象//plus()方法给当前日期增加五天Instant instant = Instant.now();Instant instantAddDayOne = instant.plus(5, ChronoUnit.DAYS);Instant instantAddDayTwo = instant.plus(Period.ofDays(5));Instant instantAddDayTwo1 = instant.plus(Duration.ofDays(5));System.out.println(instantAddDayOne.toString());System.out.println(instantAddDayTwo.toString());System.out.println(instantAddDayTwo1.toString());System.out.println(instant == instantAddDayOne);//minus()方法会产生一个新的instant对象//minus()方法给当前日期减少五天Instant instantSubDay = instant.minus(5, ChronoUnit.DAYS);Instant instantSubDayTwo = instant.minus(Period.ofDays(5));Instant instantSubDayTwo1 = instant.minus(Duration.ofDays(5));System.out.println(instantSubDay);System.out.println(instantSubDayTwo);System.out.println(instantSubDayTwo1);System.out.println(instant == instantSubDayTwo); Instant类中比较两个日期的大小12345678910111213141516// 代码示例Instant instantNow = Instant.now();Instant instantAddDay = instantNow.plus(Duration.ofDays(5));//isAfter()方法判断instantAddDay是否在instantNow之后boolean flgAfter = instantAddDay.isAfter(instantNow);System.out.println(flgAfter);//isBefore()方法判断instantAddDay是否在instantNow之前boolean flgBefore = instantAddDay.isBefore(instantNow);System.out.println(flgBefore);//compareTo()方法比较，前者时间纳秒值大于后者返回1，小于返回-1，等于返回0int result1 = instantAddDay.compareTo(instantNow);System.out.println(result1);int result2 = instantNow.compareTo(instantAddDay);System.out.println(result2);int result3 = instantNow.compareTo(instantNow);System.out.println(result3); Instant类计算两个日期的差值12345678910// 代码示例Instant instantNow = Instant.now();Instant instantAddDay = instantNow.plus(Duration.ofDays(5));//between()方法后者比前者大，返回正数，比前者小返回负数，相等返回0(ChronoUnit.DAYS位于java.time.temporal)long result1 = ChronoUnit.DAYS.between(instantNow, instantAddDay);System.out.println(result1);long result2 = ChronoUnit.DAYS.between(instantAddDay, instantNow);System.out.println(result2);long result3 = ChronoUnit.DAYS.between(instantNow, instantNow);System.out.println(result3); LocalDateTime类概述：表示不带时区的日期及时间，替换之前的Calendar 注意:看上去，LocalDateTime和Instant很象，但记得的是“Instant中是不带时区的即时时间点。可能有人说，即时的时间点 不就是日期＋时间么？看上去是这样的，但还是有所区别，比如LocalDateTime对于用户来说，可能就只是一个简单的日期和时间的概念，考虑如下的 例子：两个人都在2013年7月2日11点出生，第一个人是在英国出生，而第二个是在加尼福利亚，如果我们问他们是在什么时候出生的话，则他们看上去都是 在同样的时间出生（就是LocalDateTime所表达的），但如果我们根据时间线（如格林威治时间线）去仔细考察，则会发现在出生的人会比在英国出生的人稍微晚几个小时（这就是Instant所表达的概念，并且要将其转换为UTC格式的时间）。 LocalDateTime获取当前时间(系统自带默认时间)123// 代码示例LocalDateTime localDateTime = LocalDateTime.now();System.out.println(localDateTime); LoclaDateTime类中时间加减计算(加)plusXXX()和(减)minusXXX()方法12345678// 代码示例// plus()和minus()方法与Instant类中相同LocalDateTime localDateTime1 = localDateTime.plusHours(5);System.out.println(localDateTime1);System.out.println(localDateTime1 == localDateTime);LocalDateTime localDateTime2 = localDateTime.minusHours(5);System.out.println(localDateTime2);System.out.println(localDateTime2 == localDateTime); LocalDateTime显示年月日，不显示时间;显示时间，不显示年月12345678// 代码示例LocalDateTime localDateTime = LocalDateTime.now();//显示年月日，且增加两个月LocalDate localDate = localDateTime.toLocalDate().plusMonths(2);System.out.println(localDate);//显示时分秒毫秒，且减少两个小时LocalTime localTime = localDateTime.toLocalTime().minusHours(2);System.out.println(localTime); LocalDateTime类中格式化日期的两种方式12345678// 代码示例//通过Instant类获取当前系统时间，ZoneId.systemDefault设置为系统默认时区//ZoneId位于java.timeLocalDateTime localDateTime1 = LocalDateTime.ofInstant(Instant.now(), ZoneId.systemDefault());System.out.println(localDateTime1);//通过DateTimeFormatter类中的ofPattern方法获取自定义格式的系统时间，位于java.time.formatString localDateTimeStr = localDateTime1.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));System.out.println(localDateTimeStr); 文章借鉴处 https://blog.csdn.net/fragrant_no1/article/details/83988042 https://blog.csdn.net/neweastsun/article/details/88770592 https://blog.csdn.net/liubenlong007/article/details/62039628","content":"<h4 id=\"为什么我们需要新的Date和Time类！\"><a href=\"#为什么我们需要新的Date和Time类！\" class=\"headerlink\" title=\"为什么我们需要新的Date和Time类！\"></a>为什么我们需要新的Date和Time类！</h4><a id=\"more\"></a>\n<ul>\n<li>Java8之前所有的日期类都是可变的，这就导致了线程不安全问题；</li>\n<li>java的日期和时间类的定义不一致，在java.util和java.sql中都包含日期类；</li>\n<li>java.util.Date同时包含日期和时间，但是java.sql中只包含日期，将其纳入java.sql中的是不合适的，而且更糟糕的是:这两个类中的日期类的名字都是一样的；</li>\n<li>对于时间、时间戳、格式化及解析，没有一些明确定义的类，而且对于格式化和解析的需求，Java中有java.text.DateFormat抽象类，但是通常我们用的是SimpleDateFormate类进行格式化和解析</li>\n<li>日期类不支持国际化，没有时区支持，即使Java引入了-java.util.Calendar和java.util.TimeZone类，但是问题依然存在。<!-- more -->\n\n</li>\n</ul>\n<h4 id=\"Java8新的日期和时间API的设计原则\"><a href=\"#Java8新的日期和时间API的设计原则\" class=\"headerlink\" title=\"Java8新的日期和时间API的设计原则\"></a>Java8新的日期和时间API的设计原则</h4><p>Java8中新的日期和时间是基于JSR-310实现的,参考了绝大多数的<a href=\"https://www.joda.org/joda-time/\" target=\"_blank\" rel=\"noopener\">joda-time</a>Api。</p>\n<ul>\n<li>不变性：新的日期/时间API中，所有的类都是不可变的，实现了线程安全；</li>\n<li>关注点分离：新的API中将人可读的日期时间和机器时间(unix timestamp)明确分离，它为日期(Date)、时间(Time)、日期时间(DateTime)、时间戳(unix timestamp)以及时区定义了不同的类；</li>\n<li>清晰明了：新的API中，方法都被<strong>明确定义</strong>用以完成<strong>相同的行为</strong>，例如，想要拿到当前实例，可以用new()方法，在所有的类方法中都实现了formate()和parse()方法，不再是之前用单独一个类去解决，而且新的API中所有的类都使用了工厂模式和策略模式；</li>\n<li>实用性：所有新的日期和时间API类都实现了一系列方法用以完成通用的需求，例如：加、减、格式化、解析、从日期或时间中提取单独部分等等；</li>\n<li>可扩展性：新的日期/时间API是基于<a href=\"https://baike.baidu.com/item/ISO%208601\" target=\"_blank\" rel=\"noopener\">国际标准ISO 8601</a>,其实我们也是可以将其用于非IOS的日历上</li>\n</ul>\n<h4 id=\"Java8中的日期和时间API包含以下包\"><a href=\"#Java8中的日期和时间API包含以下包\" class=\"headerlink\" title=\"Java8中的日期和时间API包含以下包\"></a>Java8中的日期和时间API包含以下包</h4><ul>\n<li>java.time包：这是新的Java日期/时间API的基础包，所有的主要基础类都是该包的一部分，例如：LocalDate、LocalTime、LocalDateTime、Instant、Period、Duration等类。这些类都是线程安全的</li>\n<li>java.time.chrono包：这个包为非ISO的日历标准定义了一些泛化的API，我们可以拓展AbstractChronology来创建自己的日历标准</li>\n<li>java.time.formate包：这个包包含能够格式化和解析日期时间对象的类，<strong>在绝大数情况下，我们不应该直接使用它</strong>，因为java.time包中相应的类已经提供了格式化和解析的方法</li>\n<li>java.time.temporal包：这个包包含一些时态对象，可以用其找出关于某个日期/时间对象的某个特定日期或时间，比如说找到某个月的第一天或最后一天，可以根据withXXX的格式进行区分</li>\n<li>java.time.zone包：这个包支持不同的时区以及相关规则的类</li>\n</ul>\n<hr>\n<p>Java8中引入的关于日期和时间的新类：Period和Duration类，两个类表示两个日期和时间之间的差，Period基于日期，Duration类基于时间</p>\n<h4 id=\"Period类\"><a href=\"#Period类\" class=\"headerlink\" title=\"Period类\"></a>Period类</h4><p>概述：该类表示一段时间的年、月、日</p>\n<ol>\n<li>使用该类中between()方法获取两个日期之间的差作为Period对像返回；<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">LocalDate startTime = LocalDate.of(<span class=\"number\">2020</span>,<span class=\"number\">10</span>,<span class=\"number\">01</span>);</span><br><span class=\"line\">LocalDate endTime = LocalDate.of(<span class=\"number\">2021</span>,<span class=\"number\">11</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">Period timeSub = Period.between(startTime,endTime);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"year:\"</span>+timeSub.getYears());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"month:\"</span>+timeSub.getMonths());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"day:\"</span>+timeSub.getDays());</span><br></pre></td></tr></table></figure></li>\n<li>使用该类中的isNegative()方法判断起止日期的大小<br>(false为endTime大于startTime，否则相反)原理是根据该该方法(不需要参数)会校验Period对象中的天、月、年是否为负，为负则返回true，为正则返回false<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">LocalDate startTime = LocalDate.of(<span class=\"number\">2020</span>,<span class=\"number\">10</span>,<span class=\"number\">01</span>);</span><br><span class=\"line\">LocalDate endTime = LocalDate.of(<span class=\"number\">2021</span>,<span class=\"number\">11</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">Period timeSub = Period.between(startTime,endTime);</span><br><span class=\"line\">System.out.println(timeSub.isNegative());</span><br></pre></td></tr></table></figure></li>\n<li>使用该类的plusXXX()方法、minusXXX()方法可以进行日期的增加和减少<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">Period periodTime = Period.of(<span class=\"number\">2020</span>,<span class=\"number\">10</span>,<span class=\"number\">26</span>);</span><br><span class=\"line\"><span class=\"comment\">//年</span></span><br><span class=\"line\">String plusYears = periodTime.plusYears(<span class=\"number\">1</span>).toString();</span><br><span class=\"line\">String minusYears = periodTime.minusYears(<span class=\"number\">1</span>).toString();</span><br><span class=\"line\"><span class=\"comment\">//月</span></span><br><span class=\"line\">String plusMonths = periodTime.plusMonths(<span class=\"number\">1</span>).toString();</span><br><span class=\"line\">String minusMonths = periodTime.minusMonths(<span class=\"number\">1</span>).toString();</span><br><span class=\"line\"><span class=\"comment\">//日</span></span><br><span class=\"line\">String plusDays = periodTime.plusDays(<span class=\"number\">1</span>).toString();</span><br><span class=\"line\">String minusDays = periodTime.minusDays(<span class=\"number\">1</span>).toString();</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h4 id=\"Duration类\"><a href=\"#Duration类\" class=\"headerlink\" title=\"Duration类\"></a>Duration类</h4><p>概述：表示秒或纳秒的时间间隔，适合处理较短的时间，且需要更高的精确性</p>\n<ol>\n<li>使用该类中between()方法比较两个瞬间的差值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">Instant start = Instant.parse(<span class=\"string\">\"2020-10-12T10:12:12.00Z\"</span>);</span><br><span class=\"line\">Instant end = Instant.now();</span><br><span class=\"line\">System.out.println(end.toString());</span><br><span class=\"line\">Duration duration = Duration.between(start,end);</span><br><span class=\"line\">System.out.println(duration.isNegative());</span><br></pre></td></tr></table></figure></li>\n<li>使用该类中的isNegative()方法判断起止时间的大小<br>(false为endTime大于startTime，否则相反)原理是根据该该方法(不需要参数)会校验Duration对象中的天、月、年是否为负，为负则返回true，为正则返回false<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例(使用LocalTime也可以获取Duration对象)</span></span><br><span class=\"line\">LocalTime startTime = LocalTime.of(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">30</span>,<span class=\"number\">234</span>);</span><br><span class=\"line\">LocalTime endTime  = LocalTime.of(<span class=\"number\">1</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">234</span>);</span><br><span class=\"line\">Duration duration = Duration.between(startTime,endTime);</span><br><span class=\"line\">System.out.println(duration.isNegative());</span><br></pre></td></tr></table></figure></li>\n<li>使用该类的plusXXX()方法、minusXXX()方法可以进行日期的增加和减少<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例(使用该类中的ofDays方法也可以获取Duration对象)</span></span><br><span class=\"line\">Duration durationDays = Duration.ofDays(<span class=\"number\">1</span>);</span><br><span class=\"line\">String addDays = durationDays.plusDays(<span class=\"number\">1</span>).toString();</span><br><span class=\"line\">System.out.println(durationDays.getSeconds());</span><br><span class=\"line\"></span><br><span class=\"line\">Duration durationHours = Duration.ofHours(<span class=\"number\">3</span>);</span><br><span class=\"line\">String minusHours = durationHours.minusHours(<span class=\"number\">1</span>).toString();</span><br><span class=\"line\">System.out.println(durationHours.getSeconds());</span><br><span class=\"line\"></span><br><span class=\"line\">Duration durationMinutes = Duration.ofMinutes(<span class=\"number\">1</span>);</span><br><span class=\"line\">System.out.println(durationMinutes.getSeconds());</span><br><span class=\"line\"></span><br><span class=\"line\">Duration durationMillis = Duration.ofMillis(<span class=\"number\">1</span>);</span><br><span class=\"line\">System.out.println(durationMillis.getSeconds());</span><br><span class=\"line\">System.out.println(durationMillis.getNano());</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h4 id=\"Instant类\"><a href=\"#Instant类\" class=\"headerlink\" title=\"Instant类\"></a>Instant类</h4><p>概述：表示某个时间，不带时区的即时时间点，精确到纳秒</p>\n<p>内部由两个Long字段组成，第一部分保存自标准Java时代到现在的秒数，第二部分保存的是纳秒数(不会超过999,999,999)。<strong>注意：通过这种方式获取的时间戳与北京时间相差8个时区，需要修正为北京时间，通过查看源代码发现Instant.now()使用等是UTC时间Clock.systemUTC().instant()。LocalDate、LocalDateTime 的now()方法使用的是系统默认时区 不存在Instant.now()的时间问题。</strong></p>\n<ol>\n<li>Instant相当于Date,以下是相互转换<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"comment\">//类方法java.time.Instant</span></span><br><span class=\"line\">Instant instant = Instant.now();</span><br><span class=\"line\">System.out.println(instant);</span><br><span class=\"line\">Instant beijingTime = Instant.now().plus(<span class=\"number\">8</span>, ChronoUnit.HOURS);</span><br><span class=\"line\">System.out.println(beijingTime);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类方法java.util.Date</span></span><br><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">System.out.println(date);</span><br><span class=\"line\"></span><br><span class=\"line\">date = Date.from(instant);</span><br><span class=\"line\">System.out.println(date);</span><br><span class=\"line\"></span><br><span class=\"line\">instant = date.toInstant();</span><br><span class=\"line\">System.out.println(instant);</span><br></pre></td></tr></table></figure></li>\n<li>Instant类中通过固定时间转换为Instant对象的方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据Date转换为instant(java.util.Instant中方法)</span></span><br><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">Instant instant = Instant.ofEpochMilli(date.getTime());</span><br><span class=\"line\">System.out.println(instant);</span><br><span class=\"line\"><span class=\"comment\">//根据毫秒转换为instant(java.util.Instant中方法)</span></span><br><span class=\"line\">instant = Instant.ofEpochMilli(<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">System.out.println(instant);</span><br><span class=\"line\"><span class=\"comment\">//根据秒转换为instant(java.util.Instant中方法)</span></span><br><span class=\"line\">instant = Instant.ofEpochSecond(<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">5</span>);</span><br><span class=\"line\">System.out.println(instant);</span><br><span class=\"line\"><span class=\"comment\">//根据秒和纳秒转换为instant(java.util.Instant中方法)，这样得到的instant会包含纳秒的数据 1000000000纳秒（9位）=1秒</span></span><br><span class=\"line\">instant = Instant.ofEpochSecond(<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>,<span class=\"number\">1000000000</span>*<span class=\"number\">60</span>);</span><br><span class=\"line\">System.out.println(instant);</span><br></pre></td></tr></table></figure></li>\n<li>Instant类中的parse方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"comment\">//该方法的入参仅支持UTC格式的字符串，而且date结果的字符串会报出DateTimeParseException异常</span></span><br><span class=\"line\">Instant instant = Instant.parse(<span class=\"string\">\"2020-10-26T12:10:00Z\"</span>);</span><br><span class=\"line\">System.out.println(instant);</span><br></pre></td></tr></table></figure></li>\n<li>Instant类中的加减日期方法(加)plus()和(减)minus()方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"comment\">//ChronoUnit位于java.time.temporal,Periodjava位于Java.time</span></span><br><span class=\"line\"><span class=\"comment\">//plus()方法会产生一个新的instant对象</span></span><br><span class=\"line\"><span class=\"comment\">//plus()方法给当前日期增加五天</span></span><br><span class=\"line\">Instant instant = Instant.now();</span><br><span class=\"line\">Instant instantAddDayOne = instant.plus(<span class=\"number\">5</span>, ChronoUnit.DAYS);</span><br><span class=\"line\">Instant instantAddDayTwo = instant.plus(Period.ofDays(<span class=\"number\">5</span>));</span><br><span class=\"line\">Instant instantAddDayTwo1 = instant.plus(Duration.ofDays(<span class=\"number\">5</span>));</span><br><span class=\"line\">System.out.println(instantAddDayOne.toString());</span><br><span class=\"line\">System.out.println(instantAddDayTwo.toString());</span><br><span class=\"line\">System.out.println(instantAddDayTwo1.toString());</span><br><span class=\"line\">System.out.println(instant == instantAddDayOne);</span><br><span class=\"line\"><span class=\"comment\">//minus()方法会产生一个新的instant对象</span></span><br><span class=\"line\"><span class=\"comment\">//minus()方法给当前日期减少五天</span></span><br><span class=\"line\">Instant instantSubDay = instant.minus(<span class=\"number\">5</span>, ChronoUnit.DAYS);</span><br><span class=\"line\">Instant instantSubDayTwo = instant.minus(Period.ofDays(<span class=\"number\">5</span>));</span><br><span class=\"line\">Instant instantSubDayTwo1 = instant.minus(Duration.ofDays(<span class=\"number\">5</span>));</span><br><span class=\"line\">System.out.println(instantSubDay);</span><br><span class=\"line\">System.out.println(instantSubDayTwo);</span><br><span class=\"line\">System.out.println(instantSubDayTwo1);</span><br><span class=\"line\">System.out.println(instant == instantSubDayTwo);</span><br></pre></td></tr></table></figure></li>\n<li>Instant类中比较两个日期的大小<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">Instant instantNow = Instant.now();</span><br><span class=\"line\">Instant instantAddDay = instantNow.plus(Duration.ofDays(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"comment\">//isAfter()方法判断instantAddDay是否在instantNow之后</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> flgAfter = instantAddDay.isAfter(instantNow);</span><br><span class=\"line\">System.out.println(flgAfter);</span><br><span class=\"line\"><span class=\"comment\">//isBefore()方法判断instantAddDay是否在instantNow之前</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> flgBefore = instantAddDay.isBefore(instantNow);</span><br><span class=\"line\">System.out.println(flgBefore);</span><br><span class=\"line\"><span class=\"comment\">//compareTo()方法比较，前者时间纳秒值大于后者返回1，小于返回-1，等于返回0</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> result1 = instantAddDay.compareTo(instantNow);</span><br><span class=\"line\">System.out.println(result1);</span><br><span class=\"line\"><span class=\"keyword\">int</span> result2 = instantNow.compareTo(instantAddDay);</span><br><span class=\"line\">System.out.println(result2);</span><br><span class=\"line\"><span class=\"keyword\">int</span> result3 = instantNow.compareTo(instantNow);</span><br><span class=\"line\">System.out.println(result3);</span><br></pre></td></tr></table></figure></li>\n<li>Instant类计算两个日期的差值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">Instant instantNow = Instant.now();</span><br><span class=\"line\">Instant instantAddDay = instantNow.plus(Duration.ofDays(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"comment\">//between()方法后者比前者大，返回正数，比前者小返回负数，相等返回0(ChronoUnit.DAYS位于java.time.temporal)</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> result1 = ChronoUnit.DAYS.between(instantNow, instantAddDay);</span><br><span class=\"line\">System.out.println(result1);</span><br><span class=\"line\"><span class=\"keyword\">long</span> result2 = ChronoUnit.DAYS.between(instantAddDay, instantNow);</span><br><span class=\"line\">System.out.println(result2);</span><br><span class=\"line\"><span class=\"keyword\">long</span> result3 = ChronoUnit.DAYS.between(instantNow, instantNow);</span><br><span class=\"line\">System.out.println(result3);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h4 id=\"LocalDateTime类\"><a href=\"#LocalDateTime类\" class=\"headerlink\" title=\"LocalDateTime类\"></a>LocalDateTime类</h4><p>概述：表示不带时区的日期及时间，替换之前的Calendar</p>\n<p><strong>注意:</strong>看上去，LocalDateTime和Instant很象，但记得的是“Instant中是不带时区的即时时间点。可能有人说，即时的时间点 不就是日期＋时间么？看上去是这样的，但还是有所区别，比如LocalDateTime对于用户来说，可能就只是一个简单的日期和时间的概念，考虑如下的 例子：两个人都在2013年7月2日11点出生，第一个人是在英国出生，而第二个是在加尼福利亚，如果我们问他们是在什么时候出生的话，则他们看上去都是 在同样的时间出生（就是LocalDateTime所表达的），但如果我们根据时间线（如格林威治时间线）去仔细考察，则会发现在出生的人会比在英国出生的人稍微晚几个小时（这就是Instant所表达的概念，并且要将其转换为UTC格式的时间）。</p>\n<ol>\n<li>LocalDateTime获取当前时间(系统自带默认时间)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class=\"line\">System.out.println(localDateTime);</span><br></pre></td></tr></table></figure></li>\n<li>LoclaDateTime类中时间加减计算(加)plusXXX()和(减)minusXXX()方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"comment\">// plus()和minus()方法与Instant类中相同</span></span><br><span class=\"line\">LocalDateTime localDateTime1 = localDateTime.plusHours(<span class=\"number\">5</span>);</span><br><span class=\"line\">System.out.println(localDateTime1);</span><br><span class=\"line\">System.out.println(localDateTime1 == localDateTime);</span><br><span class=\"line\">LocalDateTime localDateTime2 = localDateTime.minusHours(<span class=\"number\">5</span>);</span><br><span class=\"line\">System.out.println(localDateTime2);</span><br><span class=\"line\">System.out.println(localDateTime2 == localDateTime);</span><br></pre></td></tr></table></figure></li>\n<li>LocalDateTime显示年月日，不显示时间;显示时间，不显示年月<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class=\"line\"><span class=\"comment\">//显示年月日，且增加两个月</span></span><br><span class=\"line\">LocalDate localDate = localDateTime.toLocalDate().plusMonths(<span class=\"number\">2</span>);</span><br><span class=\"line\">System.out.println(localDate);</span><br><span class=\"line\"><span class=\"comment\">//显示时分秒毫秒，且减少两个小时</span></span><br><span class=\"line\">LocalTime localTime = localDateTime.toLocalTime().minusHours(<span class=\"number\">2</span>);</span><br><span class=\"line\">System.out.println(localTime);</span><br></pre></td></tr></table></figure></li>\n<li>LocalDateTime类中格式化日期的两种方式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码示例</span></span><br><span class=\"line\"><span class=\"comment\">//通过Instant类获取当前系统时间，ZoneId.systemDefault设置为系统默认时区</span></span><br><span class=\"line\"><span class=\"comment\">//ZoneId位于java.time</span></span><br><span class=\"line\">LocalDateTime localDateTime1 = LocalDateTime.ofInstant(Instant.now(), ZoneId.systemDefault());</span><br><span class=\"line\">System.out.println(localDateTime1);</span><br><span class=\"line\"><span class=\"comment\">//通过DateTimeFormatter类中的ofPattern方法获取自定义格式的系统时间，位于java.time.format</span></span><br><span class=\"line\">String localDateTimeStr = localDateTime1.format(DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>));</span><br><span class=\"line\">System.out.println(localDateTimeStr);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<p><strong>文章借鉴处</strong></p>\n<ul>\n<li><a href=\"https://blog.csdn.net/fragrant_no1/article/details/83988042\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/fragrant_no1/article/details/83988042</a></li>\n<li><a href=\"https://blog.csdn.net/neweastsun/article/details/88770592\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/neweastsun/article/details/88770592</a></li>\n<li><a href=\"https://blog.csdn.net/liubenlong007/article/details/62039628\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liubenlong007/article/details/62039628</a></li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"JavaApi","slug":"JavaApi","permalink":"https://carefulhuo.github.io/tags/JavaApi/"}]},{"title":"服务器性能问题排查","date":"2020-09-22T07:57:28.000Z","path":"posts/acb0bcb4/","text":"服务器性能问题一般有两种：高内存占用、高CPU占用，比如应用程序高内存占用，可能是因为文件读写、频繁的IO、内存频繁GC，进一步占用了内存和CPU；比如应用程序高CPU占用，可能是因为大任务计算、死循环、卡死、不断超时或者重试。所以需要具体问题具体分析。 高内存占用现象是应用响应慢、内存溢出、应用进程直接死掉。体现到代码里面可能是死锁1和饥饿2，因为资源不释放;需要关注，空闲可用内存还有多少，buff[(Page Cache)是一种高速缓存，用于CPU和内存之间的缓冲 ,是文件系统的cache。]和cache[5]还有多少； 高CPU占用现象是应用进程还活着，但是页面出不来，不响应。体现到代码里面可能是存在活锁3。在CPU占用高的情况下，需要知道是用户（user）还是系统（sys）的占用率高，如果是user的CPU占用高，说明应用在做消耗CPU过高的操作；如果是sys的CPU占用高，说明系统在做大量的IO的操作；如果占用率高的线程频繁变动，则可能是CPU时间片不断调度，线程唤醒一下而后换另一个线程跑，需要看多线程任务是否存在大计算问题，以及线程池设置是否合适！","content":"<p>　　服务器性能问题一般有两种：高内存占用、高CPU占用，比如应用程序高内存占用，可能是因为文件读写、频繁的IO、内存频繁GC，进一步占用了内存和CPU；比如应用程序高CPU占用，可能是因为大任务计算、死循环、卡死、不断超时或者重试。所以需要具体问题具体分析。</p>\n<a id=\"more\"></a>\n<p>　　高内存占用现象是应用响应慢、内存溢出、应用进程直接死掉。体现到代码里面可能是死锁<a href=\"由于执行顺序的原因，互相持有对方正在等待的锁；多个线程在相同的资源上发生等待\">1</a>和饥饿<a href=\"高优先级线程一直占用CPU，导致低优先级线程一直处于一个等待进入同步块的状态\">2</a>，因为资源不释放;需要关注，空闲可用内存还有多少，buff[(Page Cache)是一种高速缓存，用于CPU和内存之间的缓冲 ,是文件系统的cache。]和cache[5]还有多少；<br>　　高CPU占用现象是应用进程还活着，但是页面出不来，不响应。体现到代码里面可能是存在活锁<a href=\"并未产生线程阻塞，但是由于某种问题的存在，导致无法继续执行的情况\">3</a>。在CPU占用高的情况下，需要知道是用户（user）还是系统（sys）的占用率高，如果是user的CPU占用高，说明应用在做消耗CPU过高的操作；如果是sys的CPU占用高，说明系统在做大量的IO的操作；如果占用率高的线程频繁变动，则可能是CPU时间片不断调度，线程唤醒一下而后换另一个线程跑，需要看多线程任务是否存在大计算问题，以及线程池设置是否合适！</p>\n","comments":true,"link":"","tags":[{"name":"Server","slug":"Server","permalink":"https://carefulhuo.github.io/tags/Server/"}]},{"title":"https基础概念","date":"2020-07-05T07:32:59.000Z","path":"posts/8ac28a0d/","text":"Http协议 什么是HTTP协议？ HTTP协议是一种超文本传输协议，是一种请求，响应式协议。 HTTP协议的特点 支持浏览器(客户端)/服务器模式 简单快速，浏览器向服务器发起请求时，只需要传送请求方式和路径 灵活，可以发送任意类型的数据 无状态，Http是无状态协议，无状态是指对事物处理没有记忆能力 HTTP消息 HTTP消息有几种？ 两种，一个请求消息，一个响应消息。 请求和响应的定义 当浏览器向服务器发送请求数据的时候，即http请求消息 当服务器向浏览器发送响应数据的时候，即http响应消息 HTTP请求消息 http请求包含几个部分？ 三个部分，请求方式，资源路径，http版本 http常用的请求方式 请求方式 含义 GET 请求获取请求行URL所标识的资源 POST 向指定资源提交数据，请求服务器进行处理 HEAD 请求获取由URL所标识资源的响应消息头 PUT 将网页放到指定的URL位置上(上传/移动) DELETE 请求服务器删除URL所标识的资源 TRACE 请求服务器回送收到的请求消息，主要用于测试和诊断 CONNECT 保留将来使用 OPTIONS 请求查询服务器的性能，或查询与资源相关的选项和需求 注意：浏览器表单默认的是GET请求 请求方式 区别 GET 请求方式的参数信息都会在URL地址栏显示，而且通过请求参数传递数据，所以最多不超过1KB大小 POST 请求内容隐藏在实体内容中，通过实体内容进行数据传递，所以没有数据大小限制 请求头字段 含义 Accept:text/html 客户端希望接收HTML文本 Accept:image/gif 客户端希望接收GIF格式的图像资源 Accept:image/* 客户端可以接收所有image格式的子类型 Accept:&#42;/&#42; 客户端可以接收任意类型的数据 Accept-Charset 告知服务端，客户端所用的字符集 Accept-Encoding 用于指定客户端能够进行解码的数据编码方式 Accept-Language 客户端期望服务端返回那个国家的语言文档 Host 指定资源所在的主机和端口号 Max-Forward 指当前请求可以经过的代理服务器数量,每经过一个，数量减一 Referer 单击超链接向服务器发送GET请求时，浏览器会在发送的请求中加上该字段(防止盗链) User-Agent 指定浏览器或者其他客户端程序所使用的操作系统及版本，浏览器及版本，浏览器渲染引擎，浏览器语言 HTTP响应消息 HTTP响应消息包含几个部分 三个部分，响应状态行、响应消息头实体内容 响应状态行 HTTP版本 1.0、1.1 状态码及描述信息 状态码 描述信息 1xx 请求已经接受，需要继续处理 2xx 请求已经被服务器成功理解并接受 3xx 为完成请求，客户端需进一步细化请求 4xx 客户端的请求有错误 5xx 服务端出现错误 常用的状态码 状态码 状态信息 描述信息 200 正常 客户端请求成功，响应消息返回正常的请求结果 400 请求无效 客户端不正确的语法格式 403 禁止 服务端理解客户端的请求，但是拒绝处理 404 找不到 表示服务器不存在客户端存在的资源 500 内部服务器错误 大部分情况下是服务器端的CGI，jsp, ASP出现错误 响应消息头 说明 服务器端向客户端传递附加信息，包括服务程序名，被请求资源需要的认证方式，重定向地址，客户端请求资源的最后修改时间。 常见的响应消息头 响应消息头 描述内容 Accept-Range 说明服务器是否接收客户端使用Range请求头字段请求资源 Age 指出当前网页文档可以在客户端或代理服务器中缓存的有效时间 Etag 用于向客户端传送代表实体内容特征的标记信息，这些标记信息也称为实体标签，每个版本资源的实体标签是不同的，通过这个标签可以判断不同时间下，同一资源路径下的实体内容是否相同 Location 用于通知客户端获取请求文档的新地址 Retry-After 该字段可以与503状态码配合使用，告诉客户端什么时候可以重新发送请求，也可以与任何一个3xx状态码配合使用，告诉客户端处理重定向的最小延时时间 Server 用于指定服务器软件产品的名称 Vary 用于指定影响了服务器所生成的响应内容的那些请求头字段名 Refresh 用于告诉浏览器自动刷新页面的时间，是以秒为基本单位 Content-Disposition 用于服务器希望浏览器直接处理响应的实体内容，而是让用户选择将实体内容保存到一个文件中 实体内容 服务器根据客户端的请求所做出的处理结果 HTTP(请求或响应)消息中的其他字段 通用字段 字段名 字段描述 Cache-Control 用于通知位于客户端与服务器之间的代理服务器如何使用已缓存的页面 Connection 用于指定处理完本次请求/响应后，客户端与服务器是否还要保持连接 Date 用于表示HTTP消息产生的当前时间 Pragma 通知代理服务器和客户端如何使用缓存页面- Transfer-Encoding 通过该字段通知客户端响应数据的长度，因为HTTP1.1协议是持久化协议 Via 用于指定HTTP消息所途径的代理服务器所使用的协议与主机名 Warning 用于说明其他头字段和状态码不能说明的一些警告信息 实体头字段 字段名 字段描述 Allow 指定请求资源所支持的请求方式 Content-Language 用于指定返回网页文档的国家语言类型 Content-Length 用于表示实体内容的长度 Content-Location 用于指定响应消息中实体内容的实际位置路径(当一个请求资源有多个国家语言版本的时候，每个国家语言版本都有自己的位置，这时，请求资源路径和响应的实体内容的实际位置路径可能是不同的) Content-Type Content-Encoding 用于指定实体内容的压缩编码格式，服务器端对实体内容的压缩不影响实体内容的MIME类型，被压缩的实体内容在客户端被解压的时候，MIME类型与Content-Type头字段指定的类型一致","content":"<h4 id=\"Http协议\"><a href=\"#Http协议\" class=\"headerlink\" title=\"Http协议\"></a>Http协议</h4><ol>\n<li><strong>什么是HTTP协议？</strong><br> HTTP协议是一种超文本传输协议，是一种请求，响应式协议。<a id=\"more\"></a></li>\n<li><strong>HTTP协议的特点</strong><ol>\n<li>支持浏览器(客户端)/服务器模式</li>\n<li>简单快速，浏览器向服务器发起请求时，只需要传送请求方式和路径</li>\n<li>灵活，可以发送任意类型的数据</li>\n<li>无状态，Http是无状态协议，无状态是指对事物处理没有记忆能力</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h4 id=\"HTTP消息\"><a href=\"#HTTP消息\" class=\"headerlink\" title=\"HTTP消息\"></a>HTTP消息</h4><ol>\n<li><p><strong>HTTP消息有几种？</strong></p>\n<p> 两种，一个请求消息，一个响应消息。</p>\n</li>\n<li><p><strong>请求和响应的定义</strong></p>\n<ol>\n<li>当浏览器向服务器发送请求数据的时候，即http请求消息</li>\n<li>当服务器向浏览器发送响应数据的时候，即http响应消息</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h4 id=\"HTTP请求消息\"><a href=\"#HTTP请求消息\" class=\"headerlink\" title=\"HTTP请求消息\"></a>HTTP请求消息</h4><ol>\n<li><p><strong>http请求包含几个部分？</strong></p>\n<p> 三个部分，请求方式，资源路径，http版本</p>\n</li>\n<li><p><strong>http常用的请求方式</strong></p>\n<table>\n<thead>\n<tr>\n<th>请求方式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>请求获取请求行URL所标识的资源</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>向指定资源提交数据，请求服务器进行处理</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>请求获取由URL所标识资源的响应消息头</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>将网页放到指定的URL位置上(上传/移动)</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>请求服务器删除URL所标识的资源</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>请求服务器回送收到的请求消息，主要用于测试和诊断</td>\n</tr>\n<tr>\n<td>CONNECT</td>\n<td>保留将来使用</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>请求查询服务器的性能，或查询与资源相关的选项和需求</td>\n</tr>\n</tbody></table>\n<p> <em>注意：浏览器表单默认的是GET请求</em></p>\n<table>\n<thead>\n<tr>\n<th>请求方式</th>\n<th>区别</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>请求方式的参数信息都会在URL地址栏显示，而且通过请求参数传递数据，所以最多不超过1KB大小</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>请求内容隐藏在实体内容中，通过实体内容进行数据传递，所以没有数据大小限制</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>请求头字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept:text/html</td>\n<td>客户端希望接收HTML文本</td>\n</tr>\n<tr>\n<td>Accept:image/gif</td>\n<td>客户端希望接收GIF格式的图像资源</td>\n</tr>\n<tr>\n<td>Accept:image/*</td>\n<td>客户端可以接收所有image格式的子类型</td>\n</tr>\n<tr>\n<td>Accept:&#42;/&#42;</td>\n<td>客户端可以接收任意类型的数据</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>告知服务端，客户端所用的字符集</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>用于指定客户端能够进行解码的数据编码方式</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>客户端期望服务端返回那个国家的语言文档</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>指定资源所在的主机和端口号</td>\n</tr>\n<tr>\n<td>Max-Forward</td>\n<td>指当前请求可以经过的代理服务器数量,每经过一个，数量减一</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>单击超链接向服务器发送GET请求时，浏览器会在发送的请求中加上该字段(防止盗链)</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>指定浏览器或者其他客户端程序所使用的操作系统及版本，浏览器及版本，浏览器渲染引擎，浏览器语言</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<h4 id=\"HTTP响应消息\"><a href=\"#HTTP响应消息\" class=\"headerlink\" title=\"HTTP响应消息\"></a>HTTP响应消息</h4><ol>\n<li><p><strong>HTTP响应消息包含几个部分</strong></p>\n<p> 三个部分，响应状态行、响应消息头实体内容</p>\n</li>\n<li><p><strong>响应状态行</strong></p>\n<ol>\n<li><p><em>HTTP版本</em><br> 1.0、1.1</p>\n</li>\n<li><p><em>状态码及描述信息</em></p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>描述信息</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1xx</td>\n<td>请求已经接受，需要继续处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>请求已经被服务器成功理解并接受</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>为完成请求，客户端需进一步细化请求</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>客户端的请求有错误</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务端出现错误</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><em>常用的状态码</em></p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>状态信息</th>\n<th>描述信息</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>200</td>\n<td>正常</td>\n<td>客户端请求成功，响应消息返回正常的请求结果</td>\n</tr>\n<tr>\n<td>400</td>\n<td>请求无效</td>\n<td>客户端不正确的语法格式</td>\n</tr>\n<tr>\n<td>403</td>\n<td>禁止</td>\n<td>服务端理解客户端的请求，但是拒绝处理</td>\n</tr>\n<tr>\n<td>404</td>\n<td>找不到</td>\n<td>表示服务器不存在客户端存在的资源</td>\n</tr>\n<tr>\n<td>500</td>\n<td>内部服务器错误</td>\n<td>大部分情况下是服务器端的CGI，jsp, ASP出现错误</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><p><strong>响应消息头</strong></p>\n<ol>\n<li><p><em>说明</em></p>\n<p> 服务器端向客户端传递附加信息，包括服务程序名，被请求资源需要的认证方式，重定向地址，客户端请求资源的最后修改时间。</p>\n</li>\n<li><p><em>常见的响应消息头</em></p>\n<table>\n<thead>\n<tr>\n<th>响应消息头</th>\n<th>描述内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept-Range</td>\n<td>说明服务器是否接收客户端使用Range请求头字段请求资源</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>指出当前网页文档可以在客户端或代理服务器中缓存的有效时间</td>\n</tr>\n<tr>\n<td>Etag</td>\n<td>用于向客户端传送代表实体内容特征的标记信息，这些标记信息也称为实体标签，每个版本资源的实体标签是不同的，通过这个标签可以判断不同时间下，同一资源路径下的实体内容是否相同</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>用于通知客户端获取请求文档的新地址</td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>该字段可以与503状态码配合使用，告诉客户端什么时候可以重新发送请求，也可以与任何一个3xx状态码配合使用，告诉客户端处理重定向的最小延时时间</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>用于指定服务器软件产品的名称</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>用于指定影响了服务器所生成的响应内容的那些请求头字段名</td>\n</tr>\n<tr>\n<td>Refresh</td>\n<td>用于告诉浏览器自动刷新页面的时间，是以秒为基本单位</td>\n</tr>\n<tr>\n<td>Content-Disposition</td>\n<td>用于服务器希望浏览器直接处理响应的实体内容，而是让用户选择将实体内容保存到一个文件中</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n</li>\n<li><p><strong>实体内容</strong><br> 服务器根据客户端的请求所做出的处理结果</p>\n</li>\n</ol>\n<h4 id=\"HTTP-请求或响应-消息中的其他字段\"><a href=\"#HTTP-请求或响应-消息中的其他字段\" class=\"headerlink\" title=\"HTTP(请求或响应)消息中的其他字段\"></a>HTTP(请求或响应)消息中的其他字段</h4><ol>\n<li><p><strong>通用字段</strong></p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Cache-Control</td>\n<td>用于通知位于客户端与服务器之间的代理服务器如何使用已缓存的页面</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>用于指定处理完本次请求/响应后，客户端与服务器是否还要保持连接</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>用于表示HTTP消息产生的当前时间</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>通知代理服务器和客户端如何使用缓存页面-</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>通过该字段通知客户端响应数据的长度，因为HTTP1.1协议是持久化协议</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>用于指定HTTP消息所途径的代理服务器所使用的协议与主机名</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>用于说明其他头字段和状态码不能说明的一些警告信息</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>实体头字段</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Allow</td>\n<td>指定请求资源所支持的请求方式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>用于指定返回网页文档的国家语言类型</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>用于表示实体内容的长度</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>用于指定响应消息中实体内容的实际位置路径(当一个请求资源有多个国家语言版本的时候，每个国家语言版本都有自己的位置，这时，请求资源路径和响应的实体内容的实际位置路径可能是不同的)</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td></td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>用于指定实体内容的压缩编码格式，服务器端对实体内容的压缩不影响实体内容的MIME类型，被压缩的实体内容在客户端被解压的时候，MIME类型与Content-Type头字段指定的类型一致</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n","comments":true,"link":"","tags":[{"name":"网络","slug":"网络","permalink":"https://carefulhuo.github.io/tags/%E7%BD%91%E7%BB%9C/"}]}]